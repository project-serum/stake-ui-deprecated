{"version":3,"sources":["skin/index.ts","utils/idl.ts","components/rewards/RewardsList.tsx","store/actions.ts","components/multisig/Multisig.tsx","utils/tokens.tsx","idl/lockup.ts","idl/registry.ts","idl/multisig.ts","components/common/WalletProvider.tsx","components/Stake.tsx","components/common/Notification.tsx","store/reducer.ts","store/index.ts","components/common/BootstrapProvider.tsx","components/common/Header.tsx","components/common/Footer.tsx","components/common/Layout.tsx","components/common/RegistrarSelect.tsx","components/Me.tsx","utils/lockup.ts","components/rewards/DropRewardButton.tsx","components/common/MyNode.tsx","components/rewards/ClaimRewardButton.tsx","components/rewards/Rewards.tsx","components/common/VestingAccountsSelect.tsx","pages/MyNode.tsx","components/lockups/NewVesting.tsx","components/lockups/VestingAccountCard.tsx","components/lockups/Vestings.tsx","pages/Lockup.tsx","pages/Multisig.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils/registry.ts","components/common/OwnedTokenAccountsSelect.tsx","store/config.ts"],"names":["_skin","active","ready","notReady","inactive","deactivating","instance","IDL_INSTRUCTION_LAYOUT","rustEnum","struct","encodeInstruction","i","buffer","Buffer","alloc","len","encode","concat","IDL_TAG","slice","from","reverse","RewardsList","props","rewards","loading","forEach","r","style","display","marginLeft","marginRight","length","filter","vendor","account","expired","map","RewardListItem","rli","primary","useState","open","setOpen","dateLabel","Date","startTs","toNumber","toLocaleString","fromLabel","toString","button","onClick","visibility","reward","locked","justifyContent","color","needsClaim","toDisplay","total","mint","decimals","publicKey","secondary","in","timeout","unmountOnExit","undefined","RewardListItemDetails","registryClient","useWallet","useSnackbar","enqueueSnackbar","closeSnackbar","useSelector","state","registrar","registry","vendorMint","accounts","expiryReceiverToken","setExpiryReceiverToken","expire","a","variant","PublicKey","createProgramAddress","toBuffer","nonce","programId","vendorSigner","rpc","expireReward","vault","expiryReceiver","tokenProgram","TokenInstructions","TOKEN_PROGRAM_ID","clock","SYSVAR_CLOCK_PUBKEY","tx","action","signature","poolTokenSupply","expiryTs","toLocaleDateString","rewardEventQCursor","now","provider","wallet","equals","flexDirection","flex","onChange","f","RewardListItemViewModel","cursor","ctx","event","member","sptAccount","balances","spt","lockedSptAccount","balancesLocked","ownsPoolShares","amount","notYetClaimed","rewardsCursor","isEligible","lastStakeTs","vendorProgramAccount","ActionType","Multisig","multisig","history","useHistory","multisigAddress","setMultisigAddress","disabled","addr","_","isValidPubkey","searchFn","push","paddingLeft","paddingRight","borderBottom","background","padding","border","outlineWidth","placeholder","value","e","target","onKeyPress","key","NewMultisigButton","MultisigInstance","multisigClient","multisigAccount","setMultisigAccount","transactions","setTransactions","showSignerDialog","setShowSignerDialog","showAddTransactionDialog","setShowAddTransactionDialog","forceRefresh","setForceRefresh","useEffect","then","catch","err","console","error","transaction","all","txs","subscribe","on","fixed","maxWidth","marginBottom","marginTop","textAlign","position","elevation","flexGrow","component","threshold","owners","title","arrow","disablePadding","TxListItem","AddTransactionDialog","onClose","didAddTransaction","SignerDialog","NewMultisigDialog","setThreshold","zeroAddr","participants","setParticipants","_onClose","createMultisig","Account","ownerSize","multisigSize","findProgramAddress","p","BN","rent","SYSVAR_RENT_PUBKEY","createInstruction","signers","instructions","fullWidth","label","type","parseInt","idx","str","txAccount","setTxAccount","rows","field","didExecute","wordBreak","width","float","encodeBase64","data","ownerSetSeqno","msAccountRows","owner","approve","execute","multisigSigner","executeTransaction","remainingAccounts","t","pubkey","isSigner","isWritable","icon","ixLabel","errStr","align","AccountsList","BPF_LOADER_UPGRADEABLE_PID","coder","sighash","idl","signer","setSigner","addrNonce","paddingBottom","ProgramUpdateListItem","IdlUpgradeListItem","MultisigSetOwnersListItem","ChangeThresholdListItem","ChangeThresholdListItemDetails","changeThreshold","changeThresholdData","proposer","createTransaction","SetOwnersListItemDetails","setOwners","setOwnersData","UpgradeIdlListItemDetails","setProgramId","setBuffer","createTransactionAccount","programAddr","bufferAddr","anchor","idlAddress","idlAddr","accs","UpgradeProgramListItemDetails","connection","getAccountInfo","programAccount","Error","programdataAddress","spill","instruction","TokenListContext","React","createContext","tokenMap","Map","useTokenInfos","useContext","TokenRegistryProvider","setTokenMap","TokenListProvider","resolve","tokens","tokenList","filterByClusterSlug","getList","reduce","item","set","address","Provider","children","fromDisplay","toDisplayLabel","whitelistedMint","Object","keys","networks","mainnet","mints","pop","toUpperCase","version","name","isMut","args","option","defined","kind","fields","vec","methods","types","errors","code","msg","variants","w","WalletContext","WalletProvider","walletProvider","common","network","useMemo","opts","preflightCommitment","commitment","Connection","url","Wallet","lockupClient","Program","LockupIdl","lockupProgramId","RegistryIdl","registryProgramId","MultisigIdl","multisigProgramId","Stake","dispatch","useDispatch","registrarAccount","memberAccount","createPoolTokens","isLocked","poolMint","u64","rewardEventQ","memberSigner","registrarSigner","beneficiary","stake","redeemPoolTokens","pendingWithdrawal","startUnstake","pwAccount","RegistryCreatePendingWithdrawal","createPool","shares","redeemPool","PoolCard","create","redeem","RedemptionList","AllPendingTransfers","poolAmount","setPoolAmount","setIsLocked","poolTokenMint","pricePerShare","stakeRate","cost","mul","subheader","fontWeight","supply","withdrawalTimelock","control","checked","labelPlacement","pendingWithdrawals","pw","RegistrySetPendingWithdrawals","paddingTop","fontSize","PendingStakeListItem","isLast","sptLabel","l","overflow","whiteSpace","PendingWithdrawalButton","endTs","pool","endPendingWithdrawal","vaultPw","endUnstake","updatedPendingWithdrawal","burned","RegistryUpdatePendingWithdrawal","skin","height","mintAccount","pendingTransfers","setPendingTransfers","transfers","sort","b","fetchAll","maxHeight","div","withTx","snack","beforeLabel","afterLabel","execTx","ViewTransactionOnExplorerButton","explorerClusterSuffix","urlSuffix","rel","href","BootstrapState","initialState","bootstrapTrigger","shutdownTrigger","isWalletConnected","bootstrapState","NeedsBootstrap","ownedTokenAccounts","lockup","vestings","registrars","srm","store","createStore","newState","CommonAppWillBootstrap","IsBootstrapping","CommonAppDidBootstrap","Bootstrapped","CommonWalletSetProvider","CommonWalletDidConnect","CommonWalletDidDisconnect","CommonSetNetwork","networkKey","values","CommonTriggerBootstrap","CommonTriggerShutdown","CommonDidShutdown","s","CommonOwnedTokenAccountsSet","CommonOwnedTokenAccountsUpdate","LockupSetVestings","vestingAccounts","LockupUpdateVesting","vesting","LockupCreateVesting","unshift","RegistrySetMember","RegistrySetRegistrar","AccountAdd","AccountUpdate","BootstrapProvider","bootstrap","useCallback","autoHideDuration","refreshAccounts","members","accountStore","fromEntries","m","registrarSwitch","shutdown","disconnect","fetchRegistrars","registrarAddresses","getMultipleAccounts","raw","decode","parseMintAccount","rewardQs","fetchMembers","Promise","memberSeed","seed","createWithSeed","memberPublicKey","memberAddresses","memberAccounts","fetchAndDispatchMemberAccounts","fetchMints","mintAddresses","fetchOwnedTokenAccounts","getOwnedTokenAccounts","fetchVestingAccounts","v","newRegistrar","oldRegistrar","oldMember","oldMemberAccount","newMember","newMemberAccount","subscribeRegistrar","subscribeMember","oldRegistrarAccount","rewardQueue","unsubscribe","newRegistrarAccount","onAccountChange","acc","createVaultSubscription","tokenAccount","parseTokenAccount","vaultStake","filters","getOwnedAccountsFilters","getProgramAccounts","resp","result","parseTokenAccountData","ACCOUNT_LAYOUT","BufferLayout","memcmp","offset","offsetOf","bytes","toBase58","dataSize","span","Header","isAppReady","isRefreshing","setIsRefreshing","AppBar","boxShadow","Toolbar","SerumLogoButton","BarButton","hrefClient","srmFaucet","CircularProgress","IconButton","NetworkSelector","WalletConnectButton","UserSelector","Button","alt","src","Link","textDecoration","Typography","anchorEl","setAnchorEl","handleClose","currentTarget","Menu","Boolean","n","MenuItem","Select","displayEmpty","renderValue","showDisconnect","connect","Footer","zIndex","bottom","backgroundColor","borderTop","FooterButton","isEnd","Layout","refresh","setRefresh","minHeight","RiskBar","window","localStorage","getItem","DisconnectedSplash","RiskDisclosureForm","onConsent","setItem","useStyles","makeStyles","theme","root","spacing","classes","isDisconnected","className","LinearProgress","activeRegistrar","RegistrarSelect","selectedRegistrar","tokenInfos","getImage","get","registrarToDisplayLabel","entry","token","logoURI","Me","MemberBalancesCard","lockedVault","lockedVaultStake","lockedVaultPw","lockedSpt","tables","description","balance","pending","Card","CardContent","BalanceTable","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","row","scope","vestingSigner","availableForWithdrawal","setSigners","simulateTransaction","log","logs","JSON","parse","RewardTypeViewModel","TabModel","DropRewardButton","showDialog","setShowDialog","DropRewardDialog","Unlocked","rewardTypeTab","setRewardTypeTab","Dialog","DialogTitle","DialogContent","Tabs","_e","Tab","Locked","DropUnlockedForm","DropLockedForm","rewardDisplayAmount","setRewardDisplayAmount","setExpiryTs","depositor","setDepositor","setMint","isSendEnabled","sendUnlockedReward","notification","serumCmn","lockedRewardAmount","rewardKind","unlocked","vendorVault","depositorAuthority","rewardVendor","dropReward","DropVendorForm","onCancel","setStartTs","setEndTs","periodCount","setPeriodCount","sendLockedRewards","rewardAmount","mintOptions","OwnedTokenAccountsSelect","FormHelperText","FormControl","InputLabel","TextField","id","InputLabelProps","shrink","parseFloat","InputProps","inputProps","min","d","getTime","DialogActions","ClaimRewardButton","setToken","clickHandler","_vendorSigner","vendoredVesting","vendoredVestingVault","vendoredVestingSigner","createVesting","meta","lockupProgram","cmn","createTokenAccountInstrs","claimRewardLocked","claimReward","to","unlockedAlloc","Rewards","rewardEventQueue","events","rewardEvents","fromMessage","nextReward","shift","Paper","VestingAccountsSelect","deposit","fromAccount","setFromAccount","pk","availableAmount","outstanding","sub","whitelistOwned","MyNode","tab","setTab","MyNodeBanner","Container","showDepositDialog","setShowDepositDialog","showWithdrawDialog","setShowWithdrawDialog","createStakeAccount","memberSignerPublicKey","createBalanceSandbox","mainTx","lockedTx","SystemProgram","getMinimumBalanceForRentExemption","size","fromPubkey","newAccountPubkey","basePubkey","lamports","space","createAccountWithSeed","createMember","allTxs","sendAll","skipPreflight","txSigs","memberProgramAccount","HoverSpan","styled","DepositDialog","WithdrawDialog","TransferDialog","contextText","onTransfer","displayAmount","relayData","_memberSigner","_vestingSigner","relayAccounts","whitelistedProgram","whitelistedProgramVault","whitelistedProgramVaultAuthority","transfer","whitelistWithdraw","updatedVestingAccount","getTokenAccount","whitelistDeposit","withdraw","setDisplayAmount","setFrom","setVesting","maxDisplayAmount","setMaxDisplayAmount","submitBtnDisabled","TransitionComponent","Transition","keepMounted","FormControlLabel","Switch","max","_maxDisplayAmount","forwardRef","ref","Slide","direction","MyNodePage","NewVestingButton","NewVestingDialog","defaultStartDate","defaultStartTs","defaultEndDate","defaultEndTs","setBeneficiary","isValidBeneficiary","displayBeneficiaryError","startTimestamp","setStartTimestamp","timestamp","setTimestamp","isLoading","setIsLoading","submitBtnEnabled","createVestingClickHandler","beneficiaryPublicKey","beneficiaryAccount","vestingVault","vestingAccount","helperText","defaultValue","VestingAccountCard","expanded","setExpanded","hover","setHover","displayFn","input","outstandingLabel","tsOverflow","mod","shiftedStartTs","period","vestingDates","Array","formatDate","rewardOverflow","startBalance","rewardPerPeriod","cumulativeVesting","k","startLabel","endLabel","setAvailableForWithdrawal","withdrawalAccount","setWithdrawalAccount","_availableForWithdrawal","withdrawEnabled","gtn","realizor","newVesting","program","metadata","grantor","onMouseOver","onMouseOut","ListItem","ListItemIcon","ListItemText","Collapse","labels","series","options","axisY","FixedScaleAxis","low","high","ticks","lineSmooth","Interpolation","step","split","getMonth","getDate","getFullYear","Vestings","List","LockupPage","MultisigPage","MultisigInstancePage","path","useLocation","pathname","App","createMuiTheme","palette","default","typography","fontFamily","join","overrides","CssBaseline","maxSnack","basename","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","sha256","registrySigner","createSptIx","createVaultIx","createVaultStakeIx","createVaultPwIx","tx0","Transaction","add","rewardQ","tail","head","ota","ownedTokenAccount","msrmFaucet","msrm","fida","dxl","maps","oxy","devnet","token1","token2","localhost"],"mappings":"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G,KAAM,aAER,CACEqG,KAAM,cACNrG,KAAM,OAER,CACEqG,KAAM,eACNrG,KAAM,OAER,CACEqG,KAAM,YACNrG,KAAM,OAER,CACEqG,KAAM,UACNrG,KAAM,OAER,CACEqG,KAAM,QACNrG,KAAM,OAER,CACEqG,KAAM,cACNrG,KAAM,OAER,CACEqG,KAAM,iBACNrG,KAAM,OAER,CACEqG,KAAM,QACNrG,KAAM,MAER,CACEqG,KAAM,WACNrG,KAAM,CACJwG,OAAQ,CACNC,QAAS,kBAQvBK,MAAO,CACL,CACET,KAAM,WACNrG,KAAM,CACJ0G,KAAM,SACNC,OAAQ,CACN,CACEN,KAAM,UACNrG,KAAM,aAER,CACEqG,KAAM,WACNrG,KAAM,gBAKd,CACEqG,KAAM,iBACNrG,KAAM,CACJ0G,KAAM,SACNC,OAAQ,CACN,CACEN,KAAM,YACNrG,KAAM,iBAMhB+G,OAAQ,CACN,CACEC,KAAM,IACNX,KAAM,mBACNY,IAAK,gEAEP,CACED,KAAM,IACNX,KAAM,gBACNY,IAAK,4DAEP,CACED,KAAM,IACNX,KAAM,uBACNY,IAAK,yDAEP,CACED,KAAM,IACNX,KAAM,wBACNY,IAAK,uDAEP,CACED,KAAM,IACNX,KAAM,wBACNY,IAAK,+DAEP,CACED,KAAM,IACNX,KAAM,oBACNY,IAAK,wBAEP,CACED,KAAM,IACNX,KAAM,qBACNY,IAAK,8BAEP,CACED,KAAM,IACNX,KAAM,gCACNY,IAAK,oCAEP,CACED,KAAM,IACNX,KAAM,gBACNY,IAAK,qBAEP,CACED,KAAM,IACNX,KAAM,8BACNY,IAAK,kCAEP,CACED,KAAM,IACNX,KAAM,qCACNY,IAAK,0DAEP,CACED,KAAM,IACNX,KAAM,2BACNY,IAAK,sCAEP,CACED,KAAM,IACNX,KAAM,yBACNY,IAAK,8CAEP,CACED,KAAM,IACNX,KAAM,yBACNY,IAAK,8BAEP,CACED,KAAM,IACNX,KAAM,eACNY,IAAK,kEAEP,CACED,KAAM,IACNX,KAAM,8BACNY,IAAK,gEAEP,CACED,KAAM,IACNX,KAAM,sBACNY,IAAK,8DAEP,CACED,K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ER,CACEqG,KAAM,QACNrG,KAAM,OAER,CACEqG,KAAM,UACNrG,KAAM,QAER,CACEqG,KAAM,OACNrG,KAAM,CACJyG,QAAS,yBAOrBK,MAAO,CACL,CACET,KAAM,iBACNrG,KAAM,CACJ0G,KAAM,SACNC,OAAQ,CACN,CACEN,KAAM,MACNrG,KAAM,aAER,CACEqG,KAAM,QACNrG,KAAM,aAER,CACEqG,KAAM,aACNrG,KAAM,aAER,CACEqG,KAAM,UACNrG,KAAM,gBAKd,CACEqG,KAAM,cACNrG,KAAM,CACJ0G,KAAM,SACNC,OAAQ,CACN,CACEN,KAAM,SACNrG,KAAM,aAER,CACEqG,KAAM,KACNrG,KAAM,OAER,CACEqG,KAAM,SACNrG,KAAM,WAKd,CACEqG,KAAM,mBACNrG,KAAM,CACJ0G,KAAM,OACNQ,SAAU,CACR,CACEb,KAAM,YAER,CACEA,KAAM,SACNM,OAAQ,CACN,CACEN,KAAM,WACNrG,KAAM,OAER,CACEqG,KAAM,SACNrG,KAAM,OAER,CACEqG,KAAM,eACNrG,KAAM,aAQpB+G,OAAQ,CACN,CACEC,KAAM,IACNX,KAAM,4BACNY,IAAK,wDAEP,CACED,KAAM,IACNX,KAAM,eACNY,IAAK,2DAEP,CACED,KAAM,IACNX,KAAM,2BACNY,IAAK,+BAEP,CACED,KAAM,IACNX,KAAM,sBACNY,IAAK,oDAEP,CACED,KAAM,IACNX,KAAM,sBACNY,IAAK,2DAEP,CACED,KAAM,IACNX,KAAM,mBACNY,IAAK,sEAEP,CACED,KAAM,IACNX,KAAM,eACNY,IAAK,sDAEP,CACED,KAAM,IACNX,KAAM,oBACNY,IAAK,wBAEP,CACED,KAAM,IACNX,KAAM,UACNY,IAAK,iCAEP,CACED,KAAM,IACNX,KAAM,kBACNY,IAAK,6CAEP,CACED,KAAM,IACNX,KAAM,qBACNY,IAAK,mEAEP,CACED,KAAM,IACNX,KAAM,gBACNY,IAAK,4DAEP,CACED,KAAM,IACNX,KAAM,gBACNY,IAAK,uCAEP,CACED,KAAM,IACNX,KAAM,yBACNY,IAAK,2CAEP,CACED,KAAM,IACNX,KAAM,sBACN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","file":"static/js/main.07a08203.chunk.js","sourcesContent":["type Skin = {\n  active: string;\n  ready: string;\n  inactive: string;\n  notReady: string;\n  deactivating: string;\n};\n\nconst _skin: Skin = {\n  active: '#43a047',\n  ready: '#3f51b5',\n  notReady: '#ccc',\n  inactive: 'red',\n  deactivating: 'rgb(255, 121, 42)',\n};\n\nexport function instance(): Skin {\n  return _skin;\n}\n","import { struct, Layout } from 'buffer-layout';\nimport { rustEnum } from '@project-serum/borsh';\n\n// Simplified since we only use the SetBuffer variant.\nexport type IdlInstruction =\n  | Create\n  | CreateBuffer\n  | Write\n  | SetBuffer\n  | SetAuthority;\n\ntype Create = {};\ntype CreateBuffer = {};\ntype Write = {};\ntype SetBuffer = {};\ntype SetAuthority = {};\n\nconst IDL_INSTRUCTION_LAYOUT: Layout<IdlInstruction> = rustEnum([\n  struct([], 'create'),\n  struct([], 'createBuffer'),\n  struct([], 'write'),\n  struct([], 'setBuffer'),\n  struct([], 'setAuthority'),\n]);\n\nexport function encodeInstruction(i: IdlInstruction): Buffer {\n  const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n  const len = IDL_INSTRUCTION_LAYOUT.encode(i, buffer);\n  return Buffer.concat([IDL_TAG, buffer.slice(0, len)]);\n}\n\n// Reverse for little endian.\nexport const IDL_TAG = Buffer.from('0a69e9a778bcf440', 'hex').reverse();\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport LockIcon from '@material-ui/icons/Lock';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Collapse from '@material-ui/core/Collapse';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\nimport { PublicKey, SYSVAR_CLOCK_PUBKEY } from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport OwnedTokenAccountsSelect from '../../components/common/OwnedTokenAccountsSelect';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport { toDisplay } from '../../utils/tokens';\nimport { ProgramAccount } from '../../store/reducer';\nimport { Network } from '../../store/config';\nimport { State as StoreState } from '../../store/reducer';\nimport { ViewTransactionOnExplorerButton } from '../../components/common/Notification';\n\ntype RewardsListProps = {\n  rewards: (RewardListItemViewModel | null)[];\n};\n\nexport default function RewardsList(props: RewardsListProps) {\n  const { rewards } = props;\n  let loading = false;\n  rewards.forEach(r => {\n    if (r === null) {\n      loading = true;\n    }\n  });\n  return (\n    <List>\n      {loading ? (\n        <CircularProgress\n          style={{\n            display: 'block',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n          }}\n        />\n      ) : rewards.length > 0 ? (\n        rewards\n          .filter(r => r!.vendor.account.expired === false)\n          .map(r => {\n            return <RewardListItem rli={r as RewardListItemViewModel} />;\n          })\n      ) : (\n        <ListItem>\n          <ListItemText primary={'No rewards found'} />\n        </ListItem>\n      )}\n    </List>\n  );\n}\n\ntype RewardListItemProps = {\n  rli: RewardListItemViewModel;\n};\n\nfunction RewardListItem(props: RewardListItemProps) {\n  const { rli } = props;\n\n  const [open, setOpen] = useState(false);\n\n  const dateLabel = new Date(\n    rli.vendor!.account.startTs.toNumber() * 1000,\n  ).toLocaleString();\n  let fromLabel = `Dropped by ${rli.vendor.account.from.toString()} | ${dateLabel}`;\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(open => !open)}>\n        <LockIcon\n          style={{\n            visibility: rli.reward.locked ? 'visible' : 'hidden',\n            marginRight: '16px',\n          }}\n        />\n        <ListItemText\n          primary={\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'space-between',\n                color: rli.needsClaim ? '#54a15e' : '',\n              }}\n            >\n              <div>{`${toDisplay(\n                rli.vendor.account.total,\n                rli.mint!.account.decimals,\n              )} ${rli.mint!.publicKey}`}</div>\n            </div>\n          }\n          secondary={fromLabel}\n        />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        {rli.vendor === undefined ? (\n          <CircularProgress />\n        ) : (\n          <RewardListItemDetails vendor={rli.vendor!} />\n        )}\n      </Collapse>\n    </>\n  );\n}\n\ntype RewardListItemDetailsProps = {\n  vendor: ProgramAccount;\n};\n\nfunction RewardListItemDetails(props: RewardListItemDetailsProps) {\n  let { vendor } = props;\n  const { registryClient } = useWallet();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const { vendorMint, registrar } = useSelector((state: StoreState) => {\n    return {\n      registrar: state.registry.registrar,\n      vendorMint: state.accounts[vendor.account.mint.toString()],\n    };\n  });\n  const [\n    expiryReceiverToken,\n    setExpiryReceiverToken,\n  ] = useState<null | PublicKey>(null);\n  const expire = async () => {\n    enqueueSnackbar('Expiring reward', {\n      variant: 'info',\n    });\n    const vendorSigner = await PublicKey.createProgramAddress(\n      [\n        registrar.toBuffer(),\n        vendor.publicKey.toBuffer(),\n        Buffer.from([vendor.account.nonce]),\n      ],\n      registryClient.programId,\n    );\n\n    const tx = await registryClient.rpc.expireReward({\n      accounts: {\n        registrar,\n        vendor: vendor.publicKey,\n        vault: vendor.account.vault,\n        vendorSigner,\n        expiryReceiver: vendor.account.expiryReceiver,\n        expiryReceiverToken,\n        tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n        clock: SYSVAR_CLOCK_PUBKEY,\n      },\n    });\n    closeSnackbar();\n    enqueueSnackbar(`Reward expired`, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx as string} />,\n    });\n  };\n  return (\n    <div\n      style={{\n        marginLeft: '56px',\n      }}\n    >\n      <div>Vendor</div>\n      <ul>\n        <li>Address {vendor.publicKey.toString()}</li>\n        <li>Vault: {vendor.account.vault.toString()}</li>\n        <li>Mint: {vendor.account.mint.toString()}</li>\n        <li>\n          Pool token supply snapshot:{' '}\n          {vendor.account.poolTokenSupply.toString()}\n        </li>\n        <li>\n          Expiry:{' '}\n          {new Date(\n            vendor.account.expiryTs.toNumber() * 1000,\n          ).toLocaleDateString()}\n          {` (${vendor.account.expiryTs.toNumber()})`}\n        </li>\n        <li>Expiry receiver: {vendor.account.expiryReceiver.toString()}</li>\n        <li>Expired: {vendor.account.expired.toString()}</li>\n        <li>\n          Reward queue cursor: {vendor.account.rewardEventQCursor.toString()}\n        </li>\n      </ul>\n      {(vendor.account.expiryTs.toNumber() <= Date.now()/1000) && registryClient.provider.wallet.publicKey.equals(vendor.account.expiryReceiver) && (\n        <div style={{ display: 'flex', flexDirection: 'row-reverse' }}>\n          <Button\n            color=\"primary\"\n            variant=\"outlined\"\n            onClick={expire}\n            style={{ marginRight: '24px' }}\n          >\n            Expire\n          </Button>\n          <div style={{ flex: 1, marginRight: '24px' }}>\n            <OwnedTokenAccountsSelect\n              variant=\"outlined\"\n              decimals={vendorMint.decimals}\n              mint={vendor.account.mint}\n              onChange={(f: PublicKey) => {\n                setExpiryReceiverToken(f);\n              }}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport class RewardListItemViewModel {\n  constructor(\n    readonly reward: any,\n    readonly cursor: number,\n    readonly needsClaim: boolean,\n    readonly mint: ProgramAccount,\n    readonly vendor: ProgramAccount,\n  ) {}\n\n  static fromMessage(ctx: Context, event: any): RewardListItemViewModel | null {\n    let needsClaim = false;\n\n    const vendor = ctx.accounts[event.vendor.toString()];\n\n    if (vendor === undefined) {\n      return null;\n    }\n\n    const mint = {\n      publicKey: vendor.mint,\n      account: ctx.accounts[vendor.mint.toString()],\n    };\n\n    if (ctx.member !== undefined) {\n      // Must own shares of the reward's target pool.\n      const sptAccount =\n        ctx.accounts[ctx.member.account.balances.spt.toString()];\n      const lockedSptAccount =\n        ctx.accounts[ctx.member.account.balancesLocked.spt.toString()];\n\n      const ownsPoolShares = sptAccount.amount + lockedSptAccount.amount > 0;\n\n      // Must not have claimed the reward yet.\n      const notYetClaimed =\n        vendor.rewardEventQCursor >= ctx.member.account.rewardsCursor;\n\n      // Must have staked before the reward was dropped.\n      const isEligible = ctx.member.account.lastStakeTs < vendor.startTs;\n\n      // Must not have let the reward expire.\n      const expired = vendor.expired;\n\n      needsClaim = ownsPoolShares && notYetClaimed && isEligible && !expired;\n    }\n\n    const vendorProgramAccount = {\n      publicKey: event.vendor,\n      account: vendor,\n    };\n\n    return new RewardListItemViewModel(\n      event,\n      vendor.rewardEventQCursor,\n      needsClaim,\n      mint,\n      vendorProgramAccount,\n    );\n  }\n}\n\ntype Context = {\n  accounts: any;\n  rewardEventQueue: ProgramAccount;\n  member?: ProgramAccount;\n  network: Network;\n};\n","export type Action = {\n  type: ActionType;\n  item: any;\n};\n\nexport enum ActionType {\n  // Common.\n  CommonTriggerBootstrap,\n  CommonAppWillBootstrap,\n  CommonAppDidBootstrap,\n  CommonTriggerShutdown,\n  CommonDidShutdown,\n  CommonWalletDidConnect,\n  CommonWalletDidDisconnect,\n  CommonWalletSetProvider,\n  CommonSetNetwork,\n  CommonOwnedTokenAccountsSet,\n  CommonOwnedTokenAccountsUpdate,\n  CommonWalletReset,\n\n  // Lockup.\n  LockupSetVestings,\n  LockupUpdateVesting,\n  LockupCreateVesting,\n\n  // Registry.\n  RegistrySetMember,\n  RegistrySetRegistrar,\n  RegistrySetPendingWithdrawals,\n  RegistryCreatePendingWithdrawal,\n  RegistryUpdatePendingWithdrawal,\n\n  // Accounts.\n  AccountAdd,\n  AccountUpdate,\n}\n","import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router';\nimport { useSnackbar } from 'notistack';\nimport { encode as encodeBase64 } from 'js-base64';\nimport Container from '@material-ui/core/Container';\nimport AppBar from '@material-ui/core/AppBar';\nimport GavelIcon from '@material-ui/icons/Gavel';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport Paper from '@material-ui/core/Paper';\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\nimport CheckIcon from '@material-ui/icons/Check';\nimport ReceiptIcon from '@material-ui/icons/Receipt';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport Collapse from '@material-ui/core/Collapse';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport InfoIcon from '@material-ui/icons/Info';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport BuildIcon from '@material-ui/icons/Build';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport CardContent from '@material-ui/core/CardContent';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport SearchIcon from '@material-ui/icons/Search';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport AddIcon from '@material-ui/icons/Add';\nimport List from '@material-ui/core/List';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport BN from 'bn.js';\nimport {\n  Account,\n  PublicKey,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n} from '@solana/web3.js';\nimport * as anchor from '@project-serum/anchor';\nimport { useWallet } from '../common/WalletProvider';\nimport { ViewTransactionOnExplorerButton } from '../common/Notification';\nimport * as idl from '../../utils/idl';\n\nexport default function Multisig({ multisig }: { multisig?: PublicKey }) {\n  const history = useHistory();\n  const [multisigAddress, setMultisigAddress] = useState('');\n  const disabled = !isValidPubkey(multisigAddress);\n  const searchFn = () => {\n    history.push(`/multisig/${multisigAddress}`);\n  };\n  return (\n    <div>\n      <div\n        style={{\n          paddingLeft: '16px',\n          paddingRight: '16px',\n          borderBottom: 'solid 1pt #ccc',\n          display: 'flex',\n        }}\n      >\n        <input\n          style={{\n            flex: 1,\n            background: 'none',\n            padding: '16px',\n            border: 'none',\n            outlineWidth: 0,\n          }}\n          placeholder=\"Multisig address\"\n          value={multisigAddress}\n          onChange={e => setMultisigAddress(e.target.value as string)}\n          onKeyPress={e => {\n            if (e.key === 'Enter') {\n              searchFn();\n            }\n          }}\n        />\n        <IconButton disabled={disabled} onClick={searchFn}>\n          <SearchIcon />\n        </IconButton>\n        <NewMultisigButton />\n      </div>\n      <div>{multisig && <MultisigInstance multisig={multisig} />}</div>\n    </div>\n  );\n}\n\nfunction isValidPubkey(addr: string): boolean {\n  try {\n    new PublicKey(addr);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\n\nexport function MultisigInstance({ multisig }: { multisig: PublicKey }) {\n  const { multisigClient } = useWallet();\n  const [multisigAccount, setMultisigAccount] = useState<any>(undefined);\n  const [transactions, setTransactions] = useState<any>(null);\n  const [showSignerDialog, setShowSignerDialog] = useState(false);\n  const [showAddTransactionDialog, setShowAddTransactionDialog] = useState(\n    false,\n  );\n  const [forceRefresh, setForceRefresh] = useState(false);\n  useEffect(() => {\n    multisigClient.account\n      .multisig(multisig)\n      .then((account: any) => {\n        setMultisigAccount(account);\n      })\n      .catch((err: any) => {\n        console.error(err);\n        setMultisigAccount(null);\n      });\n  }, [multisig, multisigClient.account]);\n  useEffect(() => {\n    multisigClient.account.transaction.all(multisig.toBuffer()).then(txs => {\n      setTransactions(txs);\n    });\n  }, [multisigClient.account.transaction, multisig, forceRefresh]);\n  useEffect(() => {\n    multisigClient.account.multisig\n      .subscribe(multisig)\n      .on('change', account => {\n        setMultisigAccount(account);\n      });\n  }, [multisigClient, multisig]);\n  return (\n    <Container fixed maxWidth=\"md\" style={{ marginBottom: '16px' }}>\n      <div>\n        <Card style={{ marginTop: '24px' }}>\n          {multisigAccount === undefined ? (\n            <div style={{ padding: '16px' }}>\n              <CircularProgress\n                style={{\n                  display: 'block',\n                  marginLeft: 'auto',\n                  marginRight: 'auto',\n                }}\n              />\n            </div>\n          ) : multisigAccount === null ? (\n            <CardContent>\n              <Typography\n                color=\"textSecondary\"\n                style={{\n                  padding: '24px',\n                  textAlign: 'center',\n                }}\n              >\n                Multisig not found\n              </Typography>\n            </CardContent>\n          ) : (\n            <></>\n          )}\n        </Card>\n        {multisigAccount && (\n          <Paper>\n            <AppBar\n              style={{ marginTop: '24px' }}\n              position=\"static\"\n              color=\"default\"\n              elevation={1}\n            >\n              <Toolbar>\n                <Typography variant=\"h6\" style={{ flexGrow: 1 }} component=\"h2\">\n                  {multisig.toString()} | {multisigAccount.threshold.toString()}{' '}\n                  of {multisigAccount.owners.length.toString()} Multisig\n                </Typography>\n                <Tooltip title=\"Signer\" arrow>\n                  <IconButton onClick={() => setShowSignerDialog(true)}>\n                    <InfoIcon />\n                  </IconButton>\n                </Tooltip>\n                <Tooltip title=\"Add\" arrow>\n                  <IconButton onClick={() => setShowAddTransactionDialog(true)}>\n                    <AddIcon />\n                  </IconButton>\n                </Tooltip>\n              </Toolbar>\n            </AppBar>\n            <List disablePadding>\n              {transactions === null ? (\n                <div style={{ padding: '16px' }}>\n                  <CircularProgress\n                    style={{\n                      display: 'block',\n                      marginLeft: 'auto',\n                      marginRight: 'auto',\n                    }}\n                  />\n                </div>\n              ) : transactions.length === 0 ? (\n                <ListItem>\n                  <ListItemText primary=\"No transactions found\" />\n                </ListItem>\n              ) : (\n                transactions.map((tx: any) => (\n                  <TxListItem\n                    key={tx.publicKey.toString()}\n                    multisig={multisig}\n                    multisigAccount={multisigAccount}\n                    tx={tx}\n                  />\n                ))\n              )}\n            </List>\n          </Paper>\n        )}\n      </div>\n      <AddTransactionDialog\n        multisig={multisig}\n        open={showAddTransactionDialog}\n        onClose={() => setShowAddTransactionDialog(false)}\n        didAddTransaction={() => setForceRefresh(!forceRefresh)}\n      />\n      {multisigAccount && (\n        <SignerDialog\n          multisig={multisig}\n          multisigAccount={multisigAccount}\n          open={showSignerDialog}\n          onClose={() => setShowSignerDialog(false)}\n        />\n      )}\n    </Container>\n  );\n}\n\nfunction NewMultisigButton() {\n  const [open, setOpen] = useState(false);\n  return (\n    <div>\n      <IconButton onClick={() => setOpen(true)}>\n        <AddIcon />\n      </IconButton>\n      <NewMultisigDialog open={open} onClose={() => setOpen(false)} />\n    </div>\n  );\n}\n\nfunction NewMultisigDialog({\n  open,\n  onClose,\n}: {\n  open: boolean;\n  onClose: () => void;\n}) {\n  const history = useHistory();\n  const { multisigClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n  const [threshold, setThreshold] = useState(2);\n  // @ts-ignore\n  const zeroAddr = new PublicKey().toString();\n  const [participants, setParticipants] = useState([\n    multisigClient.provider.wallet.publicKey.toString(),\n    zeroAddr,\n  ]);\n  const _onClose = () => {\n    onClose();\n    setThreshold(2);\n    setParticipants([zeroAddr, zeroAddr]);\n  };\n  const createMultisig = async () => {\n    enqueueSnackbar('Creating multisig', {\n      variant: 'info',\n    });\n    const multisig = new Account();\n    // Disc. + threshold + nonce.\n    const baseSize = 8 + 8 + 1;\n    // Can only grow the participant set by 2x the initialized value.\n    const ownerSize = participants.length * 2 * 32 + 8;\n    const multisigSize = baseSize + ownerSize;\n    const [, nonce] = await PublicKey.findProgramAddress(\n      [multisig.publicKey.toBuffer()],\n      multisigClient.programId,\n    );\n    const owners = participants.map(p => new PublicKey(p));\n    const tx = await multisigClient.rpc.createMultisig(\n      owners,\n      new BN(threshold),\n      nonce,\n      {\n        accounts: {\n          multisig: multisig.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [multisig],\n        instructions: [\n          await multisigClient.account.multisig.createInstruction(\n            multisig,\n            // @ts-ignore\n            multisigSize,\n          ),\n        ],\n      },\n    );\n    enqueueSnackbar(`Multisig created: ${multisig.publicKey.toString()}`, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    _onClose();\n    history.push(`/multisig/${multisig.publicKey.toString()}`);\n  };\n  return (\n    <Dialog fullWidth open={open} onClose={_onClose} maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          New Multisig\n        </Typography>\n      </DialogTitle>\n      <DialogContent>\n        <TextField\n          fullWidth\n          label=\"Threshold\"\n          value={threshold}\n          type=\"number\"\n          onChange={e => setThreshold(parseInt(e.target.value) as number)}\n        />\n        {participants.map((p, idx) => (\n          <TextField\n            key={p}\n            fullWidth\n            label=\"Participant\"\n            value={p}\n            onChange={e => {\n              const p = [...participants];\n              p[idx] = e.target.value;\n              setParticipants(p);\n            }}\n          />\n        ))}\n        <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n          <IconButton\n            onClick={() => {\n              const p = [...participants];\n              // @ts-ignore\n              p.push(new PublicKey().toString());\n              setParticipants(p);\n            }}\n          >\n            <AddIcon />\n          </IconButton>\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={_onClose}>Cancel</Button>\n        <Button\n          variant=\"contained\"\n          type=\"submit\"\n          color=\"primary\"\n          onClick={() =>\n            createMultisig().catch(err => {\n              const str = err ? err.toString() : '';\n              enqueueSnackbar(`Error creating multisig: ${str}`, {\n                variant: 'error',\n              });\n            })\n          }\n        >\n          Create\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nfunction TxListItem({\n  multisig,\n  multisigAccount,\n  tx,\n}: {\n  multisig: PublicKey;\n  multisigAccount: any;\n  tx: any;\n}) {\n  const { enqueueSnackbar } = useSnackbar();\n  const { multisigClient } = useWallet();\n  const [open, setOpen] = useState(false);\n  const [txAccount, setTxAccount] = useState(tx.account);\n  useEffect(() => {\n    multisigClient.account.transaction\n      .subscribe(tx.publicKey)\n      .on('change', account => {\n        setTxAccount(account);\n      });\n  }, [multisigClient, multisig, tx.publicKey]);\n  const rows = [\n    {\n      field: 'Program ID',\n      value: txAccount.programId.toString(),\n    },\n    {\n      field: 'Did execute',\n      value: txAccount.didExecute.toString(),\n    },\n    {\n      field: 'Instruction data',\n      value: (\n        <code\n          style={{\n            wordBreak: 'break-word',\n            width: '370px',\n            background: 'black',\n            color: '#ffffff',\n            float: 'right',\n            textAlign: 'left',\n          }}\n        >\n          {encodeBase64(txAccount.data)}\n        </code>\n      ),\n    },\n    {\n      field: 'Multisig',\n      value: txAccount.multisig.toString(),\n    },\n    {\n      field: 'Transaction account',\n      value: tx.publicKey.toString(),\n    },\n    {\n      field: 'Owner set seqno',\n      value: txAccount.ownerSetSeqno.toString(),\n    },\n  ];\n  const msAccountRows = multisigAccount.owners.map(\n    (owner: PublicKey, idx: number) => {\n      return {\n        field: owner.toString(),\n        value: txAccount.signers[idx] ? <CheckIcon /> : <RemoveIcon />,\n      };\n    },\n  );\n  const approve = async () => {\n    enqueueSnackbar('Approving transaction', {\n      variant: 'info',\n    });\n    await multisigClient.rpc.approve({\n      accounts: {\n        multisig,\n        transaction: tx.publicKey,\n        owner: multisigClient.provider.wallet.publicKey,\n      },\n    });\n    enqueueSnackbar('Transaction approved', {\n      variant: 'success',\n    });\n  };\n  const execute = async () => {\n    enqueueSnackbar('Executing transaction', {\n      variant: 'info',\n    });\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId,\n    );\n    await multisigClient.rpc.executeTransaction({\n      accounts: {\n        multisig,\n        multisigSigner,\n        transaction: tx.publicKey,\n      },\n      remainingAccounts: txAccount.accounts\n        .map((t: any) => {\n          if (t.pubkey.equals(multisigSigner)) {\n            return { ...t, isSigner: false };\n          }\n          return t;\n        })\n        .concat({\n          pubkey: txAccount.programId,\n          isWritable: false,\n          isSigner: false,\n        }),\n    });\n    enqueueSnackbar('Transaction executed', {\n      variant: 'success',\n    });\n  };\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(!open)}>\n        <ListItemIcon>{icon(tx, multisigClient)}</ListItemIcon>\n        {ixLabel(tx, multisigClient)}\n        {txAccount.didExecute && (\n          <CheckCircleIcon style={{ marginRight: '16px' }} />\n        )}\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <div style={{ background: '#ececec', padding: '10px' }}>\n          <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n            <Button\n              style={{ marginRight: '10px' }}\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() =>\n                approve().catch(err => {\n                  let errStr = '';\n                  if (err) {\n                    errStr = err.toString();\n                  }\n                  enqueueSnackbar(`Unable to approve transaction: ${errStr}`, {\n                    variant: 'error',\n                  });\n                })\n              }\n            >\n              Approve\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={() =>\n                execute().catch(err => {\n                  let errStr = '';\n                  if (err) {\n                    errStr = err.toString();\n                  }\n                  enqueueSnackbar(`Unable to execute transaction: ${errStr}`, {\n                    variant: 'error',\n                  });\n                })\n              }\n            >\n              Execute\n            </Button>\n          </div>\n          <Card style={{ marginTop: '16px' }}>\n            <CardContent>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Transaction Field</TableCell>\n                    <TableCell align=\"right\">Value</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {rows.map(r => (\n                    <TableRow>\n                      <TableCell>{r.field}</TableCell>\n                      <TableCell align=\"right\">{r.value}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n          <Card style={{ marginTop: '16px' }}>\n            <CardContent>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Multisig Owner</TableCell>\n                    <TableCell align=\"right\">Did Sign</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {txAccount.ownerSetSeqno === multisigAccount.ownerSetSeqno &&\n                    msAccountRows.map((r: any) => (\n                      <TableRow>\n                        <TableCell>{r.field}</TableCell>\n                        <TableCell align=\"right\">{r.value}</TableCell>\n                      </TableRow>\n                    ))}\n                </TableBody>\n              </Table>\n              {txAccount.ownerSetSeqno !== multisigAccount.ownerSetSeqno && (\n                <div style={{ marginTop: '16px' }}>\n                  <Typography\n                    color=\"textSecondary\"\n                    style={{ textAlign: 'center' }}\n                  >\n                    The owner set has changed since this transaction was created\n                  </Typography>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n          <Card style={{ marginTop: '16px' }}>\n            <CardContent>\n              <AccountsList accounts={txAccount.accounts} />\n            </CardContent>\n          </Card>\n        </div>\n      </Collapse>\n    </>\n  );\n}\n\nfunction ixLabel(tx: any, multisigClient: any) {\n  if (tx.account.programId.equals(BPF_LOADER_UPGRADEABLE_PID)) {\n    // Upgrade instruction.\n    if (tx.account.data.equals(Buffer.from([3, 0, 0, 0]))) {\n      return (\n        <ListItemText\n          primary=\"Program upgrade\"\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n  }\n  if (tx.account.programId.equals(multisigClient.programId)) {\n    const setThresholdSighash = multisigClient.coder.sighash(\n      'global',\n      'change_threshold',\n    );\n    if (setThresholdSighash.equals(tx.account.data.slice(0, 8))) {\n      return (\n        <ListItemText\n          primary=\"Set threshold\"\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n    const setOwnersSighash = multisigClient.coder.sighash(\n      'global',\n      'set_owners',\n    );\n    if (setOwnersSighash.equals(tx.account.data.slice(0, 8))) {\n      return (\n        <ListItemText\n          primary=\"Set owners\"\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n  }\n  if (idl.IDL_TAG.equals(tx.account.data.slice(0, 8))) {\n    return (\n      <ListItemText primary=\"Upgrade IDL\" secondary={tx.publicKey.toString()} />\n    );\n  }\n  return <ListItemText primary={tx.publicKey.toString()} />;\n}\n\nfunction AccountsList({ accounts }: { accounts: any }) {\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>Account</TableCell>\n          <TableCell align=\"right\">Writable</TableCell>\n          <TableCell align=\"right\">Signer</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {accounts.map((r: any) => (\n          <TableRow>\n            <TableCell>{r.pubkey.toString()}</TableCell>\n            <TableCell align=\"right\">{r.isWritable.toString()}</TableCell>\n            <TableCell align=\"right\">{r.isSigner.toString()}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n}\n\nfunction SignerDialog({\n  multisig,\n  multisigAccount,\n  open,\n  onClose,\n}: {\n  multisig: PublicKey;\n  multisigAccount: any;\n  open: boolean;\n  onClose: () => void;\n}) {\n  const { multisigClient } = useWallet();\n  const [signer, setSigner] = useState<null | string>(null);\n  useEffect(() => {\n    PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId,\n    ).then(addrNonce => setSigner(addrNonce[0].toString()));\n  }, [multisig, multisigClient.programId, setSigner]);\n  return (\n    <Dialog open={open} fullWidth onClose={onClose} maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          Multisig Info\n        </Typography>\n      </DialogTitle>\n      <DialogContent style={{ paddingBottom: '16px' }}>\n        <DialogContentText>\n          <b>Program derived address</b>: {signer}. This is the address one\n          should use as the authority for data governed by the multisig.\n        </DialogContentText>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Owners</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {multisigAccount.owners.map((r: any) => (\n              <TableRow>\n                <TableCell>{r.toString()}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Close</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nfunction AddTransactionDialog({\n  multisig,\n  open,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  open: boolean;\n  onClose: () => void;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  return (\n    <Dialog open={open} fullWidth onClose={onClose} maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          New Transaction\n        </Typography>\n      </DialogTitle>\n      <DialogContent style={{ paddingBottom: '16px' }}>\n        <DialogContentText>\n          Create a new transaction to be signed by the multisig. This\n          transaction will not execute until enough owners have signed the\n          transaction.\n        </DialogContentText>\n        <List disablePadding>\n          <ProgramUpdateListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <IdlUpgradeListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <MultisigSetOwnersListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <ChangeThresholdListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n        </List>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nfunction ChangeThresholdListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(open => !open)}>\n        <ListItemIcon>\n          <GavelIcon />\n        </ListItemIcon>\n        <ListItemText primary={'Change threshold'} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <ChangeThresholdListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nfunction ChangeThresholdListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [threshold, setThreshold] = useState(2);\n  const { multisigClient } = useWallet();\n  // @ts-ignore\n  const { enqueueSnackbar } = useSnackbar();\n  const changeThreshold = async () => {\n    enqueueSnackbar('Creating change threshold transaction', {\n      variant: 'info',\n    });\n    const data = changeThresholdData(multisigClient, threshold);\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId,\n    );\n    const accounts = [\n      {\n        pubkey: multisig,\n        isWritable: true,\n        isSigner: false,\n      },\n      {\n        pubkey: multisigSigner,\n        isWritable: false,\n        isSigner: true,\n      },\n    ];\n    const transaction = new Account();\n    const txSize = 1000; // todo\n    const tx = await multisigClient.rpc.createTransaction(\n      multisigClient.programId,\n      accounts,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize,\n          ),\n        ],\n      },\n    );\n    enqueueSnackbar('Transaction created', {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n  return (\n    <div\n      style={{\n        background: '#f1f0f0',\n        paddingLeft: '24px',\n        paddingRight: '24px',\n      }}\n    >\n      <TextField\n        fullWidth\n        style={{ marginTop: '16px' }}\n        label=\"Threshold\"\n        value={threshold}\n        type=\"number\"\n        onChange={e => {\n          // @ts-ignore\n          setThreshold(e.target.value);\n        }}\n      />\n      <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n        <Button onClick={() => changeThreshold()}>Change Threshold</Button>\n      </div>\n    </div>\n  );\n}\n\nfunction MultisigSetOwnersListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(open => !open)}>\n        <ListItemIcon>\n          <SupervisorAccountIcon />\n        </ListItemIcon>\n        <ListItemText primary={'Set owners'} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <SetOwnersListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nfunction SetOwnersListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const { multisigClient } = useWallet();\n  // @ts-ignore\n  const zeroAddr = new PublicKey().toString();\n  const [participants, setParticipants] = useState([\n    multisigClient.provider.wallet.publicKey.toString(),\n    zeroAddr,\n  ]);\n  const { enqueueSnackbar } = useSnackbar();\n  const setOwners = async () => {\n    enqueueSnackbar('Creating setOwners transaction', {\n      variant: 'info',\n    });\n    const owners = participants.map(p => new PublicKey(p));\n    const data = setOwnersData(multisigClient, owners);\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId,\n    );\n    const accounts = [\n      {\n        pubkey: multisig,\n        isWritable: true,\n        isSigner: false,\n      },\n      {\n        pubkey: multisigSigner,\n        isWritable: false,\n        isSigner: true,\n      },\n    ];\n    const transaction = new Account();\n    const txSize = 5000; // TODO: tighter bound.\n    const tx = await multisigClient.rpc.createTransaction(\n      multisigClient.programId,\n      accounts,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize,\n          ),\n        ],\n      },\n    );\n    enqueueSnackbar('Transaction created', {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n  return (\n    <div\n      style={{\n        background: '#f1f0f0',\n        paddingLeft: '24px',\n        paddingRight: '24px',\n      }}\n    >\n      {participants.map((p, idx) => (\n        <TextField\n          fullWidth\n          style={{ marginTop: '16px' }}\n          label=\"Participant\"\n          value={p}\n          onChange={e => {\n            const p = [...participants];\n            p[idx] = e.target.value;\n            setParticipants(p);\n          }}\n        />\n      ))}\n      <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n        <IconButton\n          onClick={() => {\n            const p = [...participants];\n            // @ts-ignore\n            p.push(new PublicKey().toString());\n            setParticipants(p);\n          }}\n        >\n          <AddIcon />\n        </IconButton>\n      </div>\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'flex-end',\n          marginTop: '16px',\n          paddingBottom: '16px',\n        }}\n      >\n        <Button onClick={() => setOwners()}>Set Owners</Button>\n      </div>\n    </div>\n  );\n}\n\nfunction IdlUpgradeListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(open => !open)}>\n        <ListItemIcon>\n          <DescriptionIcon />\n        </ListItemIcon>\n        <ListItemText primary={'Upgrade IDL'} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <UpgradeIdlListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nfunction UpgradeIdlListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [programId, setProgramId] = useState<null | string>(null);\n  const [buffer, setBuffer] = useState<null | string>(null);\n\n  const { multisigClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n  const createTransactionAccount = async () => {\n    enqueueSnackbar('Creating transaction', {\n      variant: 'info',\n    });\n    const programAddr = new PublicKey(programId as string);\n    const bufferAddr = new PublicKey(buffer as string);\n    const idlAddr = await anchor.utils.idlAddress(programAddr);\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId,\n    );\n    const data = idl.encodeInstruction({ setBuffer: {} });\n    const accs = [\n      {\n        pubkey: bufferAddr,\n        isWritable: true,\n        isSigner: false,\n      },\n      { pubkey: idlAddr, isWritable: true, isSigner: false },\n      { pubkey: multisigSigner, isWritable: true, isSigner: false },\n    ];\n    const txSize = 1000; // TODO: tighter bound.\n    const transaction = new Account();\n    const tx = await multisigClient.rpc.createTransaction(\n      programAddr,\n      accs,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize,\n          ),\n        ],\n      },\n    );\n    enqueueSnackbar('Transaction created', {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n\n  return (\n    <div\n      style={{\n        background: '#f1f0f0',\n        paddingLeft: '24px',\n        paddingRight: '24px',\n      }}\n    >\n      <TextField\n        fullWidth\n        style={{ marginTop: '16px' }}\n        label=\"Program ID\"\n        value={programId}\n        onChange={e => setProgramId(e.target.value as string)}\n      />\n      <TextField\n        style={{ marginTop: '16px' }}\n        fullWidth\n        label=\"New IDL buffer\"\n        value={buffer}\n        onChange={e => setBuffer(e.target.value as string)}\n      />\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'flex-end',\n          marginTop: '16px',\n          paddingBottom: '16px',\n        }}\n      >\n        <Button onClick={() => createTransactionAccount()}>\n          Create upgrade\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nfunction ProgramUpdateListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(open => !open)}>\n        <ListItemIcon>\n          <BuildIcon />\n        </ListItemIcon>\n        <ListItemText primary={'Upgrade program'} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <UpgradeProgramListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nconst BPF_LOADER_UPGRADEABLE_PID = new PublicKey(\n  'BPFLoaderUpgradeab1e11111111111111111111111',\n);\n\nfunction UpgradeProgramListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [programId, setProgramId] = useState<null | string>(null);\n  const [buffer, setBuffer] = useState<null | string>(null);\n\n  const { multisigClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n  const createTransactionAccount = async () => {\n    enqueueSnackbar('Creating transaction', {\n      variant: 'info',\n    });\n    const programAddr = new PublicKey(programId as string);\n    const bufferAddr = new PublicKey(buffer as string);\n    // Hard code serialization.\n    const data = Buffer.from([3, 0, 0, 0]);\n\n    const programAccount = await (async () => {\n      const programAccount = await multisigClient.provider.connection.getAccountInfo(\n        programAddr,\n      );\n      if (programAccount === null) {\n        throw new Error('Invalid program ID');\n      }\n      return {\n        // Hard code deserialization.\n        programdataAddress: new PublicKey(programAccount.data.slice(4)),\n      };\n    })();\n    const spill = multisigClient.provider.wallet.publicKey;\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId,\n    );\n    const accs = [\n      {\n        pubkey: programAccount.programdataAddress,\n        isWritable: true,\n        isSigner: false,\n      },\n      { pubkey: programAddr, isWritable: true, isSigner: false },\n      { pubkey: bufferAddr, isWritable: true, isSigner: false },\n      { pubkey: spill, isWritable: true, isSigner: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isWritable: false, isSigner: false },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false, isSigner: false },\n      { pubkey: multisigSigner, isWritable: false, isSigner: false },\n    ];\n    const txSize = 1000; // TODO: tighter bound.\n    const transaction = new Account();\n    const tx = await multisigClient.rpc.createTransaction(\n      BPF_LOADER_UPGRADEABLE_PID,\n      accs,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize,\n          ),\n        ],\n      },\n    );\n    enqueueSnackbar('Transaction created', {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n\n  return (\n    <div\n      style={{\n        background: '#f1f0f0',\n        paddingLeft: '24px',\n        paddingRight: '24px',\n      }}\n    >\n      <TextField\n        fullWidth\n        style={{ marginTop: '16px' }}\n        label=\"Program ID\"\n        value={programId}\n        onChange={e => setProgramId(e.target.value as string)}\n      />\n      <TextField\n        style={{ marginTop: '16px' }}\n        fullWidth\n        label=\"New program buffer\"\n        value={buffer}\n        onChange={e => setBuffer(e.target.value as string)}\n      />\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'flex-end',\n          marginTop: '16px',\n          paddingBottom: '16px',\n        }}\n      >\n        <Button onClick={() => createTransactionAccount()}>\n          Create upgrade\n        </Button>\n      </div>\n    </div>\n  );\n}\n\n// @ts-ignore\nfunction icon(tx, multisigClient) {\n  if (tx.account.programId.equals(BPF_LOADER_UPGRADEABLE_PID)) {\n    return <BuildIcon />;\n  }\n  if (tx.account.programId.equals(multisigClient.programId)) {\n    const setThresholdSighash = multisigClient.coder.sighash(\n      'global',\n      'change_threshold',\n    );\n    if (setThresholdSighash.equals(tx.account.data.slice(0, 8))) {\n      return <GavelIcon />;\n    }\n    const setOwnersSighash = multisigClient.coder.sighash(\n      'global',\n      'set_owners',\n    );\n    if (setOwnersSighash.equals(tx.account.data.slice(0, 8))) {\n      return <SupervisorAccountIcon />;\n    }\n  }\n  if (idl.IDL_TAG.equals(tx.account.data.slice(0, 8))) {\n    return <DescriptionIcon />;\n  }\n  return <ReceiptIcon />;\n}\n\n// @ts-ignore\nfunction changeThresholdData(multisigClient, threshold) {\n  return multisigClient.coder.instruction.encode('change_threshold', {\n    threshold: new BN(threshold),\n  });\n}\n\n// @ts-ignore\nfunction setOwnersData(multisigClient, owners) {\n  return multisigClient.coder.instruction.encode('set_owners', {\n    owners,\n  });\n}\n","import React, {\n  ReactNode,\n  PropsWithChildren,\n  useContext,\n  useState,\n  useEffect,\n} from 'react';\nimport BN from 'bn.js';\nimport { PublicKey } from '@solana/web3.js';\nimport { TokenListProvider, TokenInfo } from '@solana/spl-token-registry';\nimport { networks } from '../store/config';\n\nconst TokenListContext = React.createContext<TokenListContextValues>({\n  tokenMap: new Map(),\n});\n\ntype TokenListContextValues = {\n  tokenMap: Map<string, TokenInfo>;\n};\n\nexport function useTokenInfos(): Map<string, TokenInfo> {\n  const { tokenMap } = useContext<TokenListContextValues>(TokenListContext);\n  return tokenMap;\n}\n\nexport function TokenRegistryProvider(props: PropsWithChildren<ReactNode>) {\n  const [tokenMap, setTokenMap] = useState<Map<string, TokenInfo>>(new Map());\n  useEffect(() => {\n    new TokenListProvider().resolve().then(tokens => {\n      const tokenList = tokens.filterByClusterSlug('mainnet-beta').getList();\n      setTokenMap(\n        tokenList.reduce((map, item) => {\n          map.set(item.address, item);\n          return map;\n        }, new Map()),\n      );\n    });\n  }, [setTokenMap]);\n\n  return (\n    <TokenListContext.Provider value={{ tokenMap }}>\n      {props.children}\n    </TokenListContext.Provider>\n  );\n}\n\nexport function fromDisplay(amount: number, decimals: number): BN {\n  return new BN(amount * 10 ** decimals);\n}\n\nexport function toDisplay(amount: BN | number, decimals: number): string {\n  if (amount instanceof BN) {\n    amount = amount.toNumber();\n  }\n  return (amount / 10 ** decimals).toString();\n}\n\nexport function toDisplayLabel(mint: PublicKey): string {\n  let whitelistedMint = Object.keys(networks.mainnet.mints)\n    .filter(label => networks.mainnet.mints[label].equals(mint))\n    .pop();\n  if (whitelistedMint) {\n    return whitelistedMint.toUpperCase();\n  }\n  return mint.toString();\n}\n","import { Idl } from '@project-serum/anchor';\n\nconst idl: Idl = {\n  version: '0.0.0',\n  name: 'lockup',\n  instructions: [\n    {\n      name: 'createVesting',\n      accounts: [\n        {\n          name: 'vesting',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositor',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositorAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'beneficiary',\n          type: 'publicKey',\n        },\n        {\n          name: 'depositAmount',\n          type: 'u64',\n        },\n        {\n          name: 'nonce',\n          type: 'u8',\n        },\n        {\n          name: 'startTs',\n          type: 'i64',\n        },\n        {\n          name: 'endTs',\n          type: 'i64',\n        },\n        {\n          name: 'periodCount',\n          type: 'u64',\n        },\n        {\n          name: 'realizor',\n          type: {\n            option: {\n              defined: 'Realizor',\n            },\n          },\n        },\n      ],\n    },\n    {\n      name: 'withdraw',\n      accounts: [\n        {\n          name: 'vesting',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'vault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vestingSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'token',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'whitelistWithdraw',\n      accounts: [\n        {\n          name: 'transfer',\n          accounts: [\n            {\n              name: 'lockup',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'beneficiary',\n              isMut: false,\n              isSigner: true,\n            },\n            {\n              name: 'whitelistedProgram',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'vesting',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vestingSigner',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'tokenProgram',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'whitelistedProgramVault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'whitelistedProgramVaultAuthority',\n              isMut: false,\n              isSigner: false,\n            },\n          ],\n        },\n      ],\n      args: [\n        {\n          name: 'instructionData',\n          type: 'bytes',\n        },\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'whitelistDeposit',\n      accounts: [\n        {\n          name: 'transfer',\n          accounts: [\n            {\n              name: 'lockup',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'beneficiary',\n              isMut: false,\n              isSigner: true,\n            },\n            {\n              name: 'whitelistedProgram',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'vesting',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vestingSigner',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'tokenProgram',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'whitelistedProgramVault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'whitelistedProgramVaultAuthority',\n              isMut: false,\n              isSigner: false,\n            },\n          ],\n        },\n      ],\n      args: [\n        {\n          name: 'instructionData',\n          type: 'bytes',\n        },\n      ],\n    },\n    {\n      name: 'availableForWithdrawal',\n      accounts: [\n        {\n          name: 'vesting',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  state: {\n    struct: {\n      name: 'Lockup',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'authority',\n            type: 'publicKey',\n          },\n          {\n            name: 'whitelist',\n            type: {\n              vec: {\n                defined: 'WhitelistEntry',\n              },\n            },\n          },\n        ],\n      },\n    },\n    methods: [\n      {\n        name: 'new',\n        accounts: [\n          {\n            name: 'authority',\n            isMut: false,\n            isSigner: true,\n          },\n        ],\n        args: [],\n      },\n      {\n        name: 'whitelistAdd',\n        accounts: [\n          {\n            name: 'authority',\n            isMut: false,\n            isSigner: true,\n          },\n        ],\n        args: [\n          {\n            name: 'entry',\n            type: {\n              defined: 'WhitelistEntry',\n            },\n          },\n        ],\n      },\n      {\n        name: 'whitelistDelete',\n        accounts: [\n          {\n            name: 'authority',\n            isMut: false,\n            isSigner: true,\n          },\n        ],\n        args: [\n          {\n            name: 'entry',\n            type: {\n              defined: 'WhitelistEntry',\n            },\n          },\n        ],\n      },\n      {\n        name: 'setAuthority',\n        accounts: [\n          {\n            name: 'authority',\n            isMut: false,\n            isSigner: true,\n          },\n        ],\n        args: [\n          {\n            name: 'newAuthority',\n            type: 'publicKey',\n          },\n        ],\n      },\n    ],\n  },\n  accounts: [\n    {\n      name: 'Vesting',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'beneficiary',\n            type: 'publicKey',\n          },\n          {\n            name: 'mint',\n            type: 'publicKey',\n          },\n          {\n            name: 'vault',\n            type: 'publicKey',\n          },\n          {\n            name: 'grantor',\n            type: 'publicKey',\n          },\n          {\n            name: 'outstanding',\n            type: 'u64',\n          },\n          {\n            name: 'startBalance',\n            type: 'u64',\n          },\n          {\n            name: 'createdTs',\n            type: 'i64',\n          },\n          {\n            name: 'startTs',\n            type: 'i64',\n          },\n          {\n            name: 'endTs',\n            type: 'i64',\n          },\n          {\n            name: 'periodCount',\n            type: 'u64',\n          },\n          {\n            name: 'whitelistOwned',\n            type: 'u64',\n          },\n          {\n            name: 'nonce',\n            type: 'u8',\n          },\n          {\n            name: 'realizor',\n            type: {\n              option: {\n                defined: 'Realizor',\n              },\n            },\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: 'Realizor',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'program',\n            type: 'publicKey',\n          },\n          {\n            name: 'metadata',\n            type: 'publicKey',\n          },\n        ],\n      },\n    },\n    {\n      name: 'WhitelistEntry',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'programId',\n            type: 'publicKey',\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 100,\n      name: 'InvalidTimestamp',\n      msg: 'Vesting end must be greater than the current unix timestamp.',\n    },\n    {\n      code: 101,\n      name: 'InvalidPeriod',\n      msg: 'The number of vesting periods must be greater than zero.',\n    },\n    {\n      code: 102,\n      name: 'InvalidDepositAmount',\n      msg: 'The vesting deposit amount must be greater than zero.',\n    },\n    {\n      code: 103,\n      name: 'InvalidWhitelistEntry',\n      msg: 'The Whitelist entry is not a valid program address.',\n    },\n    {\n      code: 104,\n      name: 'InvalidProgramAddress',\n      msg: 'Invalid program address. Did you provide the correct nonce?',\n    },\n    {\n      code: 105,\n      name: 'InvalidVaultOwner',\n      msg: 'Invalid vault owner.',\n    },\n    {\n      code: 106,\n      name: 'InvalidVaultAmount',\n      msg: 'Vault amount must be zero.',\n    },\n    {\n      code: 107,\n      name: 'InsufficientWithdrawalBalance',\n      msg: 'Insufficient withdrawal balance.',\n    },\n    {\n      code: 108,\n      name: 'WhitelistFull',\n      msg: 'Whitelist is full',\n    },\n    {\n      code: 109,\n      name: 'WhitelistEntryAlreadyExists',\n      msg: 'Whitelist entry already exists',\n    },\n    {\n      code: 110,\n      name: 'InsufficientWhitelistDepositAmount',\n      msg: 'Balance must go up when performing a whitelist deposit',\n    },\n    {\n      code: 111,\n      name: 'WhitelistDepositOverflow',\n      msg: 'Cannot deposit more than withdrawn',\n    },\n    {\n      code: 112,\n      name: 'WhitelistWithdrawLimit',\n      msg: 'Tried to withdraw over the specified limit',\n    },\n    {\n      code: 113,\n      name: 'WhitelistEntryNotFound',\n      msg: 'Whitelist entry not found.',\n    },\n    {\n      code: 114,\n      name: 'Unauthorized',\n      msg: 'You do not have sufficient permissions to perform this action.',\n    },\n    {\n      code: 115,\n      name: 'UnableToWithdrawWhileStaked',\n      msg: 'You are unable to realize projected rewards until unstaking.',\n    },\n    {\n      code: 116,\n      name: 'InvalidLockRealizor',\n      msg: \"The given lock realizor doesn't match the vesting account.\",\n    },\n    {\n      code: 117,\n      name: 'UnrealizedVesting',\n      msg: 'You have not realized this vesting account.',\n    },\n    {\n      code: 118,\n      name: 'InvalidSchedule',\n      msg: 'Invalid vesting schedule given.',\n    },\n  ],\n};\n\nexport default idl;\n","import { Idl } from '@project-serum/anchor';\n\nconst idl: Idl = {\n  version: '0.0.0',\n  name: 'registry',\n  instructions: [\n    {\n      name: 'initialize',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'rewardEventQ',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'mint',\n          type: 'publicKey',\n        },\n        {\n          name: 'authority',\n          type: 'publicKey',\n        },\n        {\n          name: 'nonce',\n          type: 'u8',\n        },\n        {\n          name: 'withdrawalTimelock',\n          type: 'i64',\n        },\n        {\n          name: 'stakeRate',\n          type: 'u64',\n        },\n        {\n          name: 'rewardQLen',\n          type: 'u32',\n        },\n      ],\n    },\n    {\n      name: 'updateRegistrar',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'newAuthority',\n          type: {\n            option: 'publicKey',\n          },\n        },\n        {\n          name: 'withdrawalTimelock',\n          type: {\n            option: 'i64',\n          },\n        },\n      ],\n    },\n    {\n      name: 'createMember',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'balances',\n          accounts: [\n            {\n              name: 'spt',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultStake',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultPw',\n              isMut: true,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'balancesLocked',\n          accounts: [\n            {\n              name: 'spt',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultStake',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultPw',\n              isMut: true,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'nonce',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'updateMember',\n      accounts: [\n        {\n          name: 'member',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'metadata',\n          type: {\n            option: 'publicKey',\n          },\n        },\n      ],\n    },\n    {\n      name: 'deposit',\n      accounts: [\n        {\n          name: 'member',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'vault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositor',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositorAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'depositLocked',\n      accounts: [\n        {\n          name: 'vesting',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'vestingVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositorAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'memberVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'registry',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'stake',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rewardEventQ',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'balances',\n          accounts: [\n            {\n              name: 'spt',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultStake',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultPw',\n              isMut: true,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'balancesLocked',\n          accounts: [\n            {\n              name: 'spt',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultStake',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultPw',\n              isMut: true,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'registrarSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'sptAmount',\n          type: 'u64',\n        },\n        {\n          name: 'locked',\n          type: 'bool',\n        },\n      ],\n    },\n    {\n      name: 'startUnstake',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rewardEventQ',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'pendingWithdrawal',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'balances',\n          accounts: [\n            {\n              name: 'spt',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultStake',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultPw',\n              isMut: true,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'balancesLocked',\n          accounts: [\n            {\n              name: 'spt',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultStake',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultPw',\n              isMut: true,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'sptAmount',\n          type: 'u64',\n        },\n        {\n          name: 'locked',\n          type: 'bool',\n        },\n      ],\n    },\n    {\n      name: 'endUnstake',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'pendingWithdrawal',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vaultPw',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'withdraw',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'vault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'depositor',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'withdrawLocked',\n      accounts: [\n        {\n          name: 'vesting',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'vestingVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vestingSigner',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'memberVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'registry',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'dropReward',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rewardEventQ',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'vendor',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vendorVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositor',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositorAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'kind',\n          type: {\n            defined: 'RewardVendorKind',\n          },\n        },\n        {\n          name: 'total',\n          type: 'u64',\n        },\n        {\n          name: 'expiryTs',\n          type: 'i64',\n        },\n        {\n          name: 'expiryReceiver',\n          type: 'publicKey',\n        },\n        {\n          name: 'nonce',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'claimReward',\n      accounts: [\n        {\n          name: 'cmn',\n          accounts: [\n            {\n              name: 'registrar',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'member',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'beneficiary',\n              isMut: false,\n              isSigner: true,\n            },\n            {\n              name: 'balances',\n              accounts: [\n                {\n                  name: 'spt',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vault',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultStake',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultPw',\n                  isMut: true,\n                  isSigner: false,\n                },\n              ],\n            },\n            {\n              name: 'balancesLocked',\n              accounts: [\n                {\n                  name: 'spt',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vault',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultStake',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultPw',\n                  isMut: true,\n                  isSigner: false,\n                },\n              ],\n            },\n            {\n              name: 'vendor',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vendorSigner',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'tokenProgram',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'clock',\n              isMut: false,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'to',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'claimRewardLocked',\n      accounts: [\n        {\n          name: 'cmn',\n          accounts: [\n            {\n              name: 'registrar',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'member',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'beneficiary',\n              isMut: false,\n              isSigner: true,\n            },\n            {\n              name: 'balances',\n              accounts: [\n                {\n                  name: 'spt',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vault',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultStake',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultPw',\n                  isMut: true,\n                  isSigner: false,\n                },\n              ],\n            },\n            {\n              name: 'balancesLocked',\n              accounts: [\n                {\n                  name: 'spt',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vault',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultStake',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultPw',\n                  isMut: true,\n                  isSigner: false,\n                },\n              ],\n            },\n            {\n              name: 'vendor',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vendorSigner',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'tokenProgram',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'clock',\n              isMut: false,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'registry',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'lockupProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'nonce',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'expireReward',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'vendor',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vendorSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'expiryReceiver',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'expiryReceiverToken',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  state: {\n    struct: {\n      name: 'Registry',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'lockupProgram',\n            type: 'publicKey',\n          },\n        ],\n      },\n    },\n    methods: [\n      {\n        name: 'new',\n        accounts: [\n          {\n            name: 'lockupProgram',\n            isMut: false,\n            isSigner: false,\n          },\n        ],\n        args: [],\n      },\n      {\n        name: 'setLockupProgram',\n        accounts: [\n          {\n            name: 'authority',\n            isMut: false,\n            isSigner: true,\n          },\n        ],\n        args: [\n          {\n            name: 'lockupProgram',\n            type: 'publicKey',\n          },\n        ],\n      },\n    ],\n  },\n  accounts: [\n    {\n      name: 'Registrar',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'authority',\n            type: 'publicKey',\n          },\n          {\n            name: 'nonce',\n            type: 'u8',\n          },\n          {\n            name: 'withdrawalTimelock',\n            type: 'i64',\n          },\n          {\n            name: 'rewardEventQ',\n            type: 'publicKey',\n          },\n          {\n            name: 'mint',\n            type: 'publicKey',\n          },\n          {\n            name: 'poolMint',\n            type: 'publicKey',\n          },\n          {\n            name: 'stakeRate',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n    {\n      name: 'Member',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'registrar',\n            type: 'publicKey',\n          },\n          {\n            name: 'beneficiary',\n            type: 'publicKey',\n          },\n          {\n            name: 'metadata',\n            type: 'publicKey',\n          },\n          {\n            name: 'balances',\n            type: {\n              defined: 'BalanceSandbox',\n            },\n          },\n          {\n            name: 'balancesLocked',\n            type: {\n              defined: 'BalanceSandbox',\n            },\n          },\n          {\n            name: 'rewardsCursor',\n            type: 'u32',\n          },\n          {\n            name: 'lastStakeTs',\n            type: 'i64',\n          },\n          {\n            name: 'nonce',\n            type: 'u8',\n          },\n        ],\n      },\n    },\n    {\n      name: 'PendingWithdrawal',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'registrar',\n            type: 'publicKey',\n          },\n          {\n            name: 'member',\n            type: 'publicKey',\n          },\n          {\n            name: 'burned',\n            type: 'bool',\n          },\n          {\n            name: 'pool',\n            type: 'publicKey',\n          },\n          {\n            name: 'startTs',\n            type: 'i64',\n          },\n          {\n            name: 'endTs',\n            type: 'i64',\n          },\n          {\n            name: 'amount',\n            type: 'u64',\n          },\n          {\n            name: 'locked',\n            type: 'bool',\n          },\n        ],\n      },\n    },\n    {\n      name: 'RewardQueue',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'head',\n            type: 'u32',\n          },\n          {\n            name: 'tail',\n            type: 'u32',\n          },\n          {\n            name: 'events',\n            type: {\n              vec: {\n                defined: 'RewardEvent',\n              },\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: 'RewardVendor',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'registrar',\n            type: 'publicKey',\n          },\n          {\n            name: 'vault',\n            type: 'publicKey',\n          },\n          {\n            name: 'mint',\n            type: 'publicKey',\n          },\n          {\n            name: 'nonce',\n            type: 'u8',\n          },\n          {\n            name: 'poolTokenSupply',\n            type: 'u64',\n          },\n          {\n            name: 'rewardEventQCursor',\n            type: 'u32',\n          },\n          {\n            name: 'startTs',\n            type: 'i64',\n          },\n          {\n            name: 'expiryTs',\n            type: 'i64',\n          },\n          {\n            name: 'expiryReceiver',\n            type: 'publicKey',\n          },\n          {\n            name: 'from',\n            type: 'publicKey',\n          },\n          {\n            name: 'total',\n            type: 'u64',\n          },\n          {\n            name: 'expired',\n            type: 'bool',\n          },\n          {\n            name: 'kind',\n            type: {\n              defined: 'RewardVendorKind',\n            },\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: 'BalanceSandbox',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'spt',\n            type: 'publicKey',\n          },\n          {\n            name: 'vault',\n            type: 'publicKey',\n          },\n          {\n            name: 'vaultStake',\n            type: 'publicKey',\n          },\n          {\n            name: 'vaultPw',\n            type: 'publicKey',\n          },\n        ],\n      },\n    },\n    {\n      name: 'RewardEvent',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'vendor',\n            type: 'publicKey',\n          },\n          {\n            name: 'ts',\n            type: 'i64',\n          },\n          {\n            name: 'locked',\n            type: 'bool',\n          },\n        ],\n      },\n    },\n    {\n      name: 'RewardVendorKind',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'Unlocked',\n          },\n          {\n            name: 'Locked',\n            fields: [\n              {\n                name: 'start_ts',\n                type: 'i64',\n              },\n              {\n                name: 'end_ts',\n                type: 'i64',\n              },\n              {\n                name: 'period_count',\n                type: 'u64',\n              },\n            ],\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 100,\n      name: 'RewardQAlreadyInitialized',\n      msg: 'The given reward queue has already been initialized.',\n    },\n    {\n      code: 101,\n      name: 'InvalidNonce',\n      msg: \"The nonce given doesn't derive a valid program address.\",\n    },\n    {\n      code: 102,\n      name: 'InvalidPoolMintAuthority',\n      msg: 'Invalid pool mint authority',\n    },\n    {\n      code: 103,\n      name: 'InvalidMemberSigner',\n      msg: \"Member signer doesn't match the derived address.\",\n    },\n    {\n      code: 104,\n      name: 'InvalidVaultDeposit',\n      msg: 'The given vault owner must match the signing depositor.',\n    },\n    {\n      code: 105,\n      name: 'InvalidDepositor',\n      msg: \"The signing depositor doesn't match either of the balance accounts\",\n    },\n    {\n      code: 106,\n      name: 'InvalidVault',\n      msg: 'The vault given does not match the vault expected.',\n    },\n    {\n      code: 107,\n      name: 'InvalidVaultOwner',\n      msg: 'Invalid vault owner.',\n    },\n    {\n      code: 108,\n      name: 'Unknown',\n      msg: 'An unknown error has occured.',\n    },\n    {\n      code: 109,\n      name: 'UnstakeTimelock',\n      msg: 'The unstake timelock has not yet expired.',\n    },\n    {\n      code: 110,\n      name: 'InsufficientReward',\n      msg: 'Reward vendors must have at least one token unit per pool token',\n    },\n    {\n      code: 111,\n      name: 'InvalidExpiry',\n      msg: 'Reward expiry must be after the current clock timestamp.',\n    },\n    {\n      code: 112,\n      name: 'VendorExpired',\n      msg: 'The reward vendor has been expired.',\n    },\n    {\n      code: 113,\n      name: 'CursorAlreadyProcessed',\n      msg: 'This reward has already been processed.',\n    },\n    {\n      code: 114,\n      name: 'NotStakedDuringDrop',\n      msg: 'The account was not staked at the time of this reward.',\n    },\n    {\n      code: 115,\n      name: 'VendorNotYetExpired',\n      msg: 'The vendor is not yet eligible for expiry.',\n    },\n    {\n      code: 116,\n      name: 'RewardsNeedsProcessing',\n      msg: 'Please collect your reward before otherwise using the program.',\n    },\n    {\n      code: 117,\n      name: 'ExpectedLockedVendor',\n      msg: 'Locked reward vendor expected but an unlocked vendor was given.',\n    },\n    {\n      code: 118,\n      name: 'ExpectedUnlockedVendor',\n      msg: 'Unlocked reward vendor expected but a locked vendor was given.',\n    },\n    {\n      code: 119,\n      name: 'InvalidVestingSigner',\n      msg: 'Locked deposit from an invalid deposit authority.',\n    },\n    {\n      code: 120,\n      name: 'UnrealizedReward',\n      msg: 'Locked rewards cannot be realized until one unstaked all tokens.',\n    },\n    {\n      code: 121,\n      name: 'InvalidBeneficiary',\n      msg: \"The beneficiary doesn't match.\",\n    },\n    {\n      code: 122,\n      name: 'InvalidRealizorMetadata',\n      msg: 'The given member account does not match the realizor metadata.',\n    },\n    {\n      code: 123,\n      name: 'InvalidVestingSchedule',\n      msg: 'Invalid vesting schedule for the locked reward.',\n    },\n    {\n      code: 124,\n      name: 'InvalidProgramAuthority',\n      msg: 'Please specify the correct authority for this program.',\n    },\n  ],\n};\n\nexport default idl;\n","import { Idl } from '@project-serum/anchor';\n\nconst idl: Idl = {\n  version: '0.0.0',\n  name: 'multisig',\n  instructions: [\n    {\n      name: 'createMultisig',\n      accounts: [\n        {\n          name: 'multisig',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'owners',\n          type: {\n            vec: 'publicKey',\n          },\n        },\n        {\n          name: 'threshold',\n          type: 'u64',\n        },\n        {\n          name: 'nonce',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'createTransaction',\n      accounts: [\n        {\n          name: 'multisig',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'transaction',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'proposer',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'pid',\n          type: 'publicKey',\n        },\n        {\n          name: 'accs',\n          type: {\n            vec: {\n              defined: 'TransactionAccount',\n            },\n          },\n        },\n        {\n          name: 'data',\n          type: 'bytes',\n        },\n      ],\n    },\n    {\n      name: 'approve',\n      accounts: [\n        {\n          name: 'multisig',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'transaction',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'setOwners',\n      accounts: [\n        {\n          name: 'multisig',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'multisigSigner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'owners',\n          type: {\n            vec: 'publicKey',\n          },\n        },\n      ],\n    },\n    {\n      name: 'changeThreshold',\n      accounts: [\n        {\n          name: 'multisig',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'multisigSigner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'threshold',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'executeTransaction',\n      accounts: [\n        {\n          name: 'multisig',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'multisigSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'transaction',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  accounts: [\n    {\n      name: 'Multisig',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'owners',\n            type: {\n              vec: 'publicKey',\n            },\n          },\n          {\n            name: 'threshold',\n            type: 'u64',\n          },\n          {\n            name: 'nonce',\n            type: 'u8',\n          },\n          {\n            name: 'ownerSetSeqno',\n            type: 'u32',\n          },\n        ],\n      },\n    },\n    {\n      name: 'Transaction',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'multisig',\n            type: 'publicKey',\n          },\n          {\n            name: 'programId',\n            type: 'publicKey',\n          },\n          {\n            name: 'accounts',\n            type: {\n              vec: {\n                defined: 'TransactionAccount',\n              },\n            },\n          },\n          {\n            name: 'data',\n            type: 'bytes',\n          },\n          {\n            name: 'signers',\n            type: {\n              vec: 'bool',\n            },\n          },\n          {\n            name: 'didExecute',\n            type: 'bool',\n          },\n          {\n            name: 'ownerSetSeqno',\n            type: 'u32',\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: 'TransactionAccount',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'pubkey',\n            type: 'publicKey',\n          },\n          {\n            name: 'isSigner',\n            type: 'bool',\n          },\n          {\n            name: 'isWritable',\n            type: 'bool',\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 100,\n      name: 'InvalidOwner',\n      msg: 'The given owner is not part of this multisig.',\n    },\n    {\n      code: 101,\n      name: 'NotEnoughSigners',\n      msg: 'Not enough owners signed this transaction.',\n    },\n    {\n      code: 102,\n      name: 'TransactionAlreadySigned',\n      msg: 'Cannot delete a transaction that has been signed by an owner.',\n    },\n    {\n      code: 103,\n      name: 'Overflow',\n      msg: 'Overflow when adding.',\n    },\n    {\n      code: 104,\n      name: 'UnableToDelete',\n      msg: 'Cannot delete a transaction the owner did not create.',\n    },\n    {\n      code: 105,\n      name: 'AlreadyExecuted',\n      msg: 'The given transaction has already been executed.',\n    },\n    {\n      code: 106,\n      name: 'InvalidThreshold',\n      msg: 'Threshold must be less than or equal to the number of owners.',\n    },\n  ],\n};\n\nexport default idl;\n","import React, {\n  PropsWithChildren,\n  ReactElement,\n  ReactNode,\n  useMemo,\n  useContext,\n} from 'react';\nimport { useSelector } from 'react-redux';\nimport { Connection, ConfirmOptions } from '@solana/web3.js';\n// @ts-ignore\nimport Wallet from '@project-serum/sol-wallet-adapter';\nimport { Provider } from '@project-serum/common';\nimport { Program } from '@project-serum/anchor';\nimport { State as StoreState } from '../../store/reducer';\nimport LockupIdl from '../../idl/lockup';\nimport RegistryIdl from '../../idl/registry';\nimport MultisigIdl from '../../idl/multisig';\n\nexport function useWallet(): WalletContextValues {\n  const w = useContext(WalletContext);\n  if (!w) {\n    throw new Error('Missing wallet context');\n  }\n  return w;\n}\n\nconst WalletContext = React.createContext<null | WalletContextValues>(null);\n\ntype WalletContextValues = {\n  wallet: Wallet;\n  lockupClient: Program;\n  registryClient: Program;\n  multisigClient: Program;\n};\n\nexport default function WalletProvider(\n  props: PropsWithChildren<ReactNode>,\n): ReactElement {\n  const { walletProvider, network } = useSelector((state: StoreState) => {\n    return {\n      walletProvider: state.common.walletProvider,\n      network: state.common.network,\n    };\n  });\n\n  const {\n    wallet,\n    lockupClient,\n    registryClient,\n    multisigClient,\n  } = useMemo(() => {\n    const opts: ConfirmOptions = {\n      preflightCommitment: 'recent',\n      commitment: 'recent',\n    };\n    const connection = new Connection(network.url, opts.preflightCommitment);\n    const wallet = new Wallet(walletProvider, network.url);\n\t\t// @ts-ignore\n    const provider = new Provider(connection, wallet, opts);\n\n    const lockupClient = new Program(\n      LockupIdl,\n      network.lockupProgramId,\n      provider,\n    );\n    const registryClient = new Program(\n      RegistryIdl,\n      network.registryProgramId,\n      provider,\n    );\n\n    const multisigClient = new Program(\n      MultisigIdl,\n      network.multisigProgramId,\n      provider,\n    );\n\n    return {\n      wallet,\n      lockupClient,\n      registryClient,\n      multisigClient,\n    };\n  }, [walletProvider, network]);\n\n  return (\n    <WalletContext.Provider\n      value={{ wallet, lockupClient, registryClient, multisigClient }}\n    >\n      {props.children}\n    </WalletContext.Provider>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport BN from 'bn.js';\nimport { useSnackbar } from 'notistack';\nimport {\n  Account,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n} from '@solana/web3.js';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport { u64 } from '@solana/spl-token';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { useWallet } from '../components/common/WalletProvider';\nimport { ViewTransactionOnExplorerButton } from '../components/common/Notification';\nimport { State as StoreState, ProgramAccount } from '../store/reducer';\nimport { ActionType } from '../store/actions';\nimport * as skin from '../skin';\nimport { toDisplay, toDisplayLabel } from '../utils/tokens';\nimport { memberSigner, registrarSigner } from '../utils/registry';\n\nexport default function Stake() {\n  const { registryClient } = useWallet();\n  const dispatch = useDispatch();\n  const { member, memberAccount, registrarAccount, registrar } = useSelector(\n    (state: StoreState) => {\n      const registrarAccount =\n        state.accounts[state.registry.registrar.toString()];\n      return {\n        member: state.registry.member,\n        memberAccount: state.registry.member\n          ? state.accounts[state.registry.member.toString()]\n          : undefined,\n        registrarAccount: registrarAccount,\n        registrar: state.registry.registrar,\n      };\n    },\n  );\n\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n  const createPoolTokens = async (amount: number, isLocked: boolean) => {\n    enqueueSnackbar(\n      `Staking ${toDisplayLabel(registrarAccount.poolMint)} Pool tokens`,\n      {\n        variant: 'info',\n      },\n    );\n\n    const tx = await registryClient.rpc.stake(new u64(amount), isLocked, {\n      accounts: {\n        registrar,\n        rewardEventQ: registrarAccount.rewardEventQ,\n        poolMint: registrarAccount.poolMint,\n        member,\n        beneficiary: registryClient.provider.wallet.publicKey,\n        balances: memberAccount.balances,\n        balancesLocked: memberAccount.balancesLocked,\n        memberSigner: (\n          await memberSigner(registryClient.programId, registrar, member!)\n        ).publicKey,\n        registrarSigner: (\n          await registrarSigner(registryClient.programId, registrar)\n        ).publicKey,\n        clock: SYSVAR_CLOCK_PUBKEY,\n        tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n      },\n    });\n    closeSnackbar();\n    enqueueSnackbar(`Staking complete`, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n  };\n\n  const redeemPoolTokens = async (amount: number, isLocked: boolean) => {\n    enqueueSnackbar(\n      `Unstaking ${amount} ${toDisplayLabel(\n        registrarAccount.poolMint,\n      )} Pool tokens`,\n      {\n        variant: 'info',\n      },\n    );\n\n    const pendingWithdrawal = new Account();\n    const tx = await registryClient.rpc.startUnstake(\n      new u64(amount),\n      isLocked,\n      {\n        accounts: {\n          registrar,\n          rewardEventQ: registrarAccount.rewardEventQ,\n          poolMint: registrarAccount.poolMint,\n\n          pendingWithdrawal: pendingWithdrawal.publicKey,\n          member,\n          beneficiary: registryClient.provider.wallet.publicKey,\n          balances: memberAccount.balances,\n          balancesLocked: memberAccount.balancesLocked,\n\n          memberSigner: (\n            await memberSigner(registryClient.programId, registrar, member!)\n          ).publicKey,\n\n          tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n          clock: SYSVAR_CLOCK_PUBKEY,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [pendingWithdrawal],\n        instructions: [\n          await registryClient.account.pendingWithdrawal.createInstruction(\n            pendingWithdrawal,\n          ),\n        ],\n      },\n    );\n    const pwAccount = await registryClient.account.pendingWithdrawal(\n      pendingWithdrawal.publicKey,\n    );\n    dispatch({\n      type: ActionType.RegistryCreatePendingWithdrawal,\n      item: {\n        pendingWithdrawal: {\n          publicKey: pendingWithdrawal.publicKey,\n          account: pwAccount,\n        },\n      },\n    });\n    closeSnackbar();\n    enqueueSnackbar(`Stake transfer initiated`, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n  };\n\n  const createPool = async (shares: number, isLocked: boolean) => {\n    if (shares > 0) {\n      createPoolTokens(shares, isLocked).catch(err => {\n        console.error(err);\n        enqueueSnackbar(`Error staking: ${err.toString()}`, {\n          variant: 'error',\n        });\n      });\n    }\n  };\n  const redeemPool = async (shares: number, isLocked: boolean) => {\n    if (shares > 0) {\n      redeemPoolTokens(shares, isLocked).catch(err => {\n        console.error(err);\n        enqueueSnackbar(`Error unstaking: ${err.toString()}`, {\n          variant: 'error',\n        });\n      });\n    }\n  };\n\n  return (\n    <div style={{ width: '100%' }}>\n      <div style={{ display: 'flex', width: '100%' }}>\n        <div style={{ flex: 1, marginTop: '24px', marginBottom: '24px' }}>\n          <PoolCard\n            title={'Stake Pool'}\n            create={createPool}\n            redeem={redeemPool}\n          />\n        </div>\n        <RedemptionList\n          style={{\n            marginBottom: '24px',\n          }}\n        />\n      </div>\n      <AllPendingTransfers />\n    </div>\n  );\n}\n\ntype PoolCardProps = {\n  title: string;\n  create: (shares: number, isLocked: boolean) => void;\n  redeem: (shares: number, isLocked: boolean) => void;\n};\n\nfunction PoolCard(props: PoolCardProps) {\n  const { title, create, redeem } = props;\n  const [poolAmount, setPoolAmount] = useState<null | number>(null);\n  const [isLocked, setIsLocked] = useState(false);\n  const { poolTokenMint, member, registrarAccount, mint } = useSelector(\n    (state: StoreState) => {\n      const registrarAccount =\n        state.accounts[state.registry.registrar.toString()];\n      const poolTokenMint = {\n        publicKey: registrarAccount.poolMint,\n        account: state.accounts[registrarAccount.poolMint.toString()],\n      };\n      return {\n        poolTokenMint,\n        member: state.registry.member,\n        registrarAccount,\n        mint: {\n          publicKey: registrarAccount.mint,\n          account: state.accounts[registrarAccount.mint.toString()],\n        },\n      };\n    },\n  );\n\n  const pricePerShare = toDisplay(\n    registrarAccount.stakeRate,\n    mint.account.decimals,\n  );\n\n  const cost = poolAmount\n    ? toDisplay(\n        registrarAccount.stakeRate.mul(new BN(poolAmount)),\n        mint.account.decimals,\n      )\n    : 0;\n  return (\n    <Card\n      style={{\n        marginBottom: '24px',\n      }}\n    >\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n        <CardHeader\n          title={title}\n          subheader={poolTokenMint.publicKey.toString()}\n        />\n        <div\n          style={{\n            paddingRight: '16px',\n            display: 'flex',\n            justifyContent: 'center',\n            flexDirection: 'column',\n          }}\n        >\n          <Typography color=\"textSecondary\"></Typography>\n        </div>\n      </div>\n      <CardContent>\n        <div\n          style={{\n            marginBottom: '16px',\n          }}\n        >\n          <Typography>\n            Please enter the amount of pool tokens you would like to purchase in\n            the form below. Upon pressing <b>stake</b> you will create new pool\n            tokens at a fixed price, adding to the amount of pool tokens\n            outstanding.\n          </Typography>\n          <br />\n          <Typography>\n            Unstaking works similarly, except one must incur an unbonding period\n            where funds will not be able to be retrieved until the unbonding\n            period ends. At the end of the unbonding period, click the blue\n            checkbox next to your pending transfer. If the checkbox is grey,\n            your unbonding period has not yet completed.\n          </Typography>\n          <br />\n          <Typography style={{ fontWeight: 'bold' }}>\n            Total pool tokens outstanding\n          </Typography>\n          <Typography>{poolTokenMint.account.supply.toString()}</Typography>\n          <Typography style={{ fontWeight: 'bold' }}>\n            Price per pool token\n          </Typography>\n          <Typography>{pricePerShare.toString()}</Typography>\n          <Typography style={{ fontWeight: 'bold' }}>\n            Your total cost\n          </Typography>\n          <Typography>\n            {cost} {toDisplayLabel(mint.publicKey)}\n          </Typography>\n          <Typography style={{ fontWeight: 'bold' }}>\n            Unbonding period (days)\n          </Typography>\n          <Typography>\n            {(\n              registrarAccount.withdrawalTimelock /\n              (60 * 60 * 24.0)\n            ).toString()}\n          </Typography>\n        </div>\n        <div>\n          <div style={{ marginBottom: '10px' }}>\n            <FormControl>\n              <TextField\n                style={{ width: '100%' }}\n                label=\"Pool tokens\"\n                type=\"number\"\n                variant=\"outlined\"\n                onChange={e => setPoolAmount(parseInt(e.target.value))}\n              />\n            </FormControl>\n          </div>\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <div>\n              <Button\n                disabled={member === undefined}\n                color=\"primary\"\n                variant=\"contained\"\n                onClick={() => create(poolAmount as number, isLocked)}\n              >\n                Stake\n              </Button>\n              <Button\n                disabled={member === undefined}\n                color=\"secondary\"\n                variant=\"contained\"\n                style={{ marginLeft: '10px' }}\n                onClick={() => redeem(poolAmount as number, isLocked)}\n              >\n                Unstake\n              </Button>\n            </div>\n            <div>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={isLocked}\n                    onChange={() => setIsLocked(!isLocked)}\n                  />\n                }\n                labelPlacement={'start'}\n                label=\"Locked balances\"\n              />\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\ntype RedemptionListProps = {\n  style: any;\n};\n\nfunction RedemptionList(props: RedemptionListProps) {\n  const { registryClient } = useWallet();\n  const dispatch = useDispatch();\n  const { member, registrar, mint, pendingWithdrawals } = useSelector(\n    (state: StoreState) => {\n      const member = state.registry.member\n        ? {\n            publicKey: state.registry.member,\n            account: state.accounts[state.registry.member.toString()],\n          }\n        : undefined;\n      const registrar = {\n        publicKey: state.registry.registrar!,\n        account: state.accounts[state.registry.registrar.toString()],\n      };\n      const mint = {\n        publicKey: registrar.account.mint,\n        account: state.accounts[registrar.account.mint.toString()],\n      };\n      const pendingWithdrawals =\n        state.registry.pendingWithdrawals === null\n          ? null\n          : state.registry.pendingWithdrawals.map(pw => {\n              return {\n                publicKey: pw,\n                account: state.accounts[pw.toString()],\n              };\n            });\n      return {\n        member,\n        registrar,\n        mint,\n        pendingWithdrawals,\n      };\n    },\n  );\n\n  useEffect(() => {\n    if (!member) {\n      return;\n    }\n    if (pendingWithdrawals !== null) {\n      return;\n    }\n\n    // Only grab pending withdrawals for the current member account.\n    const filter = Buffer.concat([\n      registrar.publicKey.toBuffer(),\n      member.publicKey.toBuffer(),\n    ]);\n    registryClient.account.pendingWithdrawal\n      .all(filter)\n      .then(pendingWithdrawals => {\n        dispatch({\n          type: ActionType.RegistrySetPendingWithdrawals,\n          item: {\n            pendingWithdrawals,\n          },\n        });\n      });\n  }, [\n    dispatch,\n    registrar,\n    member,\n    pendingWithdrawals,\n    registryClient.account.pendingWithdrawal,\n  ]);\n\n  return (\n    <div style={props.style}>\n      <Card\n        style={{\n          marginLeft: '20px',\n          marginTop: '24px',\n          width: '294px',\n        }}\n      >\n        <CardContent\n          style={{\n            paddingLeft: 0,\n            paddingRight: 0,\n            paddingBottom: 0,\n            paddingTop: 0,\n          }}\n        >\n          <div\n            style={{\n              marginLeft: '24px',\n              marginTop: '24px',\n              marginRight: '24px',\n              borderBottom: 'solid 1pt #ccc',\n              paddingBottom: '12px',\n            }}\n          >\n            <Typography style={{}}>Your Pending Transfers</Typography>\n            <Typography style={{ fontSize: '12px' }} color=\"textSecondary\">\n              Click the checkmark to complete a transfer on or after the \"end\"\n              date.\n            </Typography>\n          </div>\n          <div style={{ paddingLeft: '24px', paddingRight: '24px' }}>\n            {member && pendingWithdrawals === null ? (\n              <div style={{ paddingTop: '24px', marginBottom: '24px' }}>\n                <CircularProgress\n                  style={{\n                    display: 'block',\n                    marginLeft: 'auto',\n                    marginRight: 'auto',\n                  }}\n                />\n              </div>\n            ) : pendingWithdrawals !== null && pendingWithdrawals.length > 0 ? (\n              pendingWithdrawals.map((pw, idx) => {\n                return (\n                  <PendingStakeListItem\n                    key={pw.publicKey.toString()}\n                    isLast={idx === pendingWithdrawals.length - 1}\n                    registrar={registrar}\n                    pw={pw}\n                    member={member!}\n                    mint={mint}\n                  />\n                );\n              })\n            ) : (\n              <div\n                style={{\n                  paddingBottom: '24px',\n                  paddingTop: '12px',\n                }}\n              >\n                <Typography color=\"textSecondary\" style={{ fontSize: '14px' }}>\n                  None found\n                </Typography>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\ntype PendingStakeListItemProps = {\n  isLast?: boolean;\n  registrar: ProgramAccount;\n  pw: ProgramAccount;\n  member: ProgramAccount;\n  mint: ProgramAccount;\n};\n\nfunction PendingStakeListItem(props: PendingStakeListItemProps) {\n  const { isLast, pw, member, registrar, mint } = props;\n  const sptLabel = (() => {\n    const isLocked = pw.account.locked;\n    const l = isLocked ? '(locked)' : '';\n    return `${toDisplay(\n      pw.account.amount,\n      mint.account.decimals,\n    )} ${toDisplayLabel(mint.publicKey)} ${l}`;\n  })();\n  return (\n    <div\n      style={{\n        paddingBottom: !isLast ? '12px' : '24px',\n        paddingTop: '12px',\n        borderBottom: 'solid 1pt #ccc',\n      }}\n    >\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          overflow: 'hidden',\n        }}\n      >\n        <div>\n          <Typography\n            style={{\n              whiteSpace: 'pre',\n              maxWidth: '195px',\n              overflow: 'hidden',\n              fontWeight: 'bold',\n              fontSize: '14px',\n            }}\n          >\n            {`${sptLabel}`}\n          </Typography>\n        </div>\n        <div>\n          <PendingWithdrawalButton\n            registrar={registrar}\n            member={member}\n            pendingWithdrawal={pw}\n          />\n        </div>\n      </div>\n      <Typography style={{ fontSize: '14px' }}>\n        {`Start: ${new Date(\n          pw.account.startTs.toNumber() * 1000,\n        ).toLocaleString()}`}\n      </Typography>\n      <Typography style={{ fontSize: '14px' }}>\n        {`End:   ${new Date(\n          pw.account.endTs.toNumber() * 1000,\n        ).toLocaleString()}`}\n      </Typography>\n      <Typography\n        color=\"textSecondary\"\n        style={{\n          fontSize: '14px',\n          overflow: 'hidden',\n        }}\n      >\n        {pw.account.pool.toString()}\n      </Typography>\n    </div>\n  );\n}\n\ntype PendingWithdrawalButtonProps = {\n  registrar: ProgramAccount;\n  pendingWithdrawal: ProgramAccount;\n  member: ProgramAccount;\n};\n\nfunction PendingWithdrawalButton(props: PendingWithdrawalButtonProps) {\n  const { pendingWithdrawal, member, registrar } = props;\n  const { registryClient } = useWallet();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const dispatch = useDispatch();\n\n  const endPendingWithdrawal = async () => {\n    enqueueSnackbar(`Completing redemption`, {\n      variant: 'info',\n    });\n    const balances = pendingWithdrawal.account.locked\n      ? member.account.balancesLocked\n      : member.account.balances;\n    const tx = await registryClient.rpc.endUnstake({\n      accounts: {\n        registrar: registrar.publicKey,\n        member: member.publicKey,\n        beneficiary: registryClient.provider.wallet.publicKey,\n        pendingWithdrawal: pendingWithdrawal.publicKey,\n        vault: balances.vault,\n        vaultPw: balances.vaultPw,\n        memberSigner: (\n          await memberSigner(\n            registryClient.programId,\n            registrar.publicKey,\n            member.publicKey,\n          )\n        ).publicKey,\n        clock: SYSVAR_CLOCK_PUBKEY,\n        tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n      },\n    });\n\n    const updatedPendingWithdrawal = {\n      publicKey: pendingWithdrawal.publicKey,\n      account: {\n        ...pendingWithdrawal.account,\n        burned: true,\n      },\n    };\n\n    dispatch({\n      type: ActionType.RegistryUpdatePendingWithdrawal,\n      item: {\n        pendingWithdrawal: updatedPendingWithdrawal,\n      },\n    });\n\n    closeSnackbar();\n    enqueueSnackbar(`Stake transfer completed`, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n  };\n\n  let disabled = false;\n  let color = skin.instance().ready;\n  let onClick = async () =>\n    endPendingWithdrawal().catch(err => {\n      console.error(`Error completing transfer: ${err.toString()}`);\n      enqueueSnackbar(\n        `Error completing transfer. Wait for the transfer's timelock to end and try again.`,\n        {\n          variant: 'error',\n        },\n      );\n    });\n  if (pendingWithdrawal.account.burned) {\n    disabled = true;\n    color = skin.instance().active;\n    onClick = async () => {};\n  }\n\n  if (pendingWithdrawal.account.endTs.toNumber() > Date.now() / 1000) {\n    disabled = true;\n    color = skin.instance().notReady;\n    onClick = async () => {};\n  }\n\n  return (\n    <div\n      onClick={onClick}\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n      }}\n    >\n      <IconButton disabled={disabled} style={{ width: '25px', height: '25px' }}>\n        <CheckCircleIcon style={{ color, fontSize: '20px' }} />\n      </IconButton>\n    </div>\n  );\n}\n\nfunction AllPendingTransfers() {\n  const { registryClient } = useWallet();\n  const { registrar, registrarAccount, mintAccount } = useSelector(\n    (state: StoreState) => {\n      const registrarAccount =\n        state.accounts[state.registry.registrar.toString()];\n      return {\n        registrar: state.registry.registrar,\n        registrarAccount,\n        mintAccount: state.accounts[registrarAccount.mint.toString()],\n      };\n    },\n  );\n  const [pendingTransfers, setPendingTransfers] = useState<null | any>(null);\n  useEffect(() => {\n    const fetchAll = async () => {\n      let transfers = await registryClient.account.pendingWithdrawal.all(\n        registrar.toBuffer(),\n      );\n      transfers = transfers\n        .filter((pw: any) => pw.account.burned === false)\n        .sort((a, b) => {\n          if (a.account.startTs < b.account.startTs) {\n            return 1;\n          } else if (a.account.startTs > b.account.startTs) {\n            return -1;\n          } else {\n            return 0;\n          }\n        });\n      setPendingTransfers(transfers);\n    };\n    fetchAll();\n  }, [registryClient, registrar]);\n\n  return (\n    <Card style={{ maxHeight: '900px', overflow: 'auto' }}>\n      <Typography\n        variant=\"h5\"\n        style={{ padding: '16px', borderBottom: 'solid 1pt #ccc' }}\n      >\n        All pending transfers\n      </Typography>\n      {pendingTransfers !== null ? (\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Member Account</TableCell>\n              <TableCell>Amount</TableCell>\n              <TableCell>Pool</TableCell>\n              <TableCell>Locked</TableCell>\n              <TableCell>Start</TableCell>\n              <TableCell>End</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {pendingTransfers.map((pw: any) => (\n              <TableRow>\n                <TableCell>{pw.account.member.toString()}</TableCell>\n                <TableCell>\n                  {toDisplay(\n                    pw.account.amount.toString(),\n                    mintAccount.decimals,\n                  )}\n                </TableCell>\n                <TableCell>\n                  {pw.account.amount.div(registrarAccount.stakeRate).toString()}\n                </TableCell>\n                <TableCell>{pw.account.locked.toString()}</TableCell>\n                <TableCell>\n                  {new Date(pw.account.startTs.toNumber() * 1000).toString()}\n                </TableCell>\n                <TableCell>\n                  {new Date(pw.account.endTs.toNumber() * 1000).toString()}\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      ) : (\n        <div style={{ padding: '24px' }}>\n          <CircularProgress\n            style={{\n              display: 'block',\n              marginLeft: 'auto',\n              marginRight: 'auto',\n            }}\n          />\n        </div>\n      )}\n    </Card>\n  );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport { TransactionSignature } from '@solana/web3.js';\nimport { State as StoreState } from '../../store/reducer';\n\ntype Props = {\n  signature: string;\n};\n\nexport async function withTx(\n  snack: any,\n  beforeLabel: string,\n  afterLabel: string,\n  execTx: () => Promise<TransactionSignature>,\n) {\n  snack.enqueueSnackbar(beforeLabel, {\n    variant: 'info',\n  });\n  try {\n    let tx = await execTx();\n    snack.closeSnackbar();\n    snack.enqueueSnackbar(afterLabel, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n  } catch (err) {\n    snack.enqueueSnackbar(`Error: ${err.toString()}`, {\n      variant: 'error',\n    });\n  }\n}\n\nexport function ViewTransactionOnExplorerButton(props: Props) {\n  const { signature } = props;\n  const { explorerClusterSuffix } = useSelector((state: StoreState) => {\n    return {\n      explorerClusterSuffix: state.common.network.explorerClusterSuffix,\n    };\n  });\n  const urlSuffix = `?cluster=${explorerClusterSuffix}`;\n  return (\n    <Button\n      color=\"inherit\"\n      component=\"a\"\n      target=\"_blank\"\n      rel=\"noopener\"\n      href={`https://explorer.solana.com/tx/${signature}` + urlSuffix}\n    >\n      View on Solana Explorer\n    </Button>\n  );\n}\n","import { PublicKey } from '@solana/web3.js';\nimport { AccountInfo as TokenAccount } from '@solana/spl-token';\nimport { ProgramAccount as CommonProgramAccount } from '@project-serum/common';\nimport { Action, ActionType } from './actions';\nimport { networks, Network } from './config';\n\nexport enum BootstrapState {\n  NeedsBootstrap,\n  IsBootstrapping,\n  Bootstrapped,\n}\n\nexport default function reducer(\n  state: State = initialState,\n  action: Action,\n): State {\n  let newState = {\n    common: { ...state.common },\n    lockup: { ...state.lockup },\n    registry: { ...state.registry },\n    accounts: { ...state.accounts },\n  };\n  switch (action.type) {\n    // Common.\n    case ActionType.CommonAppWillBootstrap:\n      newState.common.bootstrapState = BootstrapState.IsBootstrapping;\n      newState.common.bootstrapTrigger = false;\n      return newState;\n    case ActionType.CommonAppDidBootstrap:\n      newState.common.bootstrapState = BootstrapState.Bootstrapped;\n      return newState;\n    case ActionType.CommonWalletSetProvider:\n      newState.common.walletProvider = action.item.walletProvider;\n      return newState;\n    case ActionType.CommonWalletDidConnect:\n      newState.common.isWalletConnected = true;\n      return newState;\n    case ActionType.CommonWalletDidDisconnect:\n      newState.common.isWalletConnected = false;\n      return newState;\n    case ActionType.CommonSetNetwork:\n      if (newState.common.network.label !== action.item.network.label) {\n        newState.common.network = action.item.network;\n        newState.common.bootstrapState = BootstrapState.NeedsBootstrap;\n        newState.common.shutdownTrigger = true;\n        const network = networks[action.item.networkKey];\n        newState.registry.registrar = Object.values(network.registrars)[0];\n      }\n      return newState;\n    case ActionType.CommonTriggerBootstrap:\n      newState.common.bootstrapState = BootstrapState.NeedsBootstrap;\n      newState.common.bootstrapTrigger = true;\n      return newState;\n    case ActionType.CommonTriggerShutdown:\n      newState.common.bootstrapState = BootstrapState.NeedsBootstrap;\n      newState.common.shutdownTrigger = true;\n      return newState;\n    case ActionType.CommonDidShutdown:\n      // Reset everything except network and registrar.\n      let s = {\n        ...initialState,\n      };\n      s.common.network = newState.common.network;\n      s.registry.registrar = newState.registry.registrar;\n      return s;\n    case ActionType.CommonOwnedTokenAccountsSet:\n      newState.common.ownedTokenAccounts = action.item.ownedTokenAccounts;\n      return newState;\n\n    case ActionType.CommonOwnedTokenAccountsUpdate:\n      newState.common.ownedTokenAccounts = newState.common.ownedTokenAccounts.map(\n        programAccount => {\n          if (programAccount.publicKey.equals(action.item.account.publicKey)) {\n            return action.item.account;\n          } else {\n            return programAccount;\n          }\n        },\n      );\n      return newState;\n\n    // Lockup.\n    case ActionType.LockupSetVestings:\n      newState.lockup.vestings = action.item.vestingAccounts;\n      return newState;\n    case ActionType.LockupUpdateVesting:\n      newState.accounts[action.item.vesting.publicKey.toString()] =\n        action.item.vesting.account;\n      return newState;\n    case ActionType.LockupCreateVesting:\n      newState.lockup.vestings.unshift(action.item.vesting.publicKey);\n      newState.accounts[action.item.vesting.publicKey.toString()] =\n        action.item.vesting.account;\n      return newState;\n\n    // Registry.\n    case ActionType.RegistrySetMember:\n      // This should only be called on member creation. All other member\n      // member switches should route through `RegistrySetMember`.\n      newState.registry.member = action.item.member;\n      return newState;\n    case ActionType.RegistrySetRegistrar:\n      newState.registry.registrar = action.item.registrar;\n      newState.registry.member = action.item.member;\n      newState.registry.pendingWithdrawals = null;\n      return newState;\n    case ActionType.RegistrySetPendingWithdrawals:\n      action.item.pendingWithdrawals.forEach((pw: any) => {\n        newState.accounts[pw.publicKey.toString()] = pw.account;\n      });\n      newState.registry.pendingWithdrawals = action.item.pendingWithdrawals.map(\n        (pw: any) => pw.publicKey,\n      );\n      return newState;\n    case ActionType.RegistryCreatePendingWithdrawal:\n      newState.accounts[action.item.pendingWithdrawal.publicKey.toString()] =\n        action.item.pendingWithdrawal.account;\n      if (newState.registry.pendingWithdrawals === null) {\n        newState.registry.pendingWithdrawals = [];\n      }\n      newState.registry.pendingWithdrawals.unshift(\n        action.item.pendingWithdrawal.publicKey,\n      );\n      return newState;\n    case ActionType.RegistryUpdatePendingWithdrawal:\n      newState.accounts[action.item.pendingWithdrawal.publicKey.toString()] =\n        action.item.pendingWithdrawal.account;\n      return newState;\n    case ActionType.AccountAdd:\n      newState.accounts[action.item.account.publicKey.toString()] =\n        action.item.account.account;\n      return newState;\n    case ActionType.AccountUpdate:\n      newState.accounts[action.item.account.publicKey.toString()] =\n        action.item.account.account;\n      return newState;\n    default:\n      return newState;\n  }\n}\n\nexport type State = {\n  common: CommonState;\n  lockup: LockupState;\n  registry: RegistryState;\n  accounts: { [pubkey: string]: any };\n};\n\nexport type CommonState = {\n  walletProvider?: string;\n  isWalletConnected: boolean;\n  bootstrapTrigger: boolean;\n  bootstrapState: BootstrapState;\n  shutdownTrigger: boolean;\n  network: Network;\n  ownedTokenAccounts: ProgramAccount<TokenAccount>[];\n};\n\nexport type LockupState = {\n  vestings: PublicKey[];\n};\n\n// All state associated with a single instance of a staking registrar.\nexport type RegistryState = {\n  registrar: PublicKey;\n  member?: PublicKey;\n  pendingWithdrawals: PublicKey[] | null;\n};\n\nexport const initialState: State = {\n  common: {\n    bootstrapTrigger: false,\n    shutdownTrigger: false,\n    isWalletConnected: false,\n    walletProvider: 'https://www.sollet.io',\n    bootstrapState: BootstrapState.NeedsBootstrap,\n    network: networks.mainnet,\n    ownedTokenAccounts: [],\n  },\n  lockup: {\n    vestings: [],\n  },\n  registry: {\n    pendingWithdrawals: null,\n    registrar: networks.mainnet.registrars.srm,\n  },\n  accounts: {},\n};\n\nexport type AsyncData<T> = {\n  isReady: boolean;\n  data?: T;\n};\n\n// Re-export.\nexport type ProgramAccount<T = any> = CommonProgramAccount<T>;\n","import { createStore } from 'redux';\nimport reducer from './reducer';\n\nexport const store = createStore(reducer);\n","import React, {\n  PropsWithChildren,\n  ReactNode,\n  useEffect,\n  useCallback,\n} from 'react';\nimport * as BufferLayout from 'buffer-layout';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport {\n  parseMintAccount,\n  parseTokenAccount,\n} from '@project-serum/common';\nimport * as anchor from '@project-serum/anchor';\nimport { State as StoreState, ProgramAccount } from '../../store/reducer';\nimport { ActionType } from '../../store/actions';\nimport { useWallet } from './WalletProvider';\nimport { memberSeed } from '../../utils/registry';\n\n// BootstrapProvider performs data fetching on application startup.\nexport default function BootstrapProvider(props: PropsWithChildren<ReactNode>) {\n  const { bootstrapTrigger, shutdownTrigger, network, registrar } = useSelector(\n    (state: StoreState) => {\n      return {\n        bootstrapTrigger: state.common.bootstrapTrigger,\n        shutdownTrigger: state.common.shutdownTrigger,\n        network: state.common.network,\n        registrar: state.registry.registrar,\n      };\n    },\n  );\n  const dispatch = useDispatch();\n  const { wallet, lockupClient, registryClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Entry point for bootstrapping all the data for the app.\n  const bootstrap = useCallback(async () => {\n    enqueueSnackbar(`Connecting to ${network.label}`, {\n      variant: 'info',\n      autoHideDuration: 2500,\n    });\n\n    dispatch({\n      type: ActionType.CommonAppWillBootstrap,\n      item: {},\n    });\n\n    let { registrars, members } = await refreshAccounts({\n      dispatch,\n      lockupClient,\n      registryClient,\n      network,\n      wallet,\n    });\n\n    // Temporary account store for the initial registrar switch.\n    const accountStore = Object.fromEntries(\n      new Map(registrars.map(r => [r.publicKey.toString(), r.account])),\n    );\n    members.forEach(m => {\n      accountStore[m.publicKey.toString()] = m.account;\n    });\n\n    await registrarSwitch(\n      registryClient,\n      accountStore,\n      dispatch,\n      registrar,\n      undefined,\n    );\n\n    dispatch({\n      type: ActionType.CommonAppDidBootstrap,\n      item: {},\n    });\n\n    enqueueSnackbar(`Connection established`, {\n      variant: 'success',\n      autoHideDuration: 2500,\n    });\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    registryClient,\n    registrar,\n    lockupClient,\n    network,\n    wallet,\n  ]);\n\n  const shutdown = useCallback(async () => {\n    wallet.disconnect();\n    dispatch({\n      type: ActionType.CommonDidShutdown,\n      item: {},\n    });\n  }, [dispatch, wallet]);\n\n  useEffect(() => {\n    if (bootstrapTrigger) {\n      bootstrap().catch(err => {\n        console.error(err);\n        enqueueSnackbar(`Error bootstrapping application: ${err.toString()}`, {\n          variant: 'error',\n        });\n      });\n    }\n    if (shutdownTrigger) {\n      shutdown().catch(err => {\n        console.error(err);\n        enqueueSnackbar(`Error shutting down application: ${err.toString()}`, {\n          variant: 'error',\n        });\n      });\n    }\n  }, [bootstrapTrigger, bootstrap, shutdownTrigger, shutdown, enqueueSnackbar]);\n\n  return <>{props.children}</>;\n}\n\n// Fetches and populates the redux store with all accounts needed for the app to start.\nexport async function refreshAccounts({\n  dispatch,\n  lockupClient,\n  registryClient,\n  network,\n  wallet,\n}: any) {\n  // Fetch all staking instances.\n  const fetchRegistrars = async (): Promise<ProgramAccount[]> => {\n    const registrarAddresses: PublicKey[] = Object.values(network.registrars);\n\n    // All registrars.\n    const registrars: ProgramAccount[] = (\n      await anchor.utils.getMultipleAccounts(\n        registryClient.provider.connection,\n        registrarAddresses,\n      )\n    ).map(raw => {\n      const account = registryClient.coder.accounts.decode(\n        'Registrar',\n        raw!.account.data,\n      );\n      return {\n        publicKey: raw!.publicKey,\n        account,\n      };\n    });\n\n    // Mint for each registrar.\n    const mints: ProgramAccount[] = (\n      await anchor.utils.getMultipleAccounts(\n        registryClient.provider.connection,\n        registrars.map(r => r.account.mint),\n      )\n    ).map(raw => {\n      const account = parseMintAccount(raw!.account.data);\n      return {\n        publicKey: raw!.publicKey,\n        account,\n      };\n    });\n\n    // Reward queues for each registrar.\n    const rewardQs = (\n      await anchor.utils.getMultipleAccounts(\n        registryClient.provider.connection,\n        registrars.map(r => r.account.rewardEventQ),\n      )\n    ).map(raw => {\n      const account = registryClient.coder.accounts.decode(\n        'RewardQueue',\n        raw!.account.data,\n      );\n      return {\n        publicKey: raw!.publicKey,\n        account,\n      };\n    });\n\n    // Add all the accounts to the store.\n    registrars\n      .concat(mints)\n      .concat(rewardQs)\n      .forEach(r => {\n        dispatch({\n          type: ActionType.AccountAdd,\n          item: {\n            account: r,\n          },\n        });\n      });\n    return registrars;\n  };\n\n  // Fetch the stake accounts for each staking instance (for the connected wallet).\n  const fetchMembers = async (\n    registrars: ProgramAccount[],\n  ): Promise<ProgramAccount[]> => {\n    const members = await Promise.all(\n      registrars\n        .map((r: ProgramAccount) => r.publicKey)\n        .map((r: PublicKey) =>\n          memberSeed(r)\n            .then(seed =>\n              PublicKey.createWithSeed(\n                wallet.publicKey,\n                seed,\n                registryClient.programId,\n              ),\n            )\n            .then(member => {\n              return {\n                memberPublicKey: member,\n                registrar: r,\n              };\n            }),\n        ),\n    );\n    const memberAddresses: PublicKey[] = members.map(m => m.memberPublicKey);\n    const memberAccounts: ProgramAccount[] = (\n      await anchor.utils.getMultipleAccounts(\n        registryClient.provider.connection,\n        memberAddresses,\n      )\n    )\n      .filter(raw => raw !== null)\n      .map((raw: any) => {\n        const account = registryClient.coder.accounts.decode(\n          'Member',\n          raw!.account.data,\n        );\n        return {\n          publicKey: raw!.publicKey,\n          account,\n        };\n      });\n\n    // Get all accounts for all of our member accounts.\n    //\n    // Note: As the number of registrars grows, we'll probably want to move\n    //       this fetch to be an on demand query, rather than on application\n    //       bootstrap.\n    await Promise.all(\n      memberAccounts.map(memberAccount => {\n        return fetchAndDispatchMemberAccounts(\n          memberAccount,\n          dispatch,\n          registryClient.provider.connection,\n        );\n      }),\n    );\n\n    // Add all the member accounts to the store. Must be done *after* the\n    // active member's vaults.\n    memberAccounts.forEach(m => {\n      dispatch({\n        type: ActionType.AccountAdd,\n        item: {\n          account: m,\n        },\n      });\n    });\n\n    return memberAccounts;\n  };\n\n  // All mints for each staking instance (pool token and the token being staked).\n  const fetchMints = async (registrars: ProgramAccount[]) => {\n    const mintAddresses = registrars\n      .map(r => r.account.mint)\n      .concat(registrars.map(r => r.account.poolMint));\n    const mints = (\n      await anchor.utils.getMultipleAccounts(\n        registryClient.provider.connection,\n        mintAddresses,\n      )\n    ).map(raw => {\n      const account = parseMintAccount(raw!.account.data);\n      return {\n        publicKey: raw!.publicKey,\n        account,\n      };\n    });\n    mints.forEach(m => {\n      dispatch({\n        type: ActionType.AccountAdd,\n        item: {\n          account: m,\n        },\n      });\n    });\n  };\n\n  // All token accounts owned by the current user.\n  const fetchOwnedTokenAccounts = async () => {\n    const ownedTokenAccounts = await getOwnedTokenAccounts(\n      lockupClient.provider.connection,\n      wallet.publicKey,\n    );\n    dispatch({\n      type: ActionType.CommonOwnedTokenAccountsSet,\n      item: {\n        ownedTokenAccounts,\n      },\n    });\n  };\n\n  // All vesting accounts owned by the current user.\n  const fetchVestingAccounts = async () => {\n    const vestingAccounts = await lockupClient.account.vesting.all(\n      wallet.publicKey.toBuffer(),\n    );\n    vestingAccounts.forEach((account: any) => {\n      dispatch({\n        type: ActionType.AccountAdd,\n        item: {\n          account,\n        },\n      });\n    });\n    dispatch({\n      type: ActionType.LockupSetVestings,\n      item: {\n        vestingAccounts: vestingAccounts.map(\n          (v: ProgramAccount) => v.publicKey,\n        ),\n      },\n    });\n  };\n\n  const registrars = await fetchRegistrars();\n  const members = await fetchMembers(registrars);\n  await fetchMints(registrars);\n  await fetchOwnedTokenAccounts();\n  await fetchVestingAccounts();\n\n  return { registrars, members };\n}\n\nexport async function registrarSwitch(\n  registryClient: any,\n  accounts: any,\n  dispatch: any,\n  newRegistrar: PublicKey,\n  oldRegistrar?: PublicKey,\n) {\n  const oldMember = await (async (): Promise<ProgramAccount | undefined> => {\n    if (oldRegistrar === undefined) {\n      return undefined;\n    }\n    const oldMember = await PublicKey.createWithSeed(\n      registryClient.provider.wallet.publicKey,\n      await memberSeed(oldRegistrar),\n      registryClient.programId,\n    );\n    const oldMemberAccount = accounts[oldMember.toString()];\n    return oldMemberAccount !== undefined\n      ? {\n          publicKey: oldMember,\n          account: oldMemberAccount,\n        }\n      : undefined;\n  })();\n\n  const newMember = await (async (): Promise<ProgramAccount | undefined> => {\n    const newMember = await PublicKey.createWithSeed(\n      registryClient.provider.wallet.publicKey,\n      await memberSeed(newRegistrar),\n      registryClient.programId,\n    );\n    const newMemberAccount = accounts[newMember.toString()];\n    return newMemberAccount\n      ? {\n          publicKey: newMember,\n          account: newMemberAccount,\n        }\n      : undefined;\n  })();\n\n  await subscribeRegistrar(\n    registryClient,\n    accounts,\n    dispatch,\n    newRegistrar,\n    oldRegistrar,\n  );\n  if (newMember) {\n    unsubscribeMember(registryClient, oldMember);\n    subscribeMember(newMember, registryClient, dispatch);\n  }\n\n  // Perform the UI update.\n  dispatch({\n    type: ActionType.RegistrySetRegistrar,\n    item: {\n      registrar: newRegistrar,\n      member: newMember ? newMember.publicKey : undefined,\n    },\n  });\n}\n\nexport async function subscribeRegistrar(\n  registryClient: any,\n  accounts: any,\n  dispatch: any,\n  newRegistrar: PublicKey,\n  oldRegistrar?: PublicKey,\n) {\n  if (oldRegistrar) {\n    const oldRegistrarAccount = accounts[oldRegistrar.toString()];\n    registryClient.account.rewardQueue.unsubscribe(\n      oldRegistrarAccount.rewardEventQ,\n    );\n    // TODO: unsubscribe from the staking pool subscription.\n  }\n\n  const newRegistrarAccount = accounts[newRegistrar.toString()];\n\n  // Reward event queue sub.\n  const conn = registryClient.account.rewardQueue.subscribe(\n    newRegistrarAccount.rewardEventQ,\n  );\n  conn.on('change', (account: any) => {\n    dispatch({\n      type: ActionType.AccountUpdate,\n      item: {\n        account: {\n          publicKey: newRegistrarAccount.rewardEventQ,\n          account,\n        },\n      },\n    });\n  });\n\n  // Staking pool token sub.\n  // TODO: track these connections somewhere more organized.\n  registryClient.provider.connection.onAccountChange(\n    newRegistrarAccount.poolMint,\n    (acc: any) => {\n      const poolMint = parseMintAccount(acc.data);\n      dispatch({\n        type: ActionType.AccountUpdate,\n        item: {\n          account: {\n            publicKey: newRegistrarAccount.poolMint,\n            account: poolMint,\n          },\n        },\n      });\n    },\n    'recent',\n  );\n}\n\nexport function subscribeMember(\n  newMember: ProgramAccount,\n  registryClient: any,\n  dispatch: any,\n) {\n  // Subscribe to all member account updates.\n  registryClient.account.member\n    .subscribe(newMember.publicKey)\n    .on('change', (account: any) => {\n      dispatch({\n        type: ActionType.AccountUpdate,\n        item: {\n          account: {\n            publicKey: newMember.publicKey,\n            account,\n          },\n        },\n      });\n    });\n\n  // Subscription function, updating the redux store on every change\n  // to a token account.\n  //\n  // TODO: should track these subscriptions for unsubscribing on demand.\n  const createVaultSubscription = (address: PublicKey) => {\n    registryClient.provider.connection.onAccountChange(\n      address,\n      (acc: any) => {\n        const tokenAccount = parseTokenAccount(acc.data);\n        dispatch({\n          type: ActionType.AccountUpdate,\n          item: {\n            account: {\n              publicKey: address,\n              account: tokenAccount,\n            },\n          },\n        });\n      },\n      'recent',\n    );\n  };\n\n  // Subscribe to all the member's token vaults.\n  createVaultSubscription(newMember.account.balances.vault);\n  createVaultSubscription(newMember.account.balances.vaultStake);\n  createVaultSubscription(newMember.account.balances.vaultPw);\n  createVaultSubscription(newMember.account.balances.spt);\n  createVaultSubscription(newMember.account.balancesLocked.vault);\n  createVaultSubscription(newMember.account.balancesLocked.vaultStake);\n  createVaultSubscription(newMember.account.balancesLocked.vaultPw);\n  createVaultSubscription(newMember.account.balancesLocked.spt);\n}\n\nfunction unsubscribeMember(registryClient: any, newMember?: ProgramAccount) {\n  // todo\n}\n\n// Fetches all accounts for a member account and populates the store with them.\nexport async function fetchAndDispatchMemberAccounts(\n  memberAccount: ProgramAccount,\n  dispatch: any,\n  connection: any,\n) {\n  let accounts = (\n    await anchor.utils.getMultipleAccounts(connection, [\n      memberAccount.account.balances.vault,\n      memberAccount.account.balances.vaultStake,\n      memberAccount.account.balances.vaultPw,\n      memberAccount.account.balances.spt,\n      memberAccount.account.balancesLocked.vault,\n      memberAccount.account.balancesLocked.vaultStake,\n      memberAccount.account.balancesLocked.vaultPw,\n      memberAccount.account.balancesLocked.spt,\n    ])\n  )\n    .filter(raw => raw !== null)\n    .map((raw: any) => {\n      return {\n        publicKey: raw.publicKey,\n        account: parseTokenAccount(raw.account.data),\n      };\n    });\n  accounts.forEach(account => {\n    dispatch({\n      type: ActionType.AccountAdd,\n      item: {\n        account,\n      },\n    });\n  });\n}\n\nexport async function getOwnedTokenAccounts(connection: Connection, publicKey: PublicKey) {\n  let filters = getOwnedAccountsFilters(publicKey);\n  let resp = await connection.getProgramAccounts(\n    TOKEN_PROGRAM_ID,\n    {\n      filters,\n    },\n  );\n  const result =  resp\n    .map(({ pubkey, account: { data } }) => {\n      return {\n        publicKey: new PublicKey(pubkey),\n        account: parseTokenAccountData(data),\n      };\n    });\n\n  return result;\n}\n\nexport const ACCOUNT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(32, 'mint'),\n  BufferLayout.blob(32, 'owner'),\n  BufferLayout.nu64('amount'),\n  BufferLayout.blob(93),\n]);\n\n\nexport function getOwnedAccountsFilters(publicKey: PublicKey) {\n  return [\n    {\n      memcmp: {\n        // @ts-ignore\n        offset: ACCOUNT_LAYOUT.offsetOf('owner'),\n        bytes: publicKey.toBase58(),\n      },\n    },\n    {\n      dataSize: ACCOUNT_LAYOUT.span,\n    },\n  ];\n}\n\nexport function parseTokenAccountData(data: any) {\n  // @ts-ignore\n  let { mint, owner, amount } = ACCOUNT_LAYOUT.decode(data);\n  return {\n    mint: new PublicKey(mint),\n    owner: new PublicKey(owner),\n    amount,\n  };\n}\n","import React, { useState, useEffect, ReactElement } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { useSnackbar } from 'notistack';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Select from '@material-ui/core/Select';\nimport Menu from '@material-ui/core/Menu';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport IconButton from '@material-ui/core/IconButton';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport Button from '@material-ui/core/Button';\nimport PersonIcon from '@material-ui/icons/Person';\nimport BubbleChartIcon from '@material-ui/icons/BubbleChart';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { refreshAccounts } from './BootstrapProvider';\nimport { networks } from '../../store/config';\nimport {\n  State as StoreState,\n  ProgramAccount,\n  BootstrapState,\n} from '../../store/reducer';\nimport { ActionType } from '../../store/actions';\nimport { useWallet } from './WalletProvider';\n\ntype HeaderProps = {\n  isAppReady: boolean;\n  member?: ProgramAccount;\n};\n\nexport default function Header(props: HeaderProps) {\n  const { isAppReady } = props;\n  const { network } = useSelector((state: StoreState) => {\n    return {\n      network: state.common.network,\n      isAppReady:\n        state.common.isWalletConnected &&\n        state.common.bootstrapState === BootstrapState.Bootstrapped,\n    };\n  });\n  const dispatch = useDispatch();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const { wallet, registryClient, lockupClient } = useWallet();\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  return (\n    <AppBar\n      position=\"static\"\n      style={{\n        background: '#ffffff',\n        color: '#272727',\n        boxShadow: 'none',\n        borderBottom: 'solid 1pt #ccc',\n      }}\n    >\n      <Toolbar>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            width: '100%',\n          }}\n        >\n          <div style={{ display: 'flex' }}>\n            <SerumLogoButton />\n            <BarButton label=\"Stake\" hrefClient=\"/stake\" />\n            <BarButton label=\"Lockup\" hrefClient=\"/lockup\" />\n            <BarButton label=\"Multisig\" href=\"https://multisig.projectserum.com\" />\n            <BarButton label=\"Trade\" href=\"https://dex.projectserum.com\" />\n            {network.srmFaucet && (\n              <BarButton\n                label=\"Faucet\"\n                href=\"https://www.spl-token-ui.com/#/token-faucets\"\n              />\n            )}\n          </div>\n          <div\n            style={{\n              display: 'flex',\n            }}\n          >\n            <div\n              onClick={() => {\n                setIsRefreshing(true);\n                enqueueSnackbar(`Refreshing`, {\n                  variant: 'info',\n                });\n                refreshAccounts({\n                  dispatch,\n                  lockupClient,\n                  registryClient,\n                  network,\n                  wallet,\n                })\n                  .then(() => {\n                    setIsRefreshing(false);\n                    closeSnackbar();\n                  })\n                  .catch(err => {\n                    setIsRefreshing(false);\n                    closeSnackbar();\n                    enqueueSnackbar(`There was a problem refreshing: ${err}`, {\n                      variant: 'error',\n                      autoHideDuration: 2500,\n                    });\n                  });\n              }}\n              style={{\n                display: isAppReady ? 'block' : 'none',\n                justifyContent: 'center',\n                flexDirection: 'column',\n                marginRight: '10px',\n              }}\n            >\n              {isRefreshing ? (\n                <div\n                  style={{\n                    marginTop: '8px',\n                    padding: '10px',\n                  }}\n                >\n                  <CircularProgress style={{ width: '24px', height: '24px' }} />\n                </div>\n              ) : (\n                <div>\n                  <IconButton>\n                    <RefreshIcon />\n                  </IconButton>\n                </div>\n              )}\n            </div>\n            <NetworkSelector />\n            <WalletConnectButton\n              style={{\n                display: isAppReady ? 'none' : '',\n              }}\n            />\n            {isAppReady && <UserSelector />}\n          </div>\n        </div>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nfunction SerumLogoButton() {\n  const history = useHistory();\n  return (\n    <div style={{ display: 'flex' }} onClick={() => history.push('/')}>\n      <Button color=\"inherit\">\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n          }}\n        >\n          <img\n            style={{\n              display: 'block',\n              height: '35px',\n            }}\n            alt=\"Logo\"\n            src=\"http://dex.projectserum.com/static/media/logo.49174c73.svg\"\n          />\n        </div>\n      </Button>\n    </div>\n  );\n}\n\ntype BarButtonProps = {\n  label: string;\n  hrefClient?: string;\n  href?: string;\n};\n\nfunction BarButton(props: BarButtonProps) {\n  const history = useHistory();\n  const { label, href, hrefClient } = props;\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n      }}\n      onClick={() => hrefClient && history.push(hrefClient)}\n    >\n      <Link\n        style={{ color: 'inherit', textDecoration: 'none' }}\n        href={href}\n        target=\"_blank\"\n      >\n        <Button color=\"inherit\">\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              flexDirection: 'column',\n            }}\n          >\n            <Typography style={{ fontSize: '15px' }}>{label}</Typography>\n          </div>\n        </Button>\n      </Link>\n    </div>\n  );\n}\n\nfunction NetworkSelector() {\n  const network = useSelector((state: StoreState) => {\n    return state.common.network;\n  });\n  const dispatch = useDispatch();\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div\n      style={{\n        marginRight: '10px',\n        fontSize: '15px',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n      }}\n    >\n      <Button\n        color=\"inherit\"\n        onClick={e =>\n          setAnchorEl(\n            // @ts-ignore\n            e.currentTarget,\n          )\n        }\n      >\n        <BubbleChartIcon />\n        <Typography style={{ marginLeft: '5px', fontSize: '15px' }}>\n          {network.label}\n        </Typography>\n      </Button>\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n        style={{\n          marginLeft: '12px',\n          color: 'white',\n        }}\n      >\n        {Object.keys(networks).map((n: string) => (\n          <MenuItem\n            key={n}\n            onClick={() => {\n              handleClose();\n              dispatch({\n                type: ActionType.CommonSetNetwork,\n                item: {\n                  network: networks[n],\n                  networkKey: n,\n                },\n              });\n            }}\n          >\n            <Typography>{networks[n].label}</Typography>\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n}\n\nfunction UserSelector() {\n  const { wallet } = useWallet();\n\n  return (\n    <Select\n      displayEmpty\n      renderValue={() => {\n        return (\n          <Typography style={{ overflow: 'hidden' }}>\n            {wallet.publicKey?.toString()}\n          </Typography>\n        );\n      }}\n      style={{\n        marginLeft: '12px',\n        width: '150px',\n      }}\n      onChange={e => {\n        if (e.target.value === 'disconnect') {\n          wallet.disconnect();\n        }\n      }}\n    >\n      <MenuItem value=\"disconnect\">\n        <IconButton color=\"inherit\">\n          <ExitToAppIcon />\n          <Typography style={{ marginLeft: '15px' }}>Disconnect</Typography>\n        </IconButton>\n      </MenuItem>\n    </Select>\n  );\n}\n\ntype WalletConnectButtonProps = {\n  style?: any;\n};\n\nexport function WalletConnectButton(\n  props: WalletConnectButtonProps,\n): ReactElement {\n  const { showDisconnect } = useSelector((state: StoreState) => {\n    return {\n      showDisconnect: state.common.isWalletConnected,\n    };\n  });\n  const dispatch = useDispatch();\n  const { wallet, lockupClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Wallet connection event listeners.\n  useEffect(() => {\n    wallet.on('disconnect', () => {\n      enqueueSnackbar('Disconnected from wallet', {\n        variant: 'info',\n        autoHideDuration: 2500,\n      });\n      dispatch({\n        type: ActionType.CommonWalletDidDisconnect,\n        item: {},\n      });\n      dispatch({\n        type: ActionType.CommonTriggerShutdown,\n        item: {},\n      });\n    });\n    wallet.on('connect', async () => {\n      dispatch({\n        type: ActionType.CommonWalletDidConnect,\n        item: {},\n      });\n      dispatch({\n        type: ActionType.CommonTriggerBootstrap,\n        item: {},\n      });\n    });\n  }, [wallet, dispatch, enqueueSnackbar, lockupClient.provider.connection]);\n\n  return showDisconnect ? (\n    <Button\n      style={props.style}\n      color=\"inherit\"\n      onClick={() => wallet.disconnect()}\n    >\n      <ExitToAppIcon />\n      <Typography style={{ marginLeft: '5px', fontSize: '15px' }}>\n        Disconnect\n      </Typography>\n    </Button>\n  ) : (\n    <Button\n      style={props.style}\n      color=\"inherit\"\n      onClick={() => wallet.connect()}\n    >\n      <PersonIcon />\n      <Typography style={{ marginLeft: '5px', fontSize: '15px' }}>\n        Connect wallet\n      </Typography>\n    </Button>\n  );\n}\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\n\nexport default function Footer() {\n  return (\n    <div\n      style={{\n        zIndex: 99,\n        position: 'fixed',\n        width: '100%',\n        bottom: 0,\n        textAlign: 'center',\n        height: '30px',\n        backgroundColor: '#fbfbfb',\n        borderTop: 'solid 1pt #ccc',\n        display: 'flex',\n        justifyContent: 'space-between',\n        paddingLeft: '10px',\n        paddingRight: '10px',\n      }}\n    >\n      <div style={{ marginLeft: 'auto', marginRight: 'auto', display: 'flex' }}>\n        <FooterButton\n          href={\n            'https://github.com/project-serum/anchor/blob/master/examples/lockup/docs/staking.md'\n          }\n          label={'Technical Documentation'}\n        />\n        <FooterButton\n          href={'https://github.com/project-serum/awesome-serum'}\n          label={'Developer Resources'}\n        />\n        <FooterButton\n          href={'https://discord.com/channels/739225212658122886'}\n          label={'Discord'}\n        />\n        <FooterButton href={'https://t.me/ProjectSerum'} label={'Telegram'} />\n        <FooterButton\n          href={'https://github.com/project-serum'}\n          label={'GitHub'}\n        />\n        <FooterButton\n          href={'https://solanabeach.io/'}\n          label={'Solana Network'}\n          isEnd={true}\n        />\n      </div>\n    </div>\n  );\n}\n\ntype FooterButtonProps = {\n  label: string;\n  href: string;\n  isEnd?: boolean;\n};\n\nfunction FooterButton(props: FooterButtonProps) {\n  const { label, href, isEnd } = props;\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        marginRight: isEnd ? '' : '15px',\n      }}\n    >\n      <Link href={href} target=\"_blank\" color=\"inherit\">\n        <Typography style={{ fontSize: '14px' }}>{label}</Typography>\n      </Link>\n    </div>\n  );\n}\n","import React, { useState, PropsWithChildren } from 'react';\nimport { useSelector } from 'react-redux';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Button from '@material-ui/core/Button';\nimport { State as StoreState, BootstrapState } from '../../store/reducer';\nimport Header from './Header';\nimport Footer from './Footer';\n\ntype Props = {};\n\nexport default function Layout(props: PropsWithChildren<Props>) {\n  const { isAppReady } = useSelector((state: StoreState) => {\n    return {\n      isAppReady:\n        state.common.isWalletConnected &&\n        state.common.bootstrapState === BootstrapState.Bootstrapped,\n    };\n  });\n  const [refresh, setRefresh] = useState(false);\n  return (\n    <div\n      style={{\n        display: 'flex',\n        minHeight: '100vh',\n        flexDirection: 'column',\n        backgroundColor: 'rgb(251, 251, 251)',\n      }}\n    >\n      <div\n        style={{\n          position: 'fixed',\n          width: '100%',\n          zIndex: 99,\n        }}\n      >\n        <RiskBar />\n        <Header isAppReady={isAppReady} />\n      </div>\n      <div\n        style={{\n          width: '100%',\n          marginTop: '94px',\n          flex: 1,\n          display: 'flex',\n          marginBottom: '30px', // Compensates for the fixed position footer.\n        }}\n      >\n        {window.localStorage.getItem('consent') ? (\n          !isAppReady ? (\n            <DisconnectedSplash />\n          ) : (\n            <div style={{ width: '100%' }}>{props.children}</div>\n          )\n        ) : (\n          <RiskDisclosureForm\n            onConsent={() => {\n              window.localStorage.setItem('consent', 'true');\n              setRefresh(!refresh);\n            }}\n          />\n        )}\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nfunction RiskBar() {\n  return (\n    <div\n      style={{\n        color: '#fff',\n        backgroundColor: 'rgb(39, 39, 39)',\n        height: '30px',\n        textAlign: 'center',\n      }}\n    >\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          flexDirection: 'column',\n          height: '100%',\n        }}\n      >\n        <Typography style={{ fontSize: '14px' }}>\n          Stake is unaudited software. Use at your own risk.\n        </Typography>\n      </div>\n    </div>\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\nfunction RiskDisclosureForm({ onConsent }: { onConsent: () => void }) {\n  return (\n    <div\n      style={{\n        flex: '1',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        textAlign: 'center',\n      }}\n    >\n      <div style={{ width: '100%', display: 'flex' }}>\n        <div\n          style={{ display: 'flex', marginLeft: 'auto', marginRight: 'auto' }}\n        >\n          <Typography\n            style={{ marginBottom: '16px', maxWidth: '1000px' }}\n            color=\"textSecondary\"\n            variant=\"h4\"\n          >\n            No statement or warranty is provided in relation to the utility of\n            this program, the safety of its code or its suitability for your\n            use, and by using it, you agree to bear any risk associated with\n            such potential vulnerabilities, including, but not limited to the\n            potential loss of tokens.\n          </Typography>\n        </div>\n      </div>\n      <div style={{ display: 'flex', marginLeft: 'auto', marginRight: 'auto' }}>\n        <Button variant=\"contained\" color=\"primary\" onClick={onConsent}>\n          I agree\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nfunction DisconnectedSplash() {\n  const classes = useStyles();\n  const { network, isDisconnected } = useSelector((state: StoreState) => {\n    return {\n      network: state.common.network,\n      isDisconnected: !state.common.isWalletConnected,\n    };\n  });\n  return (\n    <div\n      style={{\n        flex: '1',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        textAlign: 'center',\n      }}\n    >\n      <div style={{ width: '100%', display: 'flex' }}>\n        {isDisconnected ? (\n          <div\n            style={{ display: 'flex', marginLeft: 'auto', marginRight: 'auto' }}\n          >\n            <Typography\n              style={{ marginLeft: '24px' }}\n              color=\"textSecondary\"\n              variant=\"h4\"\n            >\n              Disconnected\n            </Typography>\n          </div>\n        ) : (\n          <div style={{ width: '100%' }}>\n            <div style={{ width: '100%' }} className={classes.root}>\n              <div>\n                <Typography variant=\"h5\">\n                  {`Connecting to ${network.label}...`}\n                </Typography>\n              </div>\n              <div\n                style={{\n                  marginLeft: 'auto',\n                  marginRight: 'auto',\n                  width: '300px',\n                }}\n              >\n                <LinearProgress style={{ width: '100%' }} />\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { TokenInfo } from '@solana/spl-token-registry';\nimport { useTokenInfos } from '../../utils/tokens';\nimport { State as StoreState, ProgramAccount } from '../../store/reducer';\nimport { Network } from '../../store/config';\nimport * as bootstrap from './BootstrapProvider';\nimport { useWallet } from './WalletProvider';\n\nexport function activeRegistrar(\n  state: StoreState,\n): { label: string; programAccount: any } {\n  const registrars = Object.keys(state.common.network.registrars)\n    .map(registrar => {\n      let entry: [string, ProgramAccount] = [\n        registrar,\n        {\n          publicKey: state.common.network.registrars[registrar],\n          account:\n            state.accounts[\n              state.common.network.registrars[registrar].toString()\n            ],\n        },\n      ];\n      return entry;\n    })\n    .filter(r => r[1].account !== undefined);\n  const selectedRegistrar: any = registrars\n    .filter(([r, acc]) => acc.publicKey.equals(state.registry.registrar))\n    .map(([r, acc]) => {\n      return {\n        label: r,\n        programAccount: acc,\n      };\n    })\n    .pop();\n\n  return selectedRegistrar;\n}\n\nexport default function RegistrarSelect() {\n  const { registryClient } = useWallet();\n  const { registrars, selectedRegistrar, accounts, network } = useSelector(\n    (state: StoreState) => {\n      const registrars = Object.keys(state.common.network.registrars)\n        .map(registrar => {\n          let entry: [string, ProgramAccount] = [\n            registrar,\n            {\n              publicKey: state.common.network.registrars[registrar],\n              account:\n                state.accounts[\n                  state.common.network.registrars[registrar].toString()\n                ],\n            },\n          ];\n          return entry;\n        })\n        .filter(r => r[1].account !== undefined);\n      const selectedRegistrar: any = registrars\n        .filter(([r, acc]) => acc.publicKey.equals(state.registry.registrar))\n        .map(([r, acc]) => {\n          return {\n            label: r,\n            programAccount: acc,\n          };\n        })\n        .pop();\n      return {\n        network: state.common.network,\n        accounts: state.accounts,\n        registrars,\n        selectedRegistrar,\n      };\n    },\n  );\n  const dispatch = useDispatch();\n  const tokenInfos = useTokenInfos();\n\n  return (\n    <Select\n      style={{ width: '294px', height: '36px' }}\n      variant={'outlined'}\n      fullWidth\n      value={selectedRegistrar.label}\n      onChange={async e => {\n        const registrar: ProgramAccount = registrars\n          .filter(([r, acc]) => r === e.target.value)\n          .map(([r, acc]) => acc)\n          .pop()!;\n\n        bootstrap.registrarSwitch(\n          registryClient,\n          accounts,\n          dispatch,\n          registrar!.publicKey, // New.\n          selectedRegistrar.programAccount.publicKey, // Old.\n        );\n      }}\n    >\n      {registrars.length === 0 ? (\n        <MenuItem value={'_loading'}>Loading registrars...</MenuItem>\n      ) : (\n        registrars.map(([label, registrar]) => {\n          return (\n            <MenuItem key={label} value={label}>\n              <div style={{ display: 'flex' }}>\n                <div\n                  style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'center',\n                  }}\n                >\n                  {getImage(tokenInfos.get(registrar.account.mint.toString()))}\n                </div>\n                <div\n                  style={{\n                    overflow: 'hidden',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'center',\n                  }}\n                >\n                  {`${registrarToDisplayLabel(registrar, network)}`}\n                </div>\n              </div>\n            </MenuItem>\n          );\n        })\n      )}\n    </Select>\n  );\n}\n\nfunction registrarToDisplayLabel(\n  registrar: ProgramAccount,\n  network: Network,\n): string {\n  const entry = Object.keys(network.registrars)\n    .filter(r => network.registrars[r].equals(registrar.publicKey))\n    .pop();\n  if (entry !== undefined) {\n    return entry.toUpperCase();\n  }\n  return registrar.publicKey.toString();\n}\n\nexport function getImage(token?: TokenInfo, style?: any) {\n  if (token) {\n    return (\n      <img\n        alt=\"Token Icon\"\n        style={style ?? { marginRight: '10px', height: '25px' }}\n        src={token.logoURI}\n      />\n    );\n  } else {\n    return <div style={{ marginLeft: '32px' }}></div>;\n  }\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { State as StoreState } from '../store/reducer';\nimport { toDisplay, toDisplayLabel } from '../utils/tokens';\n\nexport default function Me() {\n  const { member } = useSelector((state: StoreState) => {\n    return {\n      member: state.registry.member,\n    };\n  });\n\n  return (\n    <div style={{ display: 'flex', width: '100%' }}>\n      <div style={{ flex: 1, marginTop: '24px', marginBottom: '24px' }}>\n        {member && <MemberBalancesCard />}\n      </div>\n    </div>\n  );\n}\n\n// Assumes a member and all vaults is available in the store.\nfunction MemberBalancesCard() {\n  const {\n    mint,\n    registrar,\n    vault,\n    vaultStake,\n    vaultPw,\n    spt,\n    lockedVault,\n    lockedVaultStake,\n    lockedVaultPw,\n    lockedSpt,\n  } = useSelector((state: StoreState) => {\n    const member = state.accounts[state.registry.member!.toString()];\n    const registrar = state.accounts[state.registry.registrar.toString()];\n    return {\n      registrar,\n      mint: state.accounts[registrar.mint.toString()],\n      vault: state.accounts[member.balances.vault],\n      vaultStake: state.accounts[member.balances.vaultStake],\n      vaultPw: state.accounts[member.balances.vaultPw],\n      spt: state.accounts[member.balances.spt],\n      lockedVault: state.accounts[member.balancesLocked.vault],\n      lockedVaultStake: state.accounts[member.balancesLocked.vaultStake],\n      lockedVaultPw: state.accounts[member.balancesLocked.vaultPw],\n      lockedSpt: state.accounts[member.balancesLocked.spt],\n    };\n  });\n  const tables = [\n    {\n      title: 'Main Balances',\n      description: 'Balances deposited directly from the connected wallet.',\n      rows: [\n        {\n          token: toDisplayLabel(registrar.mint),\n          balance: toDisplay(vault.amount, mint.decimals),\n          stake: toDisplay(vaultStake.amount, mint.decimals),\n          pending: toDisplay(vaultPw.amount, mint.decimals),\n          spt: toDisplay(spt.amount, 0),\n        },\n      ],\n    },\n    {\n      title: 'Locked Balances',\n      description:\n        'Balances deposited from the lockup program. These funds are isolated from the Main Balances and may only be withdrawn back to the lockup program. At all times they are program controlled.',\n      rows: [\n        {\n          token: toDisplayLabel(registrar.mint),\n          balance: toDisplay(lockedVault.amount, mint.decimals),\n          stake: toDisplay(lockedVaultStake.amount, mint.decimals),\n          pending: toDisplay(lockedVaultPw.amount, mint.decimals),\n          spt: toDisplay(lockedSpt.amount, 0),\n        },\n      ],\n    },\n  ];\n  return (\n    <Card\n      style={{\n        marginBottom: '24px',\n      }}\n    >\n      <CardContent\n        style={{\n          marginTop: '24px',\n          position: 'relative',\n          paddingTop: 0,\n          paddingBottom: '16px',\n        }}\n      >\n        {tables.map(t => (\n          <BalanceTable\n            key={t.title}\n            title={t.title}\n            description={t.description}\n            rows={t.rows}\n          />\n        ))}\n      </CardContent>\n    </Card>\n  );\n}\n\ntype BalanceTableProps = {\n  title: string;\n  description: string;\n  rows:\n    | null\n    | {\n        token: string;\n        balance: string;\n        stake: string;\n        pending: string;\n        spt: string;\n      }[];\n};\n\nfunction BalanceTable(props: BalanceTableProps) {\n  const { title, rows, description } = props;\n  return (\n    <div style={{ marginBottom: '16px' }}>\n      <Typography style={{ fontWeight: 'bold' }}>{title}</Typography>\n      <Typography color=\"textSecondary\" style={{ fontSize: '14px' }}>\n        {description}\n      </Typography>\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Token</TableCell>\n              <TableCell align=\"right\">Available</TableCell>\n              <TableCell align=\"right\">Pending</TableCell>\n              <TableCell align=\"right\">Staked</TableCell>\n              <TableCell align=\"right\">Pool</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows === null ? (\n              <CircularProgress />\n            ) : (\n              rows.map(row => (\n                <TableRow key={row.token}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.token}\n                  </TableCell>\n                  <TableCell align=\"right\">{row.balance}</TableCell>\n                  <TableCell align=\"right\">{row.pending}</TableCell>\n                  <TableCell align=\"right\">{row.stake}</TableCell>\n                  <TableCell align=\"right\">{row.spt}</TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n","import { PublicKey, SYSVAR_CLOCK_PUBKEY } from '@solana/web3.js';\nimport * as anchor from '@project-serum/anchor';\nimport { simulateTransaction } from '@project-serum/common';\n\nexport async function vestingSigner(\n  programId: PublicKey,\n  vesting: PublicKey,\n): Promise<{ publicKey: PublicKey; nonce: number }> {\n  const [publicKey, nonce] = await anchor.web3.PublicKey.findProgramAddress(\n    [vesting.toBuffer()],\n    programId,\n  );\n  return {\n    publicKey,\n    nonce,\n  };\n}\n\n// Simulates the `availableForWithdrawal` instruction to funnel out a the\n// emitted log data (as a hack to get a return value).\nexport async function availableForWithdrawal(\n  lockupClient: anchor.Program,\n  vesting: PublicKey,\n): Promise<anchor.BN> {\n  let tx = lockupClient.transaction.availableForWithdrawal({\n    accounts: {\n      vesting,\n      clock: SYSVAR_CLOCK_PUBKEY,\n    },\n  });\n  tx.setSigners(...[lockupClient.provider.wallet.publicKey]);\n  let resp = await simulateTransaction(\n    lockupClient.provider.connection,\n    tx,\n    'recent',\n  );\n  if (resp.value.err) {\n    throw new Error(`RPC error: ${resp.value.err.toString()}`);\n  }\n  let log = resp.value.logs![1].slice('Program log: '.length);\n  return new anchor.BN(JSON.parse(log).result);\n}\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport BN from 'bn.js';\nimport { useSnackbar } from 'notistack';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport Tabs from '@material-ui/core/Tabs';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport * as serumCmn from '@project-serum/common';\nimport { TokenInstructions } from '@project-serum/serum';\nimport {\n  Account,\n  PublicKey,\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n} from '@solana/web3.js';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport { State as StoreState } from '../../store/reducer';\nimport OwnedTokenAccountsSelect from '../common/OwnedTokenAccountsSelect';\nimport * as notification from '../common/Notification';\nimport { fromDisplay } from '../../utils/tokens';\nimport { Network } from '../../store/config';\nimport { activeRegistrar } from '../common/RegistrarSelect';\n\nexport default function DropRewardButton() {\n  const [showDialog, setShowDialog] = useState(false);\n  return (\n    <>\n      <div onClick={() => setShowDialog(true)}>\n        <Button variant=\"contained\" color=\"secondary\">\n          Drop Rewards\n        </Button>\n      </div>\n      <DropRewardDialog\n        open={showDialog}\n        onClose={() => setShowDialog(false)}\n      />\n    </>\n  );\n}\n\nenum RewardTypeViewModel {\n  Unlocked,\n  Locked,\n}\n\ntype DropRewardsDialogProps = {\n  open: boolean;\n  onClose: () => void;\n};\n\nfunction DropRewardDialog(props: DropRewardsDialogProps) {\n  const { open, onClose } = props;\n  const { selectedRegistrar } = useSelector((state: StoreState) => {\n    return {\n      selectedRegistrar: activeRegistrar(state),\n    };\n  });\n  const [rewardTypeTab, setRewardTypeTab] = useState(\n    RewardTypeViewModel.Unlocked,\n  );\n\n  return (\n    <Dialog open={open} onClose={onClose} fullWidth maxWidth=\"md\">\n      <DialogTitle>\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n          <Typography variant=\"h4\" component=\"h2\">\n            {`Drop Rewards on ${selectedRegistrar.label.toUpperCase()} Stakers`}\n          </Typography>\n        </div>\n      </DialogTitle>\n      <DialogContent>\n        <Tabs value={rewardTypeTab} onChange={(_e, t) => setRewardTypeTab(t)}>\n          <Tab value={RewardTypeViewModel.Unlocked} label=\"Unlocked\" />\n          <Tab value={RewardTypeViewModel.Locked} label=\"Locked\" />\n        </Tabs>\n        {rewardTypeTab === RewardTypeViewModel.Unlocked && (\n          <DropUnlockedForm onClose={onClose} />\n        )}\n        {rewardTypeTab === RewardTypeViewModel.Locked && (\n          <DropLockedForm onClose={onClose} />\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n\ntype DropUnlockedFormProps = {\n  onClose: () => void;\n};\n\nfunction DropUnlockedForm(props: DropUnlockedFormProps) {\n  const { onClose } = props;\n  const snack = useSnackbar();\n  const { registryClient } = useWallet();\n  const { network, registrar, accounts } = useSelector((state: StoreState) => {\n    return {\n      network: state.common.network,\n      registrar: {\n        publicKey: state.registry.registrar,\n        account: state.accounts[state.registry.registrar.toString()],\n      },\n      accounts: state.accounts,\n    };\n  });\n\n  const [rewardDisplayAmount, setRewardDisplayAmount] = useState<null | number>(\n    null,\n  );\n  const [expiryTs, setExpiryTs] = useState<null | number>(null);\n  const [depositor, setDepositor] = useState<null | PublicKey>(null);\n  const [mint, setMint] = useState<null | string>(null);\n\n  const isSendEnabled =\n    mint !== null &&\n    depositor !== null &&\n    rewardDisplayAmount !== null &&\n    rewardDisplayAmount >= 100 &&\n    expiryTs !== null;\n\n  const sendUnlockedReward = async () => {\n    await notification.withTx(\n      snack,\n      'Dropping unlocked reward...',\n      'Unlocked reward dropped',\n      async () => {\n        let mintAccount = accounts[network.mints[mint!].toString()];\n        if (!mintAccount) {\n          mintAccount = await serumCmn.getMintInfo(\n            registryClient.provider,\n            network.mints[mint!],\n          );\n        }\n\n        const lockedRewardAmount = fromDisplay(\n          rewardDisplayAmount!,\n          mintAccount.decimals,\n        );\n        const rewardKind = { unlocked: {} };\n        const vendor = new Account();\n        const vendorVault = new Account();\n        const [vendorSigner, nonce] = await PublicKey.findProgramAddress(\n          [registrar.publicKey.toBuffer(), vendor.publicKey.toBuffer()],\n          registryClient.programId,\n        );\n        return await registryClient.rpc.dropReward(\n          rewardKind,\n          lockedRewardAmount,\n          new BN(expiryTs!),\n          registryClient.provider.wallet.publicKey,\n          nonce,\n          {\n            accounts: {\n              registrar: registrar.publicKey,\n              rewardEventQ: registrar.account.rewardEventQ,\n              poolMint: registrar.account.poolMint,\n              vendor: vendor.publicKey,\n              vendorVault: vendorVault.publicKey,\n              depositor,\n              depositorAuthority: registryClient.provider.wallet.publicKey,\n              tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n              clock: SYSVAR_CLOCK_PUBKEY,\n              rent: SYSVAR_RENT_PUBKEY,\n            },\n            signers: [vendorVault, vendor],\n            instructions: [\n              ...(await serumCmn.createTokenAccountInstrs(\n                registryClient.provider,\n                vendorVault.publicKey,\n                network.mints[mint!],\n                vendorSigner,\n              )),\n              await registryClient.account.rewardVendor.createInstruction(\n                vendor,\n              ),\n            ],\n          },\n        );\n      },\n    );\n    onClose();\n  };\n  const onClick = () => {\n    sendUnlockedReward().catch(err => {\n      console.error(err);\n      snack.enqueueSnackbar(\n        `Error dropping unlocked reward: ${err.toString()}`,\n        {\n          variant: 'error',\n        },\n      );\n    });\n  };\n  return (\n    <DropVendorForm\n      network={network}\n      mint={mint}\n      setMint={setMint}\n      setDepositor={setDepositor}\n      setRewardDisplayAmount={setRewardDisplayAmount}\n      expiryTs={expiryTs}\n      setExpiryTs={setExpiryTs}\n      onCancel={onClose}\n      onClick={onClick}\n      isSendEnabled={isSendEnabled}\n    />\n  );\n}\n\ntype DropLockedFormProps = DropUnlockedFormProps;\n\nfunction DropLockedForm(props: DropLockedFormProps) {\n  const { onClose } = props;\n  const snack = useSnackbar();\n  const { registryClient } = useWallet();\n  const { network, registrar, accounts } = useSelector((state: StoreState) => {\n    return {\n      network: state.common.network,\n      registrar: {\n        publicKey: state.registry.registrar,\n        account: state.accounts[state.registry.registrar.toString()],\n      },\n      accounts: state.accounts,\n    };\n  });\n\n  const [rewardDisplayAmount, setRewardDisplayAmount] = useState<null | number>(\n    null,\n  );\n  const [startTs, setStartTs] = useState<null | number>(null);\n  const [endTs, setEndTs] = useState<null | number>(null);\n  const [expiryTs, setExpiryTs] = useState<null | number>(null);\n  const [depositor, setDepositor] = useState<null | PublicKey>(null);\n  const [mint, setMint] = useState<null | string>(null);\n  const [periodCount, setPeriodCount] = useState(7);\n\n  const isSendEnabled =\n    startTs !== null &&\n    endTs !== null &&\n    mint !== null &&\n    depositor !== null &&\n    rewardDisplayAmount !== null &&\n    rewardDisplayAmount >= 100 &&\n    expiryTs !== null;\n\n  const sendLockedRewards = async () => {\n    await notification.withTx(\n      snack,\n      'Dropping locked reward...',\n      'Locked reward dropped',\n      async () => {\n        const rewardKind = {\n          locked: {\n            startTs: new BN(startTs!),\n            endTs: new BN(endTs!),\n            periodCount: new BN(periodCount),\n          },\n        };\n        const vendor = new Account();\n        const vendorVault = new Account();\n        const [vendorSigner, nonce] = await PublicKey.findProgramAddress(\n          [registrar.publicKey.toBuffer(), vendor.publicKey.toBuffer()],\n          registryClient.programId,\n        );\n        let mintAccount = accounts[network.mints[mint!].toString()];\n        const rewardAmount = fromDisplay(\n          rewardDisplayAmount!,\n          mintAccount.decimals,\n        );\n        return await registryClient.rpc.dropReward(\n          rewardKind,\n          rewardAmount,\n          new BN(expiryTs!),\n          registryClient.provider.wallet.publicKey,\n          nonce,\n          {\n            accounts: {\n              registrar: registrar.publicKey,\n              rewardEventQ: registrar.account.rewardEventQ,\n              poolMint: registrar.account.poolMint,\n              vendor: vendor.publicKey,\n              vendorVault: vendorVault.publicKey,\n              depositor,\n              depositorAuthority: registryClient.provider.wallet.publicKey,\n              tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n              clock: SYSVAR_CLOCK_PUBKEY,\n              rent: SYSVAR_RENT_PUBKEY,\n            },\n            signers: [vendorVault, vendor],\n            instructions: [\n              ...(await serumCmn.createTokenAccountInstrs(\n                registryClient.provider,\n                vendorVault.publicKey,\n                network.mints[mint!],\n                vendorSigner,\n              )),\n              await registryClient.account.rewardVendor.createInstruction(\n                vendor,\n              ),\n            ],\n          },\n        );\n      },\n    );\n    onClose();\n  };\n\n  const onClick = () => {\n    sendLockedRewards().catch(err => {\n      snack.enqueueSnackbar(`Error dropping locked reward: ${err.toString()}`, {\n        variant: 'error',\n      });\n    });\n  };\n\n  return (\n    <DropVendorForm\n      network={network}\n      mint={mint}\n      setMint={setMint}\n      setDepositor={setDepositor}\n      setRewardDisplayAmount={setRewardDisplayAmount}\n      setStartTs={setStartTs}\n      setEndTs={setEndTs}\n      periodCount={periodCount}\n      setPeriodCount={setPeriodCount}\n      expiryTs={expiryTs}\n      setExpiryTs={setExpiryTs}\n      onCancel={onClose}\n      onClick={onClick}\n      isSendEnabled={isSendEnabled}\n    />\n  );\n}\n\ntype DropVendorFormProps = {\n  network: Network;\n  mint: string | null;\n  setMint: (mintLabel: string) => void;\n  setDepositor: (pk: PublicKey) => void;\n  setRewardDisplayAmount: (n: number) => void;\n  setStartTs?: (n: number) => void;\n  setEndTs?: (n: number) => void;\n  periodCount?: number;\n  setPeriodCount?: (p: number) => void;\n  expiryTs: number | null;\n  setExpiryTs: (ts: number) => void;\n  onCancel: () => void;\n  onClick: () => void;\n  isSendEnabled: boolean;\n};\n\nfunction DropVendorForm(props: DropVendorFormProps) {\n  const {\n    network,\n    mint,\n    setDepositor,\n    setMint,\n    setRewardDisplayAmount,\n    setStartTs,\n    setEndTs,\n    periodCount,\n    setPeriodCount,\n    expiryTs,\n    setExpiryTs,\n    onCancel,\n    onClick,\n    isSendEnabled,\n  } = props;\n  const mintOptions: { label: string; publicKey: PublicKey }[] = Object.keys(\n    network.mints,\n  ).map(label => {\n    return {\n      label,\n      publicKey: network.mints[label],\n    };\n  });\n\n  return (\n    <>\n      <div>\n        <div style={{ display: 'flex', marginTop: '10px' }}>\n          <div style={{ flex: 1 }}>\n            <OwnedTokenAccountsSelect\n              style={{ height: '100%' }}\n              mint={mint === null ? undefined : network.mints[mint]}\n              onChange={(f: PublicKey) => setDepositor(f)}\n            />\n            <FormHelperText>Account to send from</FormHelperText>\n          </div>\n          <div>\n            <FormControl\n              variant=\"outlined\"\n              style={{ width: '200px', marginLeft: '10px', marginTop: '10px' }}\n            >\n              <InputLabel>Mint</InputLabel>\n              <Select\n                value={mint}\n                onChange={e => setMint(e.target.value as string)}\n                label=\"Mint\"\n              >\n                {mintOptions.map(m => (\n                  <MenuItem value={m.label}>{m.label.toUpperCase()}</MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </div>\n          <div>\n            <TextField\n              style={{ marginLeft: '10px', marginTop: '10px' }}\n              id=\"outlined-number\"\n              label=\"Amount\"\n              type=\"number\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n              variant=\"outlined\"\n              onChange={e =>\n                setRewardDisplayAmount(parseFloat(e.target.value) as number)\n              }\n              InputProps={{ inputProps: { min: 0 } }}\n            />\n          </div>\n        </div>\n        {setEndTs !== undefined && setStartTs !== undefined && (\n          <>\n            <div style={{ display: 'flex', marginTop: '37px' }}>\n              <div style={{ flex: 1 }}>\n                <TextField\n                  fullWidth\n                  label=\"Start date\"\n                  type=\"datetime-local\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  onChange={e => {\n                    const d = new Date(e.target.value);\n                    setStartTs(d.getTime() / 1000);\n                  }}\n                />\n                <FormHelperText>Date vesting begins</FormHelperText>\n              </div>\n            </div>\n            <div style={{ flex: 1, marginTop: '20px' }}>\n              <TextField\n                fullWidth\n                label=\"End date\"\n                type=\"datetime-local\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                onChange={e => {\n                  const d = new Date(e.target.value);\n                  setEndTs(d.getTime() / 1000);\n                }}\n              />\n              <FormHelperText>\n                Date the vesting account is fully vested\n              </FormHelperText>\n            </div>\n            <div>\n              <FormControl fullWidth>\n                <TextField\n                  style={{ marginTop: '37px' }}\n                  id=\"outlined-number\"\n                  label=\"Period Count\"\n                  type=\"number\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  variant=\"outlined\"\n                  value={periodCount}\n                  onChange={e =>\n                    setPeriodCount!(parseInt(e.target.value) as number)\n                  }\n                  InputProps={{ inputProps: { min: 1 } }}\n                />\n              </FormControl>\n            </div>\n          </>\n        )}\n        <div style={{ marginTop: '37px', display: 'flex' }}>\n          <div\n            style={{\n              flex: 1,\n              height: '100%',\n              marginRight: '10px',\n            }}\n          >\n            <TextField\n              fullWidth\n              label=\"Expiry date\"\n              type=\"datetime-local\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n              onChange={e => {\n                const d = new Date(e.target.value);\n                setExpiryTs(d.getTime() / 1000);\n              }}\n            />\n            <FormHelperText>\n              Date after which the account owner dropping rewards can withdraw\n              all unclaimed rewards.\n            </FormHelperText>\n          </div>\n          <div style={{ marginTop: '26px' }}>\n            <TextField\n              style={{ height: '100%' }}\n              disabled\n              placeholder=\"Expiry Unix timestamp\"\n              fullWidth\n              value={expiryTs}\n            />\n          </div>\n        </div>\n      </div>\n      <DialogActions>\n        <Button onClick={onCancel}>Cancel</Button>\n        <Button\n          onClick={onClick}\n          type=\"submit\"\n          color=\"primary\"\n          disabled={!isSendEnabled}\n        >\n          Send\n        </Button>\n      </DialogActions>\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport BN from 'bn.js';\nimport styled from 'styled-components';\nimport LockIcon from '@material-ui/icons/Lock';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { TransitionProps } from '@material-ui/core/transitions';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport Slide from '@material-ui/core/Slide';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport { Account, SYSVAR_RENT_PUBKEY, PublicKey, SystemProgram } from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { getTokenAccount } from '@project-serum/common';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport OwnedTokenAccountsSelect from '../../components/common/OwnedTokenAccountsSelect';\nimport { ViewTransactionOnExplorerButton } from '../../components/common/Notification';\nimport RegistrarSelect from './RegistrarSelect';\nimport { State as StoreState, ProgramAccount } from '../../store/reducer';\nimport { ActionType } from '../../store/actions';\nimport * as bootstrap from './BootstrapProvider';\nimport Me from '../Me';\nimport {\n  memberSigner,\n  memberSeed,\n  createBalanceSandbox,\n} from '../../utils/registry';\nimport { vestingSigner } from '../../utils/lockup';\nimport Stake from '../Stake';\nimport Rewards from '../rewards/Rewards';\nimport VestingAccountsSelect from './VestingAccountsSelect';\nimport { toDisplayLabel, fromDisplay } from '../../utils/tokens';\n\nenum TabModel {\n  Me,\n  Stake,\n  Rewards,\n  Lockup,\n}\n\nexport default function MyNode() {\n  const [tab, setTab] = useState(TabModel.Me);\n  return (\n    <div>\n      <MyNodeBanner setTab={setTab} />\n      <Container fixed maxWidth=\"md\" style={{ flex: 1, display: 'flex' }}>\n        {tab === TabModel.Me && <Me />}\n        {tab === TabModel.Stake && <Stake />}\n        {tab === TabModel.Rewards && <Rewards />}\n      </Container>\n    </div>\n  );\n}\n\ntype MyNodeBannerProps = {\n  setTab: (t: TabModel) => void;\n};\n\nfunction MyNodeBanner(props: MyNodeBannerProps) {\n  const [tab, setTab] = useState(TabModel.Me);\n  const { member, registrar, registrarAccount } = useSelector(\n    (state: StoreState) => {\n      return {\n        member: state.registry.member,\n        registrar: state.registry.registrar,\n        registrarAccount: state.accounts[state.registry.registrar.toString()],\n      };\n    },\n  );\n  const [showDepositDialog, setShowDepositDialog] = useState(false);\n  const [showWithdrawDialog, setShowWithdrawDialog] = useState(false);\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const { wallet, registryClient } = useWallet();\n  const dispatch = useDispatch();\n\n  const createStakeAccount = async () => {\n    enqueueSnackbar('Creating stake account', {\n      variant: 'info',\n    });\n    const seed = await memberSeed(registrar);\n    const member = await PublicKey.createWithSeed(\n      wallet.publicKey!,\n      seed,\n      registryClient.programId,\n    );\n    const { publicKey, nonce } = await memberSigner(\n      registryClient.programId,\n      registrar,\n      member,\n    );\n    const memberSignerPublicKey = publicKey;\n\n    const [mainTx, balances] = await createBalanceSandbox(\n      registryClient.provider,\n      registrarAccount,\n      memberSignerPublicKey,\n    );\n    const [lockedTx, balancesLocked] = await createBalanceSandbox(\n      registryClient.provider,\n      registrarAccount,\n      memberSignerPublicKey,\n    );\n    const tx = registryClient.transaction.createMember(nonce, {\n      accounts: {\n        registrar: registrar,\n        member: member,\n        beneficiary: wallet.publicKey,\n        memberSigner: memberSignerPublicKey,\n        balances,\n        balancesLocked,\n        tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n        rent: SYSVAR_RENT_PUBKEY,\n      },\n      instructions: [\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: wallet.publicKey!,\n          newAccountPubkey: member,\n          basePubkey: wallet.publicKey!,\n          seed,\n          lamports: await registryClient.provider.connection.getMinimumBalanceForRentExemption(\n            registryClient.account.member.size,\n          ),\n          space: registryClient.account.member.size,\n          programId: registryClient.programId,\n        }),\n      ],\n    });\n    const signers: Account[] = [];\n    const allTxs = [mainTx, lockedTx, { tx, signers }];\n    // @ts-ignore\n    let txSigs = await registryClient.provider.sendAll(allTxs, {\n      commitment: 'recent',\n      preflightCommitment: 'recent',\n      skipPreflight: true,\n    });\n    console.log('Accounts created with transactions:', txSigs);\n\n    const memberAccount = await registryClient.account.member(member);\n    const memberProgramAccount = {\n      publicKey: member,\n      account: memberAccount,\n    };\n    // Add the new member to the store.\n    dispatch({\n      type: ActionType.AccountAdd,\n      item: {\n        account: memberProgramAccount,\n      },\n    });\n\n    // Populate the store with all of the member's accounts.\n    await bootstrap.fetchAndDispatchMemberAccounts(\n      memberProgramAccount,\n      dispatch,\n      registryClient.provider.connection,\n    );\n\n    // Subscribe to any updates to the member.\n    bootstrap.subscribeMember(memberProgramAccount, registryClient, dispatch);\n\n    // Tell the UI that our member is ready.\n    dispatch({\n      type: ActionType.RegistrySetMember,\n      item: {\n        member,\n      },\n    });\n\n    closeSnackbar();\n    enqueueSnackbar(`Stake account created ${member.toString()}`, {\n      variant: 'success',\n    });\n  };\n\n  const HoverSpan = styled.span`\n    :hover {\n      cursor: pointer;\n    }\n  `;\n\n  return (\n    <>\n      <div\n        style={{\n          backgroundColor: '#fff',\n          paddingTop: '24px',\n          borderBottom: 'solid 1pt #ccc',\n        }}\n      >\n        <Container\n          fixed\n          maxWidth=\"md\"\n          style={{\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'space-between',\n          }}\n        >\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <div>\n              <Typography variant=\"h4\" style={{ marginBottom: '10px' }}>\n                My Stake\n              </Typography>\n            </div>\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'center',\n                flexDirection: 'column',\n              }}\n            >\n              <RegistrarSelect />\n            </div>\n          </div>\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n            }}\n          >\n            <div>\n              <Typography>\n                {member !== undefined ? (\n                  member.toString()\n                ) : (\n                  <>\n                    Account not found. Please{' '}\n                    <HoverSpan\n                      onClick={() => {\n                        createStakeAccount().catch(err => {\n                          console.error(err);\n                          enqueueSnackbar(\n                            `Error creating stake account: ${err.toString()}`,\n                            {\n                              variant: 'error',\n                            },\n                          );\n                        });\n                      }}\n                      style={{\n                        color: 'black',\n                        fontWeight: 'bold',\n                        textDecoration: 'underline',\n                      }}\n                    >\n                      create\n                    </HoverSpan>{' '}\n                    a stake account.\n                  </>\n                )}\n              </Typography>\n            </div>\n            <div>\n              <div>\n                <Button\n                  disabled={member === undefined}\n                  onClick={() => setShowDepositDialog(true)}\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  style={{ marginRight: '10px' }}\n                >\n                  <ArrowDownwardIcon style={{ fontSize: '20px' }} />\n                  <Typography style={{ marginLeft: '5px', marginRight: '5px' }}>\n                    Deposit\n                  </Typography>\n                </Button>\n                <Button\n                  disabled={member === undefined}\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  onClick={() => setShowWithdrawDialog(true)}\n                >\n                  <ArrowUpwardIcon style={{ fontSize: '20px' }} />\n                  <Typography style={{ marginLeft: '5px', marginRight: '5px' }}>\n                    Withdraw\n                  </Typography>\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Container>\n        <div\n          style={{\n            maxWidth: '960px',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            paddingLeft: '24px',\n            paddingRight: '24px',\n            marginTop: '10px',\n          }}\n        >\n          <Tabs\n            value={tab}\n            onChange={(_e, t) => {\n              setTab(t);\n              props.setTab(t);\n            }}\n          >\n            <Tab value={TabModel.Me} label=\"Me\" />\n            <Tab value={TabModel.Stake} label=\"Stake\" />\n            <Tab value={TabModel.Rewards} label=\"Rewards\" />\n          </Tabs>\n        </div>\n      </div>\n      {member !== undefined && (\n        <>\n          <DepositDialog\n            open={showDepositDialog}\n            onClose={() => setShowDepositDialog(false)}\n          />\n          <WithdrawDialog\n            open={showWithdrawDialog}\n            onClose={() => setShowWithdrawDialog(false)}\n          />\n        </>\n      )}\n    </>\n  );\n}\n\ntype DepositDialogProps = {\n  open: boolean;\n  onClose: () => void;\n};\n\nfunction DepositDialog(props: DepositDialogProps) {\n  const { open, onClose } = props;\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const { registryClient, lockupClient } = useWallet();\n  const dispatch = useDispatch();\n  const {\n    registrar,\n    member,\n    memberAccount,\n    mintAccount,\n    accounts,\n  } = useSelector((state: StoreState) => {\n    let memberAccount = undefined;\n    if (state.registry.member) {\n      memberAccount = state.accounts[state.registry.member.toString()];\n    }\n    const registrarAccount =\n      state.accounts[state.registry.registrar.toString()];\n    const registrar: ProgramAccount = {\n      publicKey: state.registry.registrar,\n      account: registrarAccount,\n    };\n    return {\n      registrar,\n      memberAccount,\n      member: state.registry.member,\n      mintAccount: state.accounts[registrar.account.mint.toString()],\n      accounts: state.accounts,\n    };\n  });\n  return (\n    <TransferDialog\n      deposit={true}\n      title={'Deposit'}\n      contextText={'Select the amount to deposit'}\n      open={open}\n      onClose={onClose}\n      onTransfer={async (\n        from: PublicKey,\n        displayAmount: number,\n        isLocked: boolean,\n      ) => {\n        const amount = fromDisplay(displayAmount, mintAccount.decimals);\n        enqueueSnackbar(\n          `Depositing ${displayAmount} ${toDisplayLabel(\n            registrar.account.mint,\n          )} from ${from.toString()}`,\n          {\n            variant: 'info',\n          },\n        );\n        const tx = await (async () => {\n          if (isLocked) {\n            const relayData = registryClient.coder.instruction.encode(\n              'deposit_locked',\n              {\n                amount,\n              },\n            );\n            const vesting = accounts[from.toString()];\n            const _memberSigner = (\n              await memberSigner(\n                registryClient.programId,\n                registrar.publicKey,\n                member!,\n              )\n            ).publicKey;\n            const _vestingSigner = (\n              await vestingSigner(lockupClient.programId, from)\n            ).publicKey;\n            const relayAccounts = [\n              {\n                // @ts-ignore\n                pubkey: await registryClient.state.address(),\n                isWritable: false,\n                isSigner: false,\n              },\n              {\n                pubkey: registrar.publicKey,\n                isWritable: false,\n                isSigner: false,\n              },\n              { pubkey: member!, isWritable: false, isSigner: false },\n              {\n                pubkey: registryClient.provider.wallet.publicKey,\n                isWritable: false,\n                isSigner: true,\n              },\n            ];\n            const tx = await lockupClient.rpc.whitelistWithdraw(\n              relayData,\n              amount,\n              {\n                accounts: {\n                  transfer: {\n                    // @ts-ignore\n                    lockup: await lockupClient.state.address(),\n                    beneficiary: registryClient.provider.wallet.publicKey,\n                    whitelistedProgram: registryClient.programId,\n                    vesting: from,\n                    vault: vesting.vault,\n                    vestingSigner: _vestingSigner,\n                    tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n                    whitelistedProgramVault: memberAccount.balancesLocked.vault,\n                    whitelistedProgramVaultAuthority: _memberSigner,\n                  },\n                },\n                remainingAccounts: relayAccounts,\n              },\n            );\n\n            // Update the store with the updated account.\n            const updatedVestingAccount = await lockupClient.account.vesting(\n              from,\n            );\n            dispatch({\n              type: ActionType.LockupUpdateVesting,\n              item: {\n                vesting: {\n                  publicKey: from,\n                  account: updatedVestingAccount,\n                },\n              },\n            });\n\n            return tx;\n          } else {\n            const tx = await registryClient.rpc.deposit(amount, {\n              accounts: {\n                depositor: from,\n                depositorAuthority: registryClient.provider.wallet.publicKey,\n                tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n                vault: memberAccount.balances.vault,\n                beneficiary: registryClient.provider.wallet.publicKey,\n                member: member,\n              },\n            });\n\n            const tokenAccount = await getTokenAccount(\n              registryClient.provider,\n              from,\n            );\n            dispatch({\n              type: ActionType.CommonOwnedTokenAccountsUpdate,\n              item: {\n                account: {\n                  publicKey: from,\n                  account: tokenAccount,\n                },\n              },\n            });\n\n            return tx;\n          }\n        })();\n        closeSnackbar();\n        enqueueSnackbar(`Deposit complete`, {\n          variant: 'success',\n          action: <ViewTransactionOnExplorerButton signature={tx as string} />,\n        });\n        onClose();\n      }}\n    />\n  );\n}\n\ntype WithdrawDialogProps = DepositDialogProps;\n\nfunction WithdrawDialog(props: WithdrawDialogProps) {\n  const { open, onClose } = props;\n  const { registryClient, lockupClient } = useWallet();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const dispatch = useDispatch();\n  const {\n    registrar,\n    registrarAccount,\n    member,\n    memberAccount,\n    mintAccount,\n    accounts,\n  } = useSelector((state: StoreState) => {\n    let memberAccount = undefined;\n    if (state.registry.member) {\n      memberAccount = state.accounts[state.registry.member.toString()];\n    }\n    const registrarAccount =\n      state.accounts[state.registry.registrar.toString()];\n    return {\n      registrar: state.registry.registrar,\n      registrarAccount,\n      member: state.registry.member,\n      memberAccount,\n      mintAccount: state.accounts[registrarAccount.mint.toString()],\n      accounts: state.accounts,\n    };\n  });\n  return (\n    <TransferDialog\n      title={'Withdraw'}\n      contextText={'Select the amount to withdraw'}\n      open={open}\n      onClose={onClose}\n      onTransfer={async (\n        from: PublicKey,\n        displayAmount: number,\n        isLocked: boolean,\n      ) => {\n        const amount = fromDisplay(displayAmount, mintAccount.decimals);\n        enqueueSnackbar(\n          `Withdrawing ${displayAmount} ${toDisplayLabel(\n            registrarAccount.mint,\n          )} to ${from.toString()}`,\n          {\n            variant: 'info',\n          },\n        );\n        const tx = await (async () => {\n          const _memberSigner = await memberSigner(\n            registryClient.programId,\n            registrar,\n            member!,\n          );\n          if (isLocked) {\n            const relayData = registryClient.coder.instruction.encode(\n              'withdraw_locked',\n              {\n                amount,\n              },\n            );\n            const vesting = accounts[from.toString()];\n            const _memberSigner = (\n              await memberSigner(registryClient.programId, registrar, member!)\n            ).publicKey;\n            const _vestingSigner = (\n              await vestingSigner(lockupClient.programId, from)\n            ).publicKey;\n            const relayAccounts = [\n              {\n                // @ts-ignore\n                pubkey: await registryClient.state.address(),\n                isWritable: false,\n                isSigner: false,\n              },\n              { pubkey: registrar, isWritable: false, isSigner: false },\n              { pubkey: member!, isWritable: false, isSigner: false },\n              {\n                pubkey: registryClient.provider.wallet.publicKey,\n                isWritable: false,\n                isSigner: true,\n              },\n            ];\n            const tx = await lockupClient.rpc.whitelistDeposit(relayData, {\n              accounts: {\n                transfer: {\n                  // @ts-ignore\n                  lockup: await lockupClient.state.address(),\n                  beneficiary: registryClient.provider.wallet.publicKey,\n                  whitelistedProgram: registryClient.programId,\n                  vesting: from,\n                  vault: vesting.vault,\n                  vestingSigner: _vestingSigner,\n                  tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n                  whitelistedProgramVault: memberAccount.balancesLocked.vault,\n                  whitelistedProgramVaultAuthority: _memberSigner,\n                },\n              },\n              remainingAccounts: relayAccounts,\n            });\n\n            // Update the store with the updated account.\n            const updatedVestingAccount = await lockupClient.account.vesting(\n              from,\n            );\n            dispatch({\n              type: ActionType.LockupUpdateVesting,\n              item: {\n                vesting: {\n                  publicKey: from,\n                  account: updatedVestingAccount,\n                },\n              },\n            });\n\n            return tx;\n          } else {\n            const tx = await registryClient.rpc.withdraw(amount, {\n              accounts: {\n                registrar,\n                member,\n                beneficiary: registryClient.provider.wallet.publicKey,\n                vault: memberAccount.balances.vault,\n                memberSigner: _memberSigner.publicKey,\n                depositor: from,\n                tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n              },\n            });\n\n            const tokenAccount = await getTokenAccount(\n              registryClient.provider,\n              from,\n            );\n            dispatch({\n              type: ActionType.CommonOwnedTokenAccountsUpdate,\n              item: {\n                account: {\n                  publicKey: from,\n                  account: tokenAccount,\n                },\n              },\n            });\n\n            return tx;\n          }\n        })();\n\n        closeSnackbar();\n        enqueueSnackbar(`Withdraw complete`, {\n          variant: 'success',\n          action: <ViewTransactionOnExplorerButton signature={tx as string} />,\n        });\n        onClose();\n      }}\n    />\n  );\n}\n\ntype TransferDialogProps = {\n  title: string;\n  contextText: string;\n  open: boolean;\n  deposit?: boolean;\n  onClose: () => void;\n  onTransfer: (\n    from: PublicKey,\n    amount: number,\n    isLocked: boolean,\n  ) => Promise<void>;\n};\n\nfunction TransferDialog(props: TransferDialogProps) {\n  const { mint, mintAccount } = useSelector((state: StoreState) => {\n    const registrar = state.accounts[state.registry.registrar.toString()];\n    const mint = registrar ? registrar.mint : undefined;\n    return {\n      mint,\n      mintAccount: state.accounts[registrar.mint.toString()],\n    };\n  });\n  const { enqueueSnackbar } = useSnackbar();\n  const { open, onClose, onTransfer, title, contextText, deposit } = props;\n  const [displayAmount, setDisplayAmount] = useState<null | number>(null);\n  const [from, setFrom] = useState<null | PublicKey>(null);\n  const [vesting, setVesting] = useState<null | PublicKey>(null);\n  const [maxDisplayAmount, setMaxDisplayAmount] = useState<null | number>(null);\n  const [isLocked, setIsLocked] = useState(false);\n  const submitBtnDisabled =\n    (isLocked ? !vesting : !from) ||\n    !displayAmount ||\n    !maxDisplayAmount ||\n    displayAmount > maxDisplayAmount;\n\n  return (\n    <div>\n      <Dialog\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={onClose}\n        fullWidth\n      >\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n          <DialogTitle>{title}</DialogTitle>\n          <div style={{ display: 'flex', paddingRight: '24px' }}>\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'center',\n                flexDirection: 'column',\n              }}\n            >\n              <LockIcon />\n            </div>\n            <FormControlLabel\n              style={{ marginLeft: '0px', marginRight: '0px' }}\n              control={\n                <Switch\n                  checked={isLocked}\n                  onChange={() => setIsLocked(!isLocked)}\n                />\n              }\n              label=\"\"\n            />\n          </div>\n        </div>\n        <DialogContent>\n          <div style={{ display: 'flex' }}>\n            <div style={{ flex: 1 }}>\n              <TextField\n                style={{ width: '100%' }}\n                id=\"outlined-number\"\n                label=\"Amount\"\n                type=\"number\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant=\"outlined\"\n                onChange={e =>\n                  setDisplayAmount(parseFloat(e.target.value) as number)\n                }\n                InputProps={{\n                  inputProps: { min: 0, max: maxDisplayAmount ?? 0 },\n                }}\n              />\n              <FormHelperText>{contextText}</FormHelperText>\n            </div>\n          </div>\n          <FormControl fullWidth>\n            {!isLocked ? (\n              <>\n                <OwnedTokenAccountsSelect\n                  variant=\"outlined\"\n                  decimals={mintAccount.decimals}\n                  mint={mint}\n                  onChange={(f: PublicKey, _maxDisplayAmount: BN) => {\n                    setFrom(f);\n                    // TODO: set an actual limit for the withdrawal UI (i.e.\n                    //       what's currently in the vault). Currently not\n                    //       done since we dont' have websocket connections\n                    //       for each of the users accounts. However we\n                    //       still use the \"max\" amount for display vesting\n                    //       accounts.\n                    setMaxDisplayAmount(2 ** 53);\n                  }}\n                />\n                <FormHelperText>\n                  Token account to transfer to/from\n                </FormHelperText>\n              </>\n            ) : (\n              <>\n                <VestingAccountsSelect\n                  variant=\"outlined\"\n                  mint={mint}\n                  decimals={mintAccount.decimals}\n                  deposit={deposit}\n                  onChange={(v: PublicKey, maxDisplayAmount: BN) => {\n                    setVesting(v);\n                    setMaxDisplayAmount(maxDisplayAmount.toNumber());\n                  }}\n                />\n                <FormHelperText>\n                  Vesting account to transfer to/from your <b>locked</b>{' '}\n                  balances\n                </FormHelperText>\n              </>\n            )}\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            //@ts-ignore\n            onClick={() => {\n              onTransfer(\n                isLocked ? vesting! : from!,\n                displayAmount!,\n                isLocked,\n              ).catch(err => {\n                console.error(err);\n                enqueueSnackbar(`Error transferring funds: ${err.toString()}`, {\n                  variant: 'error',\n                });\n              });\n            }}\n            color=\"primary\"\n            disabled={submitBtnDisabled}\n          >\n            {title}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nconst Transition = React.forwardRef(function Transition(\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\n  ref: React.Ref<unknown>,\n) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport Button from '@material-ui/core/Button';\nimport {\n  Account,\n  PublicKey,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n} from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { createTokenAccountInstrs } from '@project-serum/common';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport * as notification from '../common/Notification';\nimport OwnedTokenAccountsSelect from '../common/OwnedTokenAccountsSelect';\nimport { RewardListItemViewModel } from './RewardsList';\nimport { ActionType } from '../../store/actions';\nimport { State as StoreState } from '../../store/reducer';\nimport { vendorSigner } from '../../utils/registry';\nimport { vestingSigner } from '../../utils/lockup';\n\ntype ClaimRewardButtonProps = {\n  rli: RewardListItemViewModel;\n};\n\nexport default function ClaimRewardButton(props: ClaimRewardButtonProps) {\n  const { registryClient, lockupClient } = useWallet();\n  const { member, registrar } = useSelector((state: StoreState) => {\n    const registrar = {\n      publicKey: state.registry.registrar,\n      account: state.accounts[state.registry.registrar.toString()],\n    };\n    const member = state.registry.member\n      ? {\n          publicKey: state.registry.member,\n          account: state.accounts[state.registry.member.toString()],\n        }\n      : undefined;\n    return {\n      registrar,\n      member,\n    };\n  });\n  const { rli } = props;\n  const dispatch = useDispatch();\n  const snack = useSnackbar();\n  const [token, setToken] = useState<null | PublicKey>(null);\n\n  // On click.\n  const clickHandler = async (): Promise<void> => {\n    notification.withTx(\n      snack,\n      `Processing vendor reward ${rli!.vendor!.publicKey.toString()}`,\n      'Reward processed',\n      async () => {\n        const vendor = await registryClient.account.rewardVendor(\n          rli.vendor!.publicKey,\n        );\n        const _vendorSigner = await vendorSigner(\n          registryClient.programId,\n          registrar.publicKey,\n          rli.vendor!.publicKey,\n        );\n        if (rli!.reward.locked) {\n          const vendoredVesting = new Account();\n          const vendoredVestingVault = new Account();\n          const vendoredVestingSigner = await vestingSigner(\n            lockupClient.programId,\n            vendoredVesting.publicKey,\n          );\n          const remainingAccounts = lockupClient.instruction.createVesting\n            .accounts({\n              vesting: vendoredVesting.publicKey,\n              vault: vendoredVestingVault.publicKey,\n              depositor: vendor.vault,\n              depositorAuthority: _vendorSigner.publicKey,\n              tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n              rent: SYSVAR_RENT_PUBKEY,\n              clock: SYSVAR_CLOCK_PUBKEY,\n            })\n            // Change the signer status on the vendor signer since it's signed by the program, not the\n            // client.\n            .map((meta: any) =>\n              meta.pubkey.equals(_vendorSigner.publicKey)\n                ? { ...meta, isSigner: false }\n                : meta,\n            );\n          const tx = await registryClient.rpc.claimRewardLocked(\n            vendoredVestingSigner.nonce,\n            {\n              accounts: {\n                // @ts-ignore\n                registry: await registryClient.state.address(),\n                lockupProgram: lockupClient.programId,\n                cmn: {\n                  registrar: registrar.publicKey,\n                  member: member!.publicKey,\n                  beneficiary: registryClient.provider.wallet.publicKey,\n                  balances: member!.account.balances,\n                  balancesLocked: member!.account.balancesLocked,\n                  vendor: rli.vendor!.publicKey,\n                  vault: rli.vendor!.account.vault,\n                  vendorSigner: _vendorSigner.publicKey,\n                  tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n                  clock: SYSVAR_CLOCK_PUBKEY,\n                },\n              },\n              remainingAccounts,\n              signers: [vendoredVesting, vendoredVestingVault],\n              instructions: [\n                await lockupClient.account.vesting.createInstruction(\n                  vendoredVesting,\n                ),\n                ...(await createTokenAccountInstrs(\n                  registryClient.provider,\n                  vendoredVestingVault.publicKey,\n                  rli.vendor!.account.mint,\n                  vendoredVestingSigner.publicKey,\n                )),\n              ],\n            },\n          );\n          // Refetch the vesting accounts to update the UI with the new reward.\n          const vestingAccounts = await lockupClient.account.vesting.all(\n            registryClient.provider.wallet.publicKey.toBuffer(),\n          );\n          vestingAccounts.forEach(account => {\n            dispatch({\n              type: ActionType.AccountAdd,\n              item: {\n                account,\n              },\n            });\n          });\n          dispatch({\n            type: ActionType.LockupSetVestings,\n            item: {\n              vestingAccounts: vestingAccounts.map(v => v.publicKey),\n            },\n          });\n          return tx;\n        } else {\n          return await registryClient.rpc.claimReward({\n            accounts: {\n              to: token,\n              cmn: {\n                registrar: registrar.publicKey,\n                member: member!.publicKey,\n                beneficiary: registryClient.provider.wallet.publicKey,\n                balances: member!.account.balances,\n                balancesLocked: member!.account.balancesLocked,\n\n                vendor: rli.vendor!.publicKey,\n                vault: vendor.vault,\n                vendorSigner: _vendorSigner.publicKey,\n\n                tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n                clock: SYSVAR_CLOCK_PUBKEY,\n              },\n            },\n          });\n        }\n      },\n    );\n  };\n\n  return (\n    <>\n      {!rli.reward.locked && (\n        <div>\n          <OwnedTokenAccountsSelect\n            style={{ width: '400px', height: '100%' }}\n            mint={rli.vendor.account.mint}\n            onChange={(f: PublicKey) => setToken(f)}\n          />\n        </div>\n      )}\n      <div style={{ marginLeft: '10px', marginRight: '10px' }}>\n        <Button\n          disabled={rli.reward.unlockedAlloc && token === null}\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() =>\n            clickHandler().catch(err => {\n              console.error(err);\n              snack.enqueueSnackbar(\n                `Error ending pending redemption: ${err.toString()}`,\n                {\n                  variant: 'error',\n                },\n              );\n            })\n          }\n        >\n          Process Reward\n        </Button>\n      </div>\n    </>\n  );\n}\n","import React, { useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport * as anchor from '@project-serum/anchor';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport { State as StoreState } from '../../store/reducer';\nimport { ActionType } from '../../store/actions';\nimport RewardsList, { RewardListItemViewModel } from './RewardsList';\nimport DropRewardButton from './DropRewardButton';\nimport ClaimRewardButton from './ClaimRewardButton';\nimport { rewardEvents } from '../../utils/registry';\n\nexport default function Rewards() {\n  const { registryClient } = useWallet();\n  const dispatch = useDispatch();\n  const snack = useSnackbar();\n  const ctx = useSelector((state: StoreState) => {\n    const registrar = state.accounts[state.registry.registrar.toString()];\n    const rewardEventQueue = {\n      publicKey: registrar.rewardEventQ,\n      account: state.accounts[registrar.rewardEventQ.toString()],\n    };\n    return {\n      accounts: state.accounts,\n      rewardEventQueue,\n      member: state.registry.member\n        ? {\n            publicKey: state.registry.member,\n            account: state.accounts[state.registry.member.toString()],\n          }\n        : undefined,\n      network: state.common.network,\n    };\n  });\n  const { rewardEventQueue } = ctx;\n\n  const events = useMemo(() => rewardEvents(rewardEventQueue.account), [\n    rewardEventQueue.account,\n  ]);\n\n  useEffect(() => {\n    (async () => {\n      // TODO: need to chop up the calls here, for reward vendors > 100 entires.\n      const accounts = await anchor.utils.getMultipleAccounts(\n        registryClient.provider.connection,\n        events.map(m => m.vendor),\n      );\n      accounts.forEach(a => {\n        if (a === null) {\n          snack.enqueueSnackbar(`RPC node returned invalid vendor account`, {\n            variant: 'error',\n          });\n          return;\n        }\n        const account = registryClient.coder.accounts.decode(\n          'RewardVendor',\n          a.account.data,\n        );\n        dispatch({\n          type: ActionType.AccountAdd,\n          item: {\n            account: { publicKey: a.publicKey, account },\n          },\n        });\n      });\n    })();\n  }, [\n    events,\n    dispatch,\n    snack,\n    registryClient.coder.accounts,\n    registryClient.provider.connection,\n  ]);\n\n  // All rewards to display.\n  const rewards = events\n    .map((m: any) => RewardListItemViewModel.fromMessage(ctx, m))\n    .reverse();\n\n  // Next reward to claim.\n  let nextReward = null;\n  if (rewards.filter(r => r === null).length === 0) {\n    nextReward = rewards\n      .filter(r => r!.needsClaim)\n      .sort((a, b) =>\n        a!.cursor < b!.cursor ? -1 : a!.cursor > b!.cursor ? 1 : 0,\n      )\n      .shift();\n  }\n\n  return (\n    <div style={{ width: '100%', marginTop: '24px' }}>\n      {nextReward && (\n        <Card style={{ marginBottom: '24px' }}>\n          <CardContent>\n            <Typography variant=\"h6\">\n              You were staked during a previous reward. To prove eligibility,\n              click the \"Process\" button until you've processed <b>all</b>{' '}\n              eligible rewards. For unlocked rewards, don't forget to select the\n              address you wish to send your stake reward to.\n            </Typography>\n          </CardContent>\n        </Card>\n      )}\n      <div\n        style={{\n          marginBottom: '10px',\n          display: 'flex',\n          justifyContent: 'space-between',\n        }}\n      >\n        <Typography style={{ fontWeight: 'bold', fontSize: '20px' }}>\n          Reward History\n        </Typography>\n        <div style={{ display: 'flex' }}>\n          {nextReward && <ClaimRewardButton rli={nextReward} />}\n          {localStorage.getItem('private') && <DropRewardButton />}\n        </div>\n      </div>\n      <div style={{ marginBottom: '16px' }}>\n        <Typography>\n          When rewards are dropped, one must prove one was staked during the\n          time of drop. This means sending a transaction to the staking program\n          to <b>process</b> the reward. For <b>unlocked</b> rewards, select the\n          token address to transfer the reward to. For <b>locked</b> rewards, a\n          locked vesting account will be created and realized to the staker upon\n          unstaking. See the Lockup tab.\n        </Typography>\n      </div>\n      <Paper>\n        <RewardsList rewards={rewards} />\n      </Paper>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport BN from 'bn.js';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { PublicKey } from '@solana/web3.js';\nimport { State as StoreState, ProgramAccount } from '../../store/reducer';\nimport { toDisplay } from '../../utils/tokens';\n\ntype Props = {\n  style?: any;\n  mint?: PublicKey | null;\n  decimals: number;\n  variant?: 'outlined' | 'standard';\n  onChange: (from: PublicKey, maxAmount: BN) => void;\n  deposit?: boolean;\n};\n\nexport default function VestingAccountsSelect(p: Props) {\n  const { mint, decimals, variant, onChange, style, deposit } = p;\n  const vestings: ProgramAccount[] = useSelector((state: StoreState) => {\n    if (!mint) {\n      return [];\n    }\n    return state.lockup.vestings\n      .map(v => {\n        return { publicKey: v, account: state.accounts[v.toString()] };\n      })\n      .filter(v => v.account.mint.equals(mint));\n  });\n  const [fromAccount, setFromAccount] = useState('');\n  return (\n    <Select\n      style={style}\n      variant={variant}\n      fullWidth\n      value={fromAccount}\n      onChange={e => {\n        const pk = e.target.value as string;\n        setFromAccount(pk);\n        const pubkey = new PublicKey(pk);\n        const v = vestings.filter(v => v.publicKey.equals(pubkey)).pop();\n        onChange(pubkey, availableAmount(v!, deposit));\n      }}\n    >\n      {vestings.length === 0 ? (\n        <MenuItem value={''}>No vesting accounts found</MenuItem>\n      ) : (\n        vestings.map(v => {\n          return (\n            <MenuItem value={v.publicKey.toString()}>\n              <div\n                style={{\n                  width: '100%',\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                }}\n              >\n                <div>{`${v.publicKey.toString()}`}</div>\n                <div style={{ float: 'right', color: '#ccc' }}>{`${toDisplay(\n                  availableAmount(v, deposit),\n                  decimals,\n                )}`}</div>\n              </div>\n            </MenuItem>\n          );\n        })\n      )}\n    </Select>\n  );\n}\n\nfunction availableAmount(v: ProgramAccount, deposit?: boolean): BN {\n  return deposit\n    ? v.account.outstanding.sub(v.account.whitelistOwned)\n    : v.account.whitelistOwned;\n}\n","import React from 'react';\nimport MyNode from '../components/common/MyNode';\n\nexport default function MyNodePage() {\n  return <MyNode />;\n}\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport BN from 'bn.js';\nimport {\n  Account,\n  PublicKey,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n} from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { createTokenAccountInstrs } from '@project-serum/common';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport { State as StoreState } from '../../store/reducer';\nimport { ActionType } from '../../store/actions';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport OwnedTokenAccountsSelect from '../../components/common/OwnedTokenAccountsSelect';\nimport { fromDisplay } from '../../utils/tokens';\nimport { vestingSigner } from '../../utils/lockup';\nimport { ViewTransactionOnExplorerButton } from '../common/Notification';\n\nexport default function NewVestingButton() {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <div onClick={() => setOpen(true)}>\n        <Button variant=\"contained\" color=\"secondary\">\n          New\n        </Button>\n      </div>\n      <NewVestingDialog open={open} onClose={() => setOpen(false)} />\n    </>\n  );\n}\n\ntype NewVestingDialogProps = {\n  open: boolean;\n  onClose: () => void;\n};\n\nfunction NewVestingDialog(props: NewVestingDialogProps) {\n  const { open, onClose } = props;\n  const { network, accounts } = useSelector((state: StoreState) => {\n    return {\n      network: state.common.network,\n      accounts: state.accounts,\n    };\n  });\n\n  const defaultStartDate = new Date().toString();\n  const defaultStartTs = new Date(defaultStartDate).getTime() / 1000;\n  const defaultEndDate = '2027-01-01T12:00';\n  const defaultEndTs = new Date(defaultEndDate).getTime() / 1000;\n\n  const [beneficiary, setBeneficiary] = useState('');\n  const isValidBeneficiary = (() => {\n    try {\n      new PublicKey(beneficiary);\n      return true;\n    } catch (_) {\n      return false;\n    }\n  })();\n  const displayBeneficiaryError = !isValidBeneficiary && beneficiary !== '';\n\n  const [fromAccount, setFromAccount] = useState<null | PublicKey>(null);\n  const [startTimestamp, setStartTimestamp] = useState(defaultStartTs);\n  const [timestamp, setTimestamp] = useState(defaultEndTs);\n  const [periodCount, setPeriodCount] = useState(7);\n  const [displayAmount, setDisplayAmount] = useState<null | number>(null);\n  const { lockupClient } = useWallet();\n  const [isLoading, setIsLoading] = useState(false);\n  const [mint, setMint] = useState<null | PublicKey>(null);\n\n  const { enqueueSnackbar } = useSnackbar();\n  const dispatch = useDispatch();\n\n  const submitBtnEnabled =\n    mint !== null &&\n    fromAccount !== null &&\n    isValidBeneficiary &&\n    displayAmount !== null;\n\n  const createVestingClickHandler = async () => {\n    setIsLoading(true);\n    try {\n      const beneficiaryPublicKey = new PublicKey(beneficiary);\n      const beneficiaryAccount = await lockupClient.provider.connection.getAccountInfo(\n        beneficiaryPublicKey,\n      );\n      if (beneficiaryAccount === null) {\n        enqueueSnackbar('Unable to validate given beneficiary.', {\n          variant: 'error',\n        });\n        setIsLoading(false);\n        return;\n      }\n      if (!beneficiaryAccount.owner.equals(SystemProgram.programId)) {\n        enqueueSnackbar(\n          'The beneficiary must be owned by the System Program.',\n          {\n            variant: 'error',\n          },\n        );\n        setIsLoading(false);\n        return;\n      }\n\n      enqueueSnackbar('Creating vesting acount...', {\n        variant: 'info',\n      });\n\n      const mintAccount = accounts[mint!.toString()];\n      let amount = mintAccount\n        ? fromDisplay(displayAmount!, mintAccount.decimals)\n        : new BN(displayAmount!);\n\n      const vesting = new Account();\n      const vestingVault = new Account();\n      const _vestingSigner = await vestingSigner(\n        lockupClient.programId,\n        vesting.publicKey,\n      );\n\n      let tx = await lockupClient.rpc.createVesting(\n        beneficiaryPublicKey,\n        amount,\n        _vestingSigner.nonce,\n        new BN(startTimestamp),\n        new BN(timestamp),\n        new BN(periodCount),\n        null,\n        {\n          accounts: {\n            vesting: vesting.publicKey,\n            vault: vestingVault.publicKey,\n            depositor: fromAccount,\n            depositorAuthority: lockupClient.provider.wallet.publicKey,\n            tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n            rent: SYSVAR_RENT_PUBKEY,\n            clock: SYSVAR_CLOCK_PUBKEY,\n          },\n          signers: [vesting, vestingVault],\n          instructions: [\n            await lockupClient.account.vesting.createInstruction(vesting),\n            ...(await createTokenAccountInstrs(\n              lockupClient.provider,\n              vestingVault.publicKey,\n              mint!,\n              _vestingSigner.publicKey,\n            )),\n          ],\n        },\n      );\n      // Only add to the local store if the lockup belongs to the current user.\n      if (beneficiaryPublicKey.equals(lockupClient.provider.wallet.publicKey)) {\n        const vestingAccount = await lockupClient.account.vesting(\n          vesting.publicKey,\n        );\n        dispatch({\n          type: ActionType.LockupCreateVesting,\n          item: {\n            vesting: {\n              publicKey: vesting.publicKey,\n              account: vestingAccount,\n            },\n          },\n        });\n      }\n      enqueueSnackbar(`Vesting account created`, {\n        variant: 'success',\n        action: <ViewTransactionOnExplorerButton signature={tx} />,\n      });\n      onClose();\n    } catch (err) {\n      enqueueSnackbar(`Error creating vesting account: ${err.toString()}`, {\n        variant: 'error',\n      });\n    }\n    setIsLoading(false);\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose} fullWidth maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          New Vesting Account\n        </Typography>\n      </DialogTitle>\n      <DialogContent>\n        <div>\n          {isLoading && (\n            <div\n              style={{\n                width: '40px',\n                marginLeft: 'auto',\n                marginRight: 'auto',\n                marginBottom: '24px',\n              }}\n            >\n              <CircularProgress\n                style={{ marginLeft: 'auto', marginRight: 'auto' }}\n              />\n            </div>\n          )}\n          <div style={{ display: 'flex', width: '100%' }}>\n            <div>\n              <FormControl variant=\"outlined\" style={{ width: '200px' }}>\n                <InputLabel>Mint</InputLabel>\n                <Select\n                  value={mint ? mint!.toString() : ''}\n                  onChange={e =>\n                    setMint(new PublicKey(e.target.value as string))\n                  }\n                >\n                  {Object.keys(network.mints).map(m => (\n                    <MenuItem value={network.mints[m].toString()}>\n                      {m.toUpperCase()}\n                    </MenuItem>\n                  ))}\n                  {/*<MenuItem value=\"custom\">Custom</MenuItem>*/}\n                </Select>\n              </FormControl>\n            </div>\n            {false && (\n              <div style={{ flex: 1, marginLeft: '10px' }}>\n                <TextField\n                  fullWidth\n                  label=\"Custom mint\"\n                  value={mint ? mint!.toString() : ''}\n                  onChange={e => setMint(new PublicKey(e.target.value))}\n                />\n                <FormHelperText>Mint of the token to lockup</FormHelperText>\n              </div>\n            )}\n          </div>\n          <div>\n            <div style={{ display: 'flex', width: '100%' }}>\n              <div style={{ flex: 1 }}>\n                <FormControl fullWidth>\n                  <InputLabel>From</InputLabel>\n                  <OwnedTokenAccountsSelect\n                    mint={mint}\n                    onChange={(f: PublicKey) => setFromAccount(f)}\n                  />\n                  <FormHelperText>Token account to send from</FormHelperText>\n                </FormControl>\n              </div>\n            </div>\n          </div>\n          <div style={{ marginTop: '24px' }}>\n            <TextField\n              fullWidth\n              error={displayBeneficiaryError}\n              helperText={displayBeneficiaryError && 'Invalid beneficiary'}\n              label=\"Beneficiary\"\n              value={beneficiary}\n              onChange={e => setBeneficiary(e.target.value)}\n            />\n            <FormHelperText>Owner of the new vesting account</FormHelperText>\n          </div>\n          <div\n            style={{\n              marginTop: '24px',\n            }}\n          >\n            {false && (\n              <FormHelperText style={{ color: 'blue' }}>\n                Note: Amounts for custom mints (i.e., not SRM/MSRM) are in their\n                raw, non-decimal form. Make sure to convert before entering into\n                the fields here. For example, if a token has 6 decimals, then\n                multiply your desired amount by 10^6.\n              </FormHelperText>\n            )}\n            <TextField\n              fullWidth\n              label=\"Amount\"\n              type=\"number\"\n              value={displayAmount}\n              InputProps={{ inputProps: { min: 0 } }}\n              onChange={e => setDisplayAmount(parseFloat(e.target.value))}\n            />\n            <FormHelperText>\n              Amount to deposit into the vesting account\n            </FormHelperText>\n          </div>\n          <div\n            style={{\n              marginTop: '24px',\n              display: 'flex',\n            }}\n          >\n            <div style={{ flex: 1, marginRight: '10px' }}>\n              <TextField\n                fullWidth\n                label=\"Start date\"\n                type=\"datetime-local\"\n                defaultValue={defaultStartDate}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                onChange={e => {\n                  const d = new Date(e.target.value);\n                  setStartTimestamp(d.getTime() / 1000);\n                }}\n              />\n              <FormHelperText>Date when vesting begins</FormHelperText>\n            </div>\n            <div>\n              <TextField\n                disabled\n                fullWidth\n                label=\"Unix Timestamp\"\n                value={startTimestamp}\n              />\n            </div>\n          </div>\n          <div\n            style={{\n              marginTop: '24px',\n              display: 'flex',\n            }}\n          >\n            <div style={{ flex: 1, marginRight: '10px' }}>\n              <TextField\n                fullWidth\n                label=\"End date\"\n                type=\"datetime-local\"\n                defaultValue={defaultEndDate}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                onChange={e => {\n                  const d = new Date(e.target.value);\n                  setTimestamp(d.getTime() / 1000);\n                }}\n              />\n              <FormHelperText>Date when all tokens are vested</FormHelperText>\n            </div>\n            <div>\n              <TextField\n                disabled\n                fullWidth\n                label=\"Unix Timestamp\"\n                value={timestamp}\n              />\n            </div>\n          </div>\n          <div\n            style={{\n              marginTop: '24px',\n            }}\n          >\n            <FormControl fullWidth>\n              <TextField\n                id=\"outlined-number\"\n                label=\"Period Count\"\n                type=\"number\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant=\"outlined\"\n                value={periodCount}\n                onChange={e =>\n                  setPeriodCount(parseInt(e.target.value) as number)\n                }\n                InputProps={{ inputProps: { min: 1 } }}\n              />\n              <FormHelperText>Number of vesting periods</FormHelperText>\n            </FormControl>\n          </div>\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button\n          variant=\"contained\"\n          type=\"submit\"\n          color=\"primary\"\n          disabled={!submitBtnEnabled || isLoading}\n          onClick={() => createVestingClickHandler()}\n        >\n          Create\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport ChartistGraph from 'react-chartist';\nimport { useDispatch, useSelector } from 'react-redux';\nimport BN from 'bn.js';\nimport { useSnackbar } from 'notistack';\nimport { FixedScaleAxis, IChartOptions, Interpolation } from 'chartist';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Card from '@material-ui/core/Card';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Link from '@material-ui/core/Link';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Collapse from '@material-ui/core/Collapse';\nimport { PublicKey, SYSVAR_CLOCK_PUBKEY } from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { ProgramAccount, State as StoreState } from '../../store/reducer';\nimport { Network } from '../../store/config';\nimport { useWallet } from '../common/WalletProvider';\nimport OwnedTokenAccountsSelect from '../../components/common/OwnedTokenAccountsSelect';\nimport { withTx } from '../../components/common/Notification';\nimport { ActionType } from '../../store/actions';\nimport { getImage } from '../../components/common/RegistrarSelect';\nimport { useTokenInfos, toDisplay, toDisplayLabel } from '../../utils/tokens';\nimport {\n  vestingSigner,\n  availableForWithdrawal as _availableForWithdrawal,\n} from '../../utils/lockup';\n\ntype VestingAccountCardProps = {\n  network: Network;\n  vesting: ProgramAccount;\n};\n\nexport default function VestingAccountCard(props: VestingAccountCardProps) {\n  const { vesting, network } = props;\n  const { lockupClient, registryClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n  const tokenInfos = useTokenInfos();\n  const dispatch = useDispatch();\n  const { accounts, member, mintAccount } = useSelector((state: StoreState) => {\n    return {\n      accounts: state.accounts,\n      member: state.registry.member\n        ? {\n            publicKey: state.registry.member,\n            account: state.accounts[state.registry.member.toString()],\n          }\n        : undefined,\n      mintAccount: state.accounts[vesting.account.mint.toString()],\n    };\n  });\n  const [expanded, setExpanded] = useState(false);\n  const [hover, setHover] = useState(false);\n\n  // Whitelisted mints only for now.\n  const isCustomMint = false;\n\n  let mint = accounts[vesting.account.mint.toString()];\n  const displayFn = mint\n    ? (input: BN) => {\n        return toDisplay(input, mint.decimals);\n      }\n    : (input: BN) => input.toString();\n\n  const outstandingLabel = `${displayFn(\n    vesting.account.outstanding,\n  )} ${toDisplayLabel(vesting.account.mint)}`;\n  const startTs = vesting.account.startTs;\n  const endTs = vesting.account.endTs;\n\n  const tsOverflow = endTs.sub(startTs).mod(vesting.account.periodCount);\n  const shiftedStartTs = startTs.sub(tsOverflow);\n\n  const period = endTs.sub(shiftedStartTs).div(vesting.account.periodCount);\n\n  // Make the horizontal axis evenly spaced.\n  //\n  // Vesting dates assuming we stretch the start date back in time (so that the\n  // periods are of even length).\n  const vestingDates = [\n    ...Array(vesting.account.periodCount.toNumber() + 1),\n  ].map((_, idx) => {\n    return formatDate(\n      new Date((shiftedStartTs.toNumber() + idx * period.toNumber()) * 1000),\n    );\n  });\n  // Now push the start window forward to the real start date, making the first period shorter.\n  vestingDates[0] = formatDate(new Date(startTs.toNumber() * 1000));\n\n  // Now do the same thing on the vertical axis.\n  const rewardOverflow = vesting.account.startBalance.mod(\n    vesting.account.periodCount,\n  );\n  const rewardPerPeriod = vesting.account.startBalance\n    .sub(rewardOverflow)\n    .div(vesting.account.periodCount)\n    .toNumber();\n  const cumulativeVesting = [...Array(vestingDates.length)].map(() => 0);\n  cumulativeVesting[1] = rewardPerPeriod + rewardOverflow.toNumber();\n  for (let k = 2; k < cumulativeVesting.length; k += 1) {\n    cumulativeVesting[k] = cumulativeVesting[k - 1] + rewardPerPeriod;\n  }\n\n  const startLabel = formatDate(\n    new Date(vesting.account.startTs.toNumber() * 1000),\n  );\n  const endLabel = formatDate(\n    new Date(vesting.account.endTs.toNumber() * 1000),\n  );\n  const urlSuffix = `?cluster=${network.explorerClusterSuffix}`;\n\n  const [\n    availableForWithdrawal,\n    setAvailableForWithdrawal,\n  ] = useState<null | BN>(null);\n  const [withdrawalAccount, setWithdrawalAccount] = useState<null | PublicKey>(\n    null,\n  );\n\n  useEffect(() => {\n    _availableForWithdrawal(lockupClient, vesting.publicKey)\n      .then((amount: BN) => {\n        setAvailableForWithdrawal(amount);\n      })\n      .catch((err: any) => {\n        console.error(err);\n        enqueueSnackbar(\n          `Error fetching available for withdrawal: ${err.toString()}`,\n          {\n            variant: 'error',\n          },\n        );\n      });\n  }, [lockupClient, vesting, enqueueSnackbar]);\n  const snack = useSnackbar();\n\n  const withdrawEnabled =\n    withdrawalAccount !== null &&\n    availableForWithdrawal !== null &&\n    availableForWithdrawal.gtn(0);\n  const withdraw = async () => {\n    await withTx(\n      snack,\n      'Withdrawing locked tokens',\n      'Tokens unlocked',\n      async () => {\n        const remainingAccounts = (() => {\n          if (vesting.account.realizor) {\n            if (!member) {\n              // Should never be thrown.\n              throw new Error('Member account not found');\n            }\n            return [\n              {\n                pubkey: registryClient.programId,\n                isSigner: false,\n                isWritable: false,\n              },\n              { pubkey: member.publicKey, isSigner: false, isWritable: false },\n              {\n                pubkey: member.account.balances.spt,\n                isSigner: false,\n                isWritable: false,\n              },\n              {\n                pubkey: member.account.balancesLocked.spt,\n                isSigner: false,\n                isWritable: false,\n              },\n            ];\n          } else {\n            return undefined;\n          }\n        })();\n        const tx = await lockupClient.rpc.withdraw(availableForWithdrawal!, {\n          accounts: {\n            vesting: vesting.publicKey,\n            beneficiary: lockupClient.provider.wallet.publicKey,\n            token: withdrawalAccount!,\n            vault: vesting.account.vault,\n            vestingSigner: (\n              await vestingSigner(lockupClient.programId, vesting.publicKey)\n            ).publicKey,\n            tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n            clock: SYSVAR_CLOCK_PUBKEY,\n          },\n          remainingAccounts,\n        });\n        const newVesting = await lockupClient.account.vesting(\n          vesting.publicKey,\n        );\n        dispatch({\n          type: ActionType.LockupUpdateVesting,\n          item: {\n            vesting: {\n              publicKey: vesting.publicKey,\n              account: newVesting,\n            },\n          },\n        });\n        return tx;\n      },\n    );\n  };\n  const rows = [\n    {\n      field: 'Projected unlock',\n      value:\n        availableForWithdrawal === null\n          ? null\n          : displayFn(availableForWithdrawal!),\n    },\n    {\n      field: 'Locked outstanding',\n      value: displayFn(vesting.account.outstanding),\n    },\n    {\n      field: 'Current balance',\n      value: displayFn(\n        vesting.account.outstanding.sub(vesting.account.whitelistOwned),\n      ),\n    },\n    { field: 'Initial lockup', value: displayFn(vesting.account.startBalance) },\n    {\n      field: 'Amount unlocked',\n      value: displayFn(\n        vesting.account.startBalance.sub(vesting.account.outstanding),\n      ),\n    },\n    {\n      field: 'Whitelist owned',\n      value: displayFn(vesting.account.whitelistOwned),\n    },\n    { field: 'Period count', value: vesting.account.periodCount.toString() },\n    {\n      field: 'Start timestamp',\n      value: `${new Date(\n        vesting.account.startTs.toNumber() * 1000,\n      ).toLocaleString()} (${vesting.account.startTs.toString()})`,\n    },\n    {\n      field: 'End timestamp',\n      value: `${new Date(\n        vesting.account.endTs.toNumber() * 1000,\n      ).toLocaleString()} (${vesting.account.endTs.toString()})`,\n    },\n    { field: 'Vault', value: vesting.account.vault.toString() },\n    {\n      field: 'Realizer program',\n      value: vesting.account.realizor\n        ? vesting.account.realizor.program.toString()\n        : 'None',\n    },\n    {\n      field: 'Realizer metadata',\n      value: vesting.account.realizor\n        ? vesting.account.realizor.metadata.toString()\n        : 'None',\n    },\n    {\n      field: 'Grantor',\n      value: vesting.account.grantor.toString(),\n    },\n  ];\n\n  return (\n    <Card\n      key={vesting.publicKey.toString()}\n      onMouseOver={() => setHover(true)}\n      onMouseOut={() => setHover(false)}\n      style={{\n        marginTop: '24px',\n        cursor: hover ? 'pointer' : 'default',\n      }}\n    >\n      <CardContent style={{ paddingBottom: '16px' }}>\n        <ListItem onClick={() => setExpanded(!expanded)}>\n          <div\n            style={{\n              width: '100%',\n              display: 'flex',\n              justifyContent: 'space-between',\n            }}\n          >\n            <ListItemIcon>\n              {getImage(tokenInfos.get(vesting.account.mint.toString()), {\n                marginRight: '16px',\n                width: '56px',\n              })}\n            </ListItemIcon>\n            <ListItemText\n              primary={\n                <Link\n                  href={\n                    `https://explorer.solana.com/account/${vesting.publicKey.toBase58()}` +\n                    urlSuffix\n                  }\n                  target=\"_blank\"\n                  rel=\"noopener\"\n                >\n                  {vesting.publicKey.toString()}\n                </Link>\n              }\n              secondary={`${startLabel}, ${endLabel} | ${vesting.account.periodCount.toNumber()} periods`}\n            />\n            <div\n              style={{\n                marginTop: '6px',\n                color: 'rgba(0, 0, 0, 0.54)',\n                display: 'flex',\n                justifyContent: 'space-between',\n                flexDirection: 'column',\n                maxWidth: '200px',\n              }}\n            >\n              <Typography\n                style={{ overflow: 'hidden', whiteSpace: 'nowrap' }}\n                variant=\"body1\"\n              >\n                {outstandingLabel}\n              </Typography>\n            </div>\n          </div>\n        </ListItem>\n        <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n          <Typography></Typography>\n          {vestingDates.length <= 15 ? (\n            <ChartistGraph\n              data={{\n                labels: vestingDates,\n                series: [cumulativeVesting],\n              }}\n              options={\n                {\n                  axisY: {\n                    type: FixedScaleAxis,\n                    low: 0,\n                    high: cumulativeVesting[cumulativeVesting.length - 1],\n                    ticks: cumulativeVesting,\n                  },\n                  lineSmooth: Interpolation.step(),\n                  height: 400,\n                } as IChartOptions\n              }\n              type={'Line'}\n            />\n          ) : (\n            <div style={{ textAlign: 'center', fontWeight: 'bold' }}>\n              {/* TOOD: graphs for vesting accounts with a lot of periods. */}A\n              graph isn't available for this account.\n            </div>\n          )}\n          <div>\n            {isCustomMint && (\n              <div\n                style={{\n                  padding: '15px',\n                }}\n              >\n                <b>\n                  Note: custom mints (i.e. not SRM/MSRM) display raw token\n                  amounts without decimals.\n                </b>\n              </div>\n            )}\n            <Table>\n              <TableBody>\n                {rows.map(r => {\n                  return (\n                    <TableRow>\n                      <TableCell>{r.field}</TableCell>\n                      <TableCell align=\"right\">\n                        {r.value === null ? (\n                          <CircularProgress\n                            style={{\n                              height: '20px',\n                              width: '20px',\n                              padding: 0,\n                            }}\n                          />\n                        ) : (\n                          r.value\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n            <div style={{ display: 'flex', marginTop: '15px' }}>\n              <OwnedTokenAccountsSelect\n                decimals={mintAccount ? mintAccount.decimals : undefined}\n                mint={vesting.account.mint}\n                onChange={(f: PublicKey) => setWithdrawalAccount(f)}\n              />\n              <div style={{ marginLeft: '20px', width: '191px' }}>\n                <Button\n                  style={{ fontSize: '12px' }}\n                  color=\"primary\"\n                  disabled={!withdrawEnabled}\n                  variant=\"contained\"\n                  onClick={() =>\n                    withdraw().catch(err => {\n                      let msg = err.toString();\n                      if (\n                        msg &&\n                        msg.split('custom program error: 0x78').length === 2\n                      ) {\n                        msg = 'Unrealized rewards. Please unstake';\n                      }\n                      enqueueSnackbar(\n                        `Error withdrawing from vesting account: ${err.toString()}`,\n                        {\n                          variant: 'error',\n                        },\n                      );\n                    })\n                  }\n                >\n                  Unlock tokens\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Collapse>\n      </CardContent>\n    </Card>\n  );\n}\n\n// TODO: locale format without minutes, hours, seconds?\nfunction formatDate(d: Date): string {\n  return `${d.getMonth() + 1}/${d.getDate()}/${d.getFullYear()}`;\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport ListItem from '@material-ui/core/ListItem';\nimport Container from '@material-ui/core/Container';\nimport List from '@material-ui/core/List';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport { State as StoreState } from '../../store/reducer';\nimport NewVestingButton from './NewVesting';\nimport VestingAccountCard from './VestingAccountCard';\n\nexport default function Vestings() {\n  const { wallet } = useWallet();\n  const { vestingAccounts, network } = useSelector((state: StoreState) => {\n    return {\n      vestingAccounts: state.lockup.vestings.map(v => {\n        return {\n          publicKey: v,\n          account: state.accounts[v.toString()],\n        };\n      }),\n      network: state.common.network,\n    };\n  });\n\n  return (\n    <Container fixed maxWidth=\"md\">\n      <div style={{ width: '100%' }}>\n        <div style={{ marginTop: '24px', marginBottom: '24px' }}>\n          <link\n            rel=\"stylesheet\"\n            href=\"//cdn.jsdelivr.net/chartist.js/latest/chartist.min.css\"\n          />\n          <script src=\"//cdn.jsdelivr.net/chartist.js/latest/chartist.min.js\"></script>\n          {wallet.publicKey && (\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'space-between',\n                marginBottom: '24px',\n              }}\n            >\n              <div\n                style={{\n                  display: 'flex',\n                  justifyContent: 'center',\n                  flexDirection: 'column',\n                }}\n              >\n                <Typography\n                  style={{\n                    fontSize: '20px',\n                    fontWeight: 'bold',\n                  }}\n                >\n                  Projected Unlocks\n                </Typography>\n              </div>\n              <div>\n                <NewVestingButton />\n              </div>\n            </div>\n          )}\n          <Typography color=\"textSecondary\">\n            In addition to a vesting schedule, locked token accounts are subject\n            to an application dependent\n            <b> realization condition</b>, determining if and when locked tokens\n            are given to a user. For example, in the case of locked staking\n            rewards, locked tokens become realized in the event of unstaking. If\n            one never unstakes, one never receives locked token rewards.\n          </Typography>\n          <List\n            disablePadding\n            style={{ marginLeft: 'auto', marginRight: 'auto' }}\n          >\n            {vestingAccounts.map(v => (\n              <VestingAccountCard network={network} vesting={v} />\n            ))}\n            {vestingAccounts.length === 0 && (\n              <Card\n                style={{\n                  marginTop: '24px',\n                }}\n              >\n                <CardContent>\n                  <ListItem>\n                    <div\n                      style={{\n                        width: '100%',\n                        display: 'flex',\n                        justifyContent: 'space-between',\n                      }}\n                    >\n                      <Typography color=\"textSecondary\" variant=\"h6\">\n                        No vesting accounts found\n                      </Typography>\n                    </div>\n                  </ListItem>\n                </CardContent>\n              </Card>\n            )}\n          </List>\n        </div>\n      </div>\n    </Container>\n  );\n}\n","import React from 'react';\nimport Vestings from '../components/lockups/Vestings';\n\nexport default function LockupPage() {\n  return <Vestings />;\n}\n","import React from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport Multisig from '../components/multisig/Multisig';\nimport { PublicKey } from '@solana/web3.js';\n\nexport default function MultisigPage() {\n  return <Multisig />;\n}\n\nexport function MultisigInstancePage() {\n  const history = useHistory();\n  const location = useLocation();\n  const path = location.pathname.split('/');\n  if (path.length !== 3) {\n    history.push(`/multisig`);\n    return <></>;\n  } else {\n    const multisig = new PublicKey(path[2]);\n    return <Multisig multisig={multisig} />;\n  }\n}\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter, Route } from 'react-router-dom';\nimport { SnackbarProvider } from 'notistack';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { unstable_createMuiStrictModeTheme as createMuiTheme } from '@material-ui/core/styles';\nimport { store } from './store';\nimport WalletProvider from './components/common/WalletProvider';\nimport BootstrapProvider from './components/common/BootstrapProvider';\nimport { TokenRegistryProvider } from './utils/tokens';\nimport Layout from './components/common/Layout';\nimport MyNodePage from './pages/MyNode';\nimport LockupPage from './pages/Lockup';\nimport MultisigPage, { MultisigInstancePage } from './pages/Multisig';\n\nfunction App() {\n  const theme = createMuiTheme({\n    palette: {\n      background: {\n        default: 'rgb(255,255,255)',\n      },\n    },\n    typography: {\n      fontFamily: ['Source Sans Pro', 'sans-serif'].join(','),\n    },\n    overrides: {},\n  });\n  return (\n    <Provider store={store}>\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <SnackbarProvider maxSnack={5} autoHideDuration={8000}>\n\t\t\t\t\t<TokenRegistryProvider>\n\t\t\t\t\t\t<WalletProvider>\n\t\t\t\t\t\t\t<BootstrapProvider>\n\t\t\t\t\t\t\t\t<HashRouter basename={'/'}>\n\t\t\t\t\t\t\t\t\t<Layout>\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/\" component={MyNodePage} />\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/stake\" component={MyNodePage} />\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/lockup\" component={LockupPage} />\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/multisig\" component={MultisigPage} />\n\t\t\t\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\t\t\t\texact\n\t\t\t\t\t\t\t\t\t\t\tpath=\"/multisig/:address\"\n\t\t\t\t\t\t\t\t\t\t\tcomponent={MultisigInstancePage}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</Layout>\n\t\t\t\t\t\t\t\t</HashRouter>\n\t\t\t\t\t\t\t</BootstrapProvider>\n\t\t\t\t\t\t</WalletProvider>\n\t\t\t\t\t</TokenRegistryProvider>\n        </SnackbarProvider>\n      </MuiThemeProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { Transaction, PublicKey, Account } from '@solana/web3.js';\nimport * as serumCmn from '@project-serum/common';\nimport * as anchor from '@project-serum/anchor';\n\nexport async function registrarSigner(\n  programId: PublicKey,\n  registrar: PublicKey,\n): Promise<{ publicKey: PublicKey; nonce: number }> {\n  const [publicKey, nonce] = await anchor.web3.PublicKey.findProgramAddress(\n    [registrar.toBuffer()],\n    programId,\n  );\n  return {\n    publicKey,\n    nonce,\n  };\n}\n\nexport async function memberSigner(\n  programId: PublicKey,\n  registrar: PublicKey,\n  member: PublicKey,\n): Promise<{ publicKey: PublicKey; nonce: number }> {\n  const [publicKey, nonce] = await anchor.web3.PublicKey.findProgramAddress(\n    [registrar.toBuffer(), member.toBuffer()],\n    programId,\n  );\n  return {\n    publicKey,\n    nonce,\n  };\n}\n\nexport async function vendorSigner(\n  programId: PublicKey,\n  registrar: PublicKey,\n  vendor: PublicKey,\n): Promise<{ publicKey: PublicKey; nonce: number }> {\n  const [publicKey, nonce] = await anchor.web3.PublicKey.findProgramAddress(\n    [registrar.toBuffer(), vendor.toBuffer()],\n    programId,\n  );\n  return {\n    publicKey,\n    nonce,\n  };\n}\n\n// Returns the seed used to derive a member address. This is not necessary, but\n// a UX convenience. Each member address is a deterministic function of the\n// program, beneficiary, and this (constant) seed.\nexport async function memberSeed(registrar: PublicKey): Promise<string> {\n  const seed = await anchor.utils.sha256(`${registrar.toString()}:Member`);\n  // The max length of seeds allowed by Solana is 32.\n  return seed.slice(0, 32);\n}\n\n// Creates all the SPL otken vaults needed for constructing a `Member` account.\nexport async function createBalanceSandbox(\n  provider: serumCmn.Provider,\n  r: any,\n  registrySigner: PublicKey,\n) {\n  const spt = new Account();\n  const vault = new Account();\n  const vaultStake = new Account();\n  const vaultPw = new Account();\n\n  const lamports = await provider.connection.getMinimumBalanceForRentExemption(\n    165,\n  );\n\n  const createSptIx = await serumCmn.createTokenAccountInstrs(\n    provider,\n    spt.publicKey,\n    r.poolMint,\n    registrySigner,\n    lamports,\n  );\n  const createVaultIx = await serumCmn.createTokenAccountInstrs(\n    provider,\n    vault.publicKey,\n    r.mint,\n    registrySigner,\n    lamports,\n  );\n  const createVaultStakeIx = await serumCmn.createTokenAccountInstrs(\n    provider,\n    vaultStake.publicKey,\n    r.mint,\n    registrySigner,\n    lamports,\n  );\n  const createVaultPwIx = await serumCmn.createTokenAccountInstrs(\n    provider,\n    vaultPw.publicKey,\n    r.mint,\n    registrySigner,\n    lamports,\n  );\n  let tx0 = new Transaction();\n  tx0.add(\n    ...createSptIx,\n    ...createVaultIx,\n    ...createVaultStakeIx,\n    ...createVaultPwIx,\n  );\n  let signers0 = [spt, vault, vaultStake, vaultPw];\n\n  const tx = { tx: tx0, signers: signers0 };\n\n  return [\n    tx,\n    {\n      spt: spt.publicKey,\n      vault: vault.publicKey,\n      vaultStake: vaultStake.publicKey,\n      vaultPw: vaultPw.publicKey,\n    },\n  ];\n}\n\n// Returns all events in the reward queue.\nexport function rewardEvents(rewardQ: any): any[] {\n  let events = [];\n  let tail = rewardQ.tail;\n  while (tail < rewardQ.head) {\n    let idx = tail % rewardQ.events.length;\n    events.push(rewardQ.events[idx]);\n    tail += 1;\n  }\n  return events;\n}\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport BN from 'bn.js';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { PublicKey } from '@solana/web3.js';\nimport { State as StoreState } from '../../store/reducer';\nimport { toDisplay } from '../../utils/tokens';\n\ntype Props = {\n  style?: any;\n  mint?: PublicKey | null;\n  decimals?: number;\n  variant?: 'outlined' | 'standard';\n  onChange: (from: PublicKey, maxAmount: BN) => void;\n};\n\nexport default function OwnedTokenAccountsSelect(p: Props) {\n  const { mint, decimals, variant, onChange, style } = p;\n  const ownedTokenAccounts = useSelector((state: StoreState) => {\n    if (!mint) {\n      return [];\n    }\n\t\tconsole.log('state', state.common);\n    return state.common.ownedTokenAccounts.filter(\n      ota => ota.account.mint.toString() === mint.toString(),\n    );\n  });\n\n  const [fromAccount, setFromAccount] = useState('');\n\n  return (\n    <Select\n      style={style}\n      variant={variant}\n      fullWidth\n      value={fromAccount}\n      onChange={e => {\n        const pk = e.target.value as string;\n        setFromAccount(pk);\n        const pubkey = new PublicKey(pk);\n        const token = ownedTokenAccounts\n          .filter(ota => ota.publicKey.equals(pubkey))\n          .pop();\n        onChange(pubkey, new BN(token!.account.amount));\n      }}\n    >\n      {ownedTokenAccounts.length === 0 ? (\n        <MenuItem value={''}>No token accounts found</MenuItem>\n      ) : (\n        ownedTokenAccounts.map(ownedTokenAccount => {\n          return (\n            <MenuItem value={ownedTokenAccount.publicKey.toString()}>\n              <div\n                style={{\n                  width: '100%',\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                  overflow: 'hidden',\n                }}\n              >\n                <div>{`${ownedTokenAccount.publicKey}`}</div>\n                {decimals && (\n                  <div style={{ float: 'right', color: '#ccc' }}>{`${toDisplay(\n                    ownedTokenAccount.account.amount,\n                    decimals ?? 0,\n                  )}`}</div>\n                )}\n              </div>\n            </MenuItem>\n          );\n        })\n      )}\n    </Select>\n  );\n}\n","import { PublicKey } from '@solana/web3.js';\n\ntype Networks = { [label: string]: Network };\n\nexport type Network = {\n  // Cluster.\n  label: string;\n  url: string;\n  explorerClusterSuffix: string;\n\n  // Faucets.\n  srmFaucet: PublicKey | null;\n  msrmFaucet: PublicKey | null;\n\n  // Programs.\n  registryProgramId: PublicKey;\n  lockupProgramId: PublicKey;\n  multisigProgramId: PublicKey;\n\n  // Staking instances.\n  registrars: { [token: string]: PublicKey };\n\n  // Whitelisted token mints.\n  mints: { [token: string]: PublicKey };\n};\n\nexport const networks: Networks = {\n  mainnet: {\n    // Cluster.\n    label: 'Mainnet Beta',\n    url: 'https://api.mainnet-beta.solana.com',\n    //url: 'https://api.mainnet-beta.solana.com',\n    explorerClusterSuffix: '',\n\n    srmFaucet: null,\n    msrmFaucet: null,\n\n    registryProgramId: new PublicKey(\n      'GrAkKfEpTKQuVHG2Y97Y2FF4i7y7Q5AHLK94JBy7Y5yv',\n    ),\n    lockupProgramId: new PublicKey(\n      '6ebQNeTPZ1j7k3TtkCCtEPRvG7GQsucQrZ7sSEDQi9Ks',\n    ),\n    multisigProgramId: new PublicKey(\n      '3S6ALMCGVib4X3vVR3CLpm2K6Ng5qbWFYMTo5jfxWcEq',\n    ),\n    registrars: {\n      srm: new PublicKey('5vJRzKtcp4fJxqmR7qzajkaKSiAb6aT9grRsaZKXU222'),\n      msrm: new PublicKey('7uURiX2DwCpRuMFebKSkFtX9v5GK1Cd8nWLL8tyoyxZY'),\n      fida: new PublicKey('5C2ayX1E2SJ5kKEmDCA9ue9eeo3EPR34QFrhyzbbs3qh'),\n      dxl: new PublicKey('BQtp3xGPTFXJSt1MVKxtVSefRcBWmUkzTNM3g1t9efcK'),\n      maps: new PublicKey('9tzkorTXKbw73hokMsq34R6ADd13eJF9X4udXQLiGAKc'),\n      oxy: new PublicKey('DsWhta1RWA9NYEamaeYsGHpfLRX91bA4bWGnaivtFju2'),\n    },\n    mints: {\n      srm: new PublicKey('SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt'),\n      msrm: new PublicKey('MSRMcoVyrFxnSgo5uXwone5SKcGhT1KEJMFEkMEWf9L'),\n      fida: new PublicKey('EchesyfXePKdLtoiZSL8pBe8Myagyy8ZRqsACNCFGnvp'),\n      dxl: new PublicKey('GsNzxJfFn6zQdJGeYsupJWzUAm57Ba7335mfhWvFiE9Z'),\n      maps: new PublicKey('MAPS41MDahZ9QdKXhVa4dWB9RuyfV4XqhyAZ8XcYepb'),\n      oxy: new PublicKey('z3dn17yLaGMKffVogeFHQ9zWVcXgqgf3PQnDsNs2g6M'),\n    },\n  },\n  devnet: {\n    // Cluster.\n    label: 'Devnet',\n    url: 'https://devnet.solana.com',\n    explorerClusterSuffix: 'devnet',\n\n    srmFaucet: null,\n    msrmFaucet: null,\n    multisigProgramId: new PublicKey(\n      '9z7Pq56To96qbVLzuBcf47Lc7u8uUWZh6k5rhcaTsDjz',\n    ),\n\n    registryProgramId: new PublicKey(\n      '65aMavjMw3EhmWKVCkGn1Uj2SqZ3XY4coJhYM1BVJTHw',\n    ),\n    lockupProgramId: new PublicKey(\n      'bRGMWZz4mzJ8NG8csn5QNTbJDv2973QSvppbfcAboje',\n    ),\n    registrars: {\n      token1: new PublicKey('EqbwcuvPWLZ5fav58HrieHmJEqTm6RPu5bmn5bBQJ3mu'),\n      token2: new PublicKey('2rDWuS6yVFQ3jYx1nQq7gs3HgzWLJcUwm9sTUBWuXuyK'),\n    },\n    mints: {\n      token1: new PublicKey('Ep6ASaHQ4gKiN3gWNRKYttZEQ7b82seMk9HWc5JNBJZP'),\n      token2: new PublicKey('5vWxJthWbCFuNSZj1qcP9WoU8E6UG3DUfeAoPvYoN8PQ'),\n    },\n  },\n\n  // Fill in with your local cluster addresses.\n  localhost: {\n    // Cluster.\n    label: 'Localhost',\n    url: 'http://localhost:8899',\n    explorerClusterSuffix: 'localhost',\n\n    srmFaucet: null,\n    msrmFaucet: null,\n\n    multisigProgramId: new PublicKey(\n      '9z7Pq56To96qbVLzuBcf47Lc7u8uUWZh6k5rhcaTsDjz',\n    ),\n    registryProgramId: new PublicKey(\n      'A3ukM9swAsTqVC6g5Zy9FsWXofe5f2JhXMEfzenNf9Q7',\n    ),\n    lockupProgramId: new PublicKey(\n      '2z65xTKJDM4iJBVz5aXtNrWfQvKGgNJvnqY1GL2mkimu',\n    ),\n    registrars: {\n      token1: new PublicKey('Fwi5pie2VgWTDUSRNkca1HdFCke5r3v3mY83JbxtC3CJ'),\n      token2: new PublicKey('9kCGBWgHzGGChvmAsmu5jrXwEShZfLxKRTmKdxEpFUBr'),\n    },\n    mints: {\n      token1: new PublicKey('2aE1pietadYMeDtdqKayS4SVo9W4xtC3U7SN4iGWCVcX'),\n      token2: new PublicKey('Cgan7PWyBH6Z7JNA6f9kDYgwBMZBxRexpdd29PJgnqah'),\n    },\n  },\n};\n"],"sourceRoot":""}