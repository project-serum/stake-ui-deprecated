{"version":3,"sources":["../../src/layout.js","../../src/token-instructions.js","../../src/tokens_and_markets.ts","skin/index.ts","utils/idl.ts","store/actions.ts","components/rewards/RewardsList.tsx","components/multisig/Multisig.tsx","utils/tokens.tsx","idl/lockup.ts","idl/registry.ts","idl/multisig.ts","components/common/WalletProvider.tsx","../../src/instructions.js","../../src/queue.ts","../../src/fees.ts","../../../src/simulate-transaction.ts","components/Stake.tsx","../../../src/index.ts","../../src/index.js","../../src/market.ts","../../src/slab.ts","../../src/error.ts","../../../src/provider.ts","components/common/Notification.tsx","../../../src/token.ts","../../../src/connection.ts","store/reducer.ts","store/index.ts","components/common/BootstrapProvider.tsx","components/common/Header.tsx","components/common/Footer.tsx","components/common/Layout.tsx","components/common/RegistrarSelect.tsx","components/Me.tsx","utils/lockup.ts","components/rewards/DropRewardButton.tsx","components/common/MyNode.tsx","components/rewards/ClaimRewardButton.tsx","components/rewards/Rewards.tsx","components/common/VestingAccountsSelect.tsx","pages/MyNode.tsx","components/lockups/NewVesting.tsx","components/lockups/VestingAccountCard.tsx","components/lockups/Vestings.tsx","pages/Lockup.tsx","pages/Multisig.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils/registry.ts","components/common/OwnedTokenAccountsSelect.tsx","store/config.ts"],"names":["BNLayout","buffer_layout_1","Blob","b","BufferLayout","u8","layout_1","publicKeyLayout","LAYOUT","addVariant","struct","programId","exports","_skin","active","ready","notReady","inactive","deactivating","instance","IDL_INSTRUCTION_LAYOUT","rustEnum","encodeInstruction","i","buffer","Buffer","alloc","len","encode","concat","IDL_TAG","slice","from","reverse","ActionType","RewardsList","props","rewards","loading","forEach","r","style","display","marginLeft","marginRight","length","filter","vendor","account","expired","map","RewardListItem","rli","primary","useState","open","setOpen","dateLabel","Date","startTs","toNumber","toLocaleString","fromLabel","toString","button","onClick","visibility","reward","locked","justifyContent","color","needsClaim","toDisplay","total","mint","decimals","publicKey","secondary","in","timeout","unmountOnExit","undefined","RewardListItemDetails","registryClient","useWallet","useSnackbar","enqueueSnackbar","closeSnackbar","useSelector","state","registrar","registry","vendorMint","accounts","expiryReceiverToken","setExpiryReceiverToken","expire","a","variant","PublicKey","createProgramAddress","toBuffer","nonce","vendorSigner","rpc","expireReward","vault","expiryReceiver","tokenProgram","TokenInstructions","TOKEN_PROGRAM_ID","clock","SYSVAR_CLOCK_PUBKEY","tx","action","signature","poolTokenSupply","expiryTs","toLocaleDateString","rewardEventQCursor","now","provider","wallet","equals","flexDirection","flex","onChange","f","RewardListItemViewModel","cursor","ctx","event","member","sptAccount","balances","spt","lockedSptAccount","balancesLocked","ownsPoolShares","amount","notYetClaimed","rewardsCursor","isEligible","lastStakeTs","vendorProgramAccount","Multisig","multisig","history","useHistory","multisigAddress","setMultisigAddress","disabled","addr","_","isValidPubkey","searchFn","push","paddingLeft","paddingRight","borderBottom","background","padding","border","outlineWidth","placeholder","value","e","target","onKeyPress","key","NewMultisigButton","MultisigInstance","multisigClient","multisigAccount","setMultisigAccount","transactions","setTransactions","showSignerDialog","setShowSignerDialog","showAddTransactionDialog","setShowAddTransactionDialog","forceRefresh","setForceRefresh","useEffect","then","catch","err","console","error","transaction","all","txs","subscribe","on","fixed","maxWidth","marginBottom","marginTop","textAlign","position","elevation","flexGrow","component","threshold","owners","title","arrow","disablePadding","TxListItem","AddTransactionDialog","onClose","didAddTransaction","SignerDialog","NewMultisigDialog","setThreshold","zeroAddr","participants","setParticipants","_onClose","createMultisig","Account","ownerSize","multisigSize","findProgramAddress","p","BN","rent","SYSVAR_RENT_PUBKEY","createInstruction","signers","instructions","fullWidth","label","type","parseInt","idx","str","txAccount","setTxAccount","rows","field","didExecute","wordBreak","width","float","encodeBase64","data","ownerSetSeqno","msAccountRows","owner","approve","execute","multisigSigner","executeTransaction","remainingAccounts","t","pubkey","isSigner","isWritable","icon","ixLabel","errStr","align","AccountsList","BPF_LOADER_UPGRADEABLE_PID","coder","sighash","idl","signer","setSigner","addrNonce","paddingBottom","ProgramUpdateListItem","IdlUpgradeListItem","MultisigSetOwnersListItem","ChangeThresholdListItem","ChangeThresholdListItemDetails","changeThreshold","changeThresholdData","proposer","createTransaction","SetOwnersListItemDetails","setOwners","setOwnersData","UpgradeIdlListItemDetails","setProgramId","setBuffer","createTransactionAccount","programAddr","bufferAddr","anchor","idlAddress","idlAddr","accs","UpgradeProgramListItemDetails","connection","getAccountInfo","programAccount","Error","programdataAddress","spill","instruction","TokenListContext","React","createContext","tokenMap","Map","useTokenInfos","useContext","TokenRegistryProvider","setTokenMap","TokenListProvider","resolve","tokens","tokenList","filterByClusterSlug","getList","reduce","item","set","address","Provider","children","fromDisplay","toDisplayLabel","whitelistedMint","Object","keys","networks","mainnet","mints","pop","toUpperCase","version","name","isMut","args","option","defined","kind","fields","vec","methods","types","errors","code","msg","variants","w","WalletContext","WalletProvider","walletProvider","common","network","useMemo","opts","preflightCommitment","commitment","Connection","url","Wallet","lockupClient","Program","LockupIdl","lockupProgramId","RegistryIdl","registryProgramId","MultisigIdl","multisigProgramId","INSTRUCTION_LAYOUT","u64","feeTier","Stake","dispatch","useDispatch","registrarAccount","memberAccount","createPoolTokens","isLocked","poolMint","rewardEventQ","memberSigner","registrarSigner","beneficiary","stake","redeemPoolTokens","pendingWithdrawal","startUnstake","pwAccount","RegistryCreatePendingWithdrawal","createPool","shares","redeemPool","PoolCard","create","redeem","RedemptionList","AllPendingTransfers","poolAmount","setPoolAmount","setIsLocked","poolTokenMint","pricePerShare","stakeRate","cost","mul","subheader","fontWeight","supply","withdrawalTimelock","control","checked","labelPlacement","pendingWithdrawals","pw","RegistrySetPendingWithdrawals","paddingTop","fontSize","PendingStakeListItem","isLast","sptLabel","l","overflow","whiteSpace","PendingWithdrawalButton","endTs","pool","endPendingWithdrawal","vaultPw","endUnstake","updatedPendingWithdrawal","burned","RegistryUpdatePendingWithdrawal","skin","height","mintAccount","pendingTransfers","setPendingTransfers","transfers","sort","fetchAll","maxHeight","div","acc","web3_js_1","this","u32","zeros","DexError","withTx","snack","beforeLabel","afterLabel","execTx","ViewTransactionOnExplorerButton","explorerClusterSuffix","urlSuffix","rel","href","BootstrapState","initialState","bootstrapTrigger","shutdownTrigger","isWalletConnected","bootstrapState","NeedsBootstrap","ownedTokenAccounts","lockup","vestings","registrars","srm","store","createStore","newState","CommonAppWillBootstrap","IsBootstrapping","CommonAppDidBootstrap","Bootstrapped","CommonWalletSetProvider","CommonWalletDidConnect","CommonWalletDidDisconnect","CommonSetNetwork","networkKey","values","CommonTriggerBootstrap","CommonTriggerShutdown","CommonDidShutdown","s","CommonOwnedTokenAccountsSet","CommonOwnedTokenAccountsUpdate","LockupSetVestings","vestingAccounts","LockupUpdateVesting","vesting","LockupCreateVesting","unshift","RegistrySetMember","RegistrySetRegistrar","AccountAdd","AccountUpdate","BootstrapProvider","bootstrap","useCallback","autoHideDuration","refreshAccounts","members","accountStore","fromEntries","m","registrarSwitch","shutdown","disconnect","fetchRegistrars","registrarAddresses","getMultipleAccounts","raw","decode","parseMintAccount","rewardQs","fetchMembers","Promise","memberSeed","seed","createWithSeed","memberPublicKey","memberAddresses","memberAccounts","fetchAndDispatchMemberAccounts","fetchMints","mintAddresses","fetchOwnedTokenAccounts","token","getOwnedTokenAccounts","fetchVestingAccounts","v","newRegistrar","oldRegistrar","oldMember","oldMemberAccount","newMember","newMemberAccount","subscribeRegistrar","subscribeMember","oldRegistrarAccount","rewardQueue","unsubscribe","newRegistrarAccount","onAccountChange","createVaultSubscription","tokenAccount","parseTokenAccount","vaultStake","Header","isAppReady","isRefreshing","setIsRefreshing","AppBar","boxShadow","Toolbar","SerumLogoButton","BarButton","hrefClient","srmFaucet","CircularProgress","IconButton","NetworkSelector","WalletConnectButton","UserSelector","Button","alt","src","Link","textDecoration","Typography","anchorEl","setAnchorEl","handleClose","currentTarget","Menu","Boolean","n","MenuItem","Select","displayEmpty","renderValue","showDisconnect","connect","Footer","zIndex","bottom","backgroundColor","borderTop","FooterButton","isEnd","Layout","refresh","setRefresh","minHeight","RiskBar","window","localStorage","getItem","DisconnectedSplash","RiskDisclosureForm","onConsent","setItem","useStyles","makeStyles","theme","root","spacing","classes","isDisconnected","className","LinearProgress","activeRegistrar","RegistrarSelect","selectedRegistrar","tokenInfos","getImage","get","registrarToDisplayLabel","entry","logoURI","Me","MemberBalancesCard","lockedVault","lockedVaultStake","lockedVaultPw","lockedSpt","tables","description","balance","pending","Card","CardContent","BalanceTable","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","row","scope","vestingSigner","availableForWithdrawal","setSigners","simulateTransaction","resp","log","logs","JSON","parse","result","RewardTypeViewModel","TabModel","DropRewardButton","showDialog","setShowDialog","DropRewardDialog","Unlocked","rewardTypeTab","setRewardTypeTab","Dialog","DialogTitle","DialogContent","Tabs","_e","Tab","Locked","DropUnlockedForm","DropLockedForm","rewardDisplayAmount","setRewardDisplayAmount","setExpiryTs","depositor","setDepositor","setMint","isSendEnabled","sendUnlockedReward","notification","serumCmn","lockedRewardAmount","rewardKind","unlocked","vendorVault","depositorAuthority","rewardVendor","dropReward","DropVendorForm","onCancel","setStartTs","setEndTs","periodCount","setPeriodCount","sendLockedRewards","rewardAmount","mintOptions","OwnedTokenAccountsSelect","FormHelperText","FormControl","InputLabel","TextField","id","InputLabelProps","shrink","parseFloat","InputProps","inputProps","min","d","getTime","DialogActions","ClaimRewardButton","setToken","clickHandler","_vendorSigner","vendoredVesting","vendoredVestingVault","vendoredVestingSigner","createVesting","meta","lockupProgram","cmn","createTokenAccountInstrs","claimRewardLocked","claimReward","to","unlockedAlloc","Rewards","rewardEventQueue","events","rewardEvents","fromMessage","nextReward","shift","Paper","VestingAccountsSelect","deposit","fromAccount","setFromAccount","pk","availableAmount","outstanding","sub","whitelistOwned","MyNode","tab","setTab","MyNodeBanner","Container","showDepositDialog","setShowDepositDialog","showWithdrawDialog","setShowWithdrawDialog","createStakeAccount","memberSignerPublicKey","createBalanceSandbox","mainTx","lockedTx","SystemProgram","getMinimumBalanceForRentExemption","size","fromPubkey","newAccountPubkey","basePubkey","lamports","space","createAccountWithSeed","createMember","allTxs","sendAll","skipPreflight","txSigs","memberProgramAccount","HoverSpan","styled","span","DepositDialog","WithdrawDialog","TransferDialog","contextText","onTransfer","displayAmount","relayData","_memberSigner","_vestingSigner","relayAccounts","whitelistedProgram","whitelistedProgramVault","whitelistedProgramVaultAuthority","transfer","whitelistWithdraw","updatedVestingAccount","getTokenAccount","whitelistDeposit","withdraw","setDisplayAmount","setFrom","setVesting","maxDisplayAmount","setMaxDisplayAmount","submitBtnDisabled","TransitionComponent","Transition","keepMounted","FormControlLabel","Switch","max","_maxDisplayAmount","forwardRef","ref","Slide","direction","MyNodePage","NewVestingButton","NewVestingDialog","defaultStartDate","defaultStartTs","defaultEndDate","defaultEndTs","setBeneficiary","isValidBeneficiary","displayBeneficiaryError","startTimestamp","setStartTimestamp","timestamp","setTimestamp","isLoading","setIsLoading","submitBtnEnabled","createVestingClickHandler","beneficiaryPublicKey","beneficiaryAccount","vestingVault","vestingAccount","helperText","defaultValue","VestingAccountCard","expanded","setExpanded","hover","setHover","displayFn","input","outstandingLabel","tsOverflow","mod","shiftedStartTs","period","vestingDates","Array","formatDate","rewardOverflow","startBalance","rewardPerPeriod","cumulativeVesting","k","startLabel","endLabel","setAvailableForWithdrawal","withdrawalAccount","setWithdrawalAccount","_availableForWithdrawal","withdrawEnabled","gtn","realizor","newVesting","program","metadata","grantor","onMouseOver","onMouseOut","ListItem","ListItemIcon","ListItemText","toBase58","Collapse","labels","series","options","axisY","FixedScaleAxis","low","high","ticks","lineSmooth","Interpolation","step","split","getMonth","getDate","getFullYear","Vestings","List","LockupPage","MultisigPage","MultisigInstancePage","path","useLocation","pathname","App","createMuiTheme","palette","default","typography","fontFamily","join","overrides","CssBaseline","maxSnack","basename","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","sha256","registrySigner","createSptIx","createVaultIx","createVaultStakeIx","createVaultPwIx","tx0","Transaction","add","rewardQ","tail","head","ota","ownedTokenAccount","msrmFaucet","msrm","maps","oxy","fida","devnet","token1","token2","localhost"],"mappings":"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NrG,KAAM,gBAKd,CACEqG,KAAM,cACNrG,KAAM,CACJ0G,KAAM,SACNC,OAAQ,CACN,CACEN,KAAM,SACNrG,KAAM,aAER,CACEqG,KAAM,KACNrG,KAAM,OAER,CACEqG,KAAM,SACNrG,KAAM,WAKd,CACEqG,KAAM,mBACNrG,KAAM,CACJ0G,KAAM,OACNQ,SAAU,CACR,CACEb,KAAM,YAER,CACEA,KAAM,SACNM,OAAQ,CACN,CACEN,KAAM,WACNrG,KAAM,OAER,CACEqG,KAAM,SACNrG,KAAM,OAER,CACEqG,KAAM,eACNrG,KAAM,aAQpB+G,OAAQ,CACN,CACEC,KAAM,IACNX,KAAM,4BACNY,IAAK,wDAEP,CACED,KAAM,IACNX,KAAM,eACNY,IAAK,2DAEP,CACED,KAAM,IACNX,KAAM,2BACNY,IAAK,+BAEP,CACED,KAAM,IACNX,KAAM,sBACNY,IAAK,oDAEP,CACED,KAAM,IACNX,KAAM,sBACNY,IAAK,2DAEP,CACED,KAAM,IACNX,KAAM,mBACNY,IAAK,sEAEP,CACED,KAAM,IACNX,KAAM,eACNY,IAAK,sDAEP,CACED,KAAM,IACNX,KAAM,oBACNY,IAAK,wBAEP,CACED,KAAM,IACNX,KAAM,UACNY,IAAK,iCAEP,CACED,KAAM,IACNX,KAAM,kBACNY,IAAK,6CAEP,CACED,KAAM,IACNX,KAAM,qBACNY,IAAK,mEAEP,CACED,KAAM,IACNX,KAAM,gBACNY,IAAK,4DAEP,CACED,KAAM,IACNX,KAAM,gBACNY,IAAK,uCAEP,CACED,KAAM,IACNX,KAAM,yBACNY,IAAK,2CAEP,CACED,KAAM,IACNX,KAAM,sBACNY,IAAK,0DAEP,CACED,KAAM,IACNX,KAAM,sBACNY,IAAK,8CAEP,CACED,KAAM,IACNX,KAAM,yBACNY,IAAK,kEAEP,CACED,KAAM,IACNX,KAAM,uBACNY,IAAK,mEAEP,CACED,KAAM,IACNX,KAAM,yBACNY,IAAK,kEAEP,CACED,KAAM,IACNX,KAAM,uBACNY,IAAK,qDAEP,CACED,KAAM,IACNX,KAAM,mBACNY,IAAK,oEAEP,CACED,KAAM,IACN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","file":"static/js/main.cc82930e.chunk.js","sourcesContent":["\"use strict\";\n// @ts-nocheck\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setLayoutEncoder = exports.setLayoutDecoder = exports.accountFlagsLayout = exports.selfTradeBehaviorLayout = exports.orderTypeLayout = exports.sideLayout = exports.VersionedLayout = exports.WideBits = exports.u128 = exports.u64 = exports.publicKeyLayout = exports.zeros = void 0;\nconst buffer_layout_1 = require(\"buffer-layout\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nclass Zeros extends buffer_layout_1.Blob {\n    decode(b, offset) {\n        const slice = super.decode(b, offset);\n        if (!slice.every((v) => v === 0)) {\n            throw new Error('nonzero padding bytes');\n        }\n        return slice;\n    }\n}\nfunction zeros(length) {\n    return new Zeros(length);\n}\nexports.zeros = zeros;\nclass PublicKeyLayout extends buffer_layout_1.Blob {\n    constructor(property) {\n        super(32, property);\n    }\n    decode(b, offset) {\n        return new web3_js_1.PublicKey(super.decode(b, offset));\n    }\n    encode(src, b, offset) {\n        return super.encode(src.toBuffer(), b, offset);\n    }\n}\nfunction publicKeyLayout(property) {\n    return new PublicKeyLayout(property);\n}\nexports.publicKeyLayout = publicKeyLayout;\nclass BNLayout extends buffer_layout_1.Blob {\n    decode(b, offset) {\n        return new bn_js_1.default(super.decode(b, offset), 10, 'le');\n    }\n    encode(src, b, offset) {\n        return super.encode(src.toArrayLike(Buffer, 'le', this.span), b, offset);\n    }\n}\nfunction u64(property) {\n    return new BNLayout(8, property);\n}\nexports.u64 = u64;\nfunction u128(property) {\n    return new BNLayout(16, property);\n}\nexports.u128 = u128;\nclass WideBits extends buffer_layout_1.Layout {\n    constructor(property) {\n        super(8, property);\n        this._lower = buffer_layout_1.bits(buffer_layout_1.u32(), false);\n        this._upper = buffer_layout_1.bits(buffer_layout_1.u32(), false);\n    }\n    addBoolean(property) {\n        if (this._lower.fields.length < 32) {\n            this._lower.addBoolean(property);\n        }\n        else {\n            this._upper.addBoolean(property);\n        }\n    }\n    decode(b, offset = 0) {\n        const lowerDecoded = this._lower.decode(b, offset);\n        const upperDecoded = this._upper.decode(b, offset + this._lower.span);\n        return { ...lowerDecoded, ...upperDecoded };\n    }\n    encode(src, b, offset = 0) {\n        return (this._lower.encode(src, b, offset) +\n            this._upper.encode(src, b, offset + this._lower.span));\n    }\n}\nexports.WideBits = WideBits;\nclass VersionedLayout extends buffer_layout_1.Layout {\n    constructor(version, inner, property) {\n        super(inner.span > 0 ? inner.span + 1 : inner.span, property);\n        this.version = version;\n        this.inner = inner;\n    }\n    decode(b, offset = 0) {\n        // if (b.readUInt8(offset) !== this._version) {\n        //   throw new Error('invalid version');\n        // }\n        return this.inner.decode(b, offset + 1);\n    }\n    encode(src, b, offset = 0) {\n        b.writeUInt8(this.version, offset);\n        return 1 + this.inner.encode(src, b, offset + 1);\n    }\n    getSpan(b, offset = 0) {\n        return 1 + this.inner.getSpan(b, offset + 1);\n    }\n}\nexports.VersionedLayout = VersionedLayout;\nclass EnumLayout extends buffer_layout_1.UInt {\n    constructor(values, span, property) {\n        super(span, property);\n        this.values = values;\n    }\n    encode(src, b, offset) {\n        if (this.values[src] !== undefined) {\n            return super.encode(this.values[src], b, offset);\n        }\n        throw new Error('Invalid ' + this.property);\n    }\n    decode(b, offset) {\n        const decodedValue = super.decode(b, offset);\n        const entry = Object.entries(this.values).find(([, value]) => value === decodedValue);\n        if (entry) {\n            return entry[0];\n        }\n        throw new Error('Invalid ' + this.property);\n    }\n}\nfunction sideLayout(property) {\n    return new EnumLayout({ buy: 0, sell: 1 }, 4, property);\n}\nexports.sideLayout = sideLayout;\nfunction orderTypeLayout(property) {\n    return new EnumLayout({ limit: 0, ioc: 1, postOnly: 2 }, 4, property);\n}\nexports.orderTypeLayout = orderTypeLayout;\nfunction selfTradeBehaviorLayout(property) {\n    return new EnumLayout({ decrementTake: 0, cancelProvide: 1, abortTransaction: 2 }, 4, property);\n}\nexports.selfTradeBehaviorLayout = selfTradeBehaviorLayout;\nconst ACCOUNT_FLAGS_LAYOUT = new WideBits();\nACCOUNT_FLAGS_LAYOUT.addBoolean('initialized');\nACCOUNT_FLAGS_LAYOUT.addBoolean('market');\nACCOUNT_FLAGS_LAYOUT.addBoolean('openOrders');\nACCOUNT_FLAGS_LAYOUT.addBoolean('requestQueue');\nACCOUNT_FLAGS_LAYOUT.addBoolean('eventQueue');\nACCOUNT_FLAGS_LAYOUT.addBoolean('bids');\nACCOUNT_FLAGS_LAYOUT.addBoolean('asks');\nfunction accountFlagsLayout(property = 'accountFlags') {\n    return ACCOUNT_FLAGS_LAYOUT.replicate(property);\n}\nexports.accountFlagsLayout = accountFlagsLayout;\nfunction setLayoutDecoder(layout, decoder) {\n    const originalDecode = layout.decode;\n    layout.decode = function decode(b, offset = 0) {\n        return decoder(originalDecode.call(this, b, offset));\n    };\n}\nexports.setLayoutDecoder = setLayoutDecoder;\nfunction setLayoutEncoder(layout, encoder) {\n    const originalEncode = layout.encode;\n    layout.encode = function encode(src, b, offset) {\n        return originalEncode.call(this, encoder(src), b, offset);\n    };\n    return layout;\n}\nexports.setLayoutEncoder = setLayoutEncoder;\n//# sourceMappingURL=layout.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.closeAccount = exports.mintTo = exports.setAuthority = exports.revoke = exports.approve = exports.transfer = exports.initializeAccount = exports.initializeMint = exports.decodeTokenInstructionData = exports.SRM_DECIMALS = exports.SRM_MINT = exports.MSRM_DECIMALS = exports.MSRM_MINT = exports.WRAPPED_SOL_MINT = exports.TOKEN_PROGRAM_ID = exports.CLOSE_ACCOUNT_OWNER_INDEX = exports.CLOSE_ACCOUNT_DESTINATION_INDEX = exports.CLOSE_ACCOUNT_SOURCE_INDEX = exports.TRANSFER_OWNER_INDEX = exports.TRANSFER_DESTINATION_INDEX = exports.TRANSFER_SOURCE_INDEX = exports.INITIALIZE_ACCOUNT_OWNER_INDEX = exports.INITIALIZE_ACCOUNT_MINT_INDEX = exports.INITIALIZE_ACCOUNT_ACCOUNT_INDEX = void 0;\nconst BufferLayout = __importStar(require(\"buffer-layout\"));\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst layout_1 = require(\"./layout\");\n// NOTE: Update these if the position of arguments for the initializeAccount instruction changes\nexports.INITIALIZE_ACCOUNT_ACCOUNT_INDEX = 0;\nexports.INITIALIZE_ACCOUNT_MINT_INDEX = 1;\nexports.INITIALIZE_ACCOUNT_OWNER_INDEX = 2;\n// NOTE: Update these if the position of arguments for the transfer instruction changes\nexports.TRANSFER_SOURCE_INDEX = 0;\nexports.TRANSFER_DESTINATION_INDEX = 1;\nexports.TRANSFER_OWNER_INDEX = 2;\n// NOTE: Update these if the position of arguments for the closeAccount instruction changes\nexports.CLOSE_ACCOUNT_SOURCE_INDEX = 0;\nexports.CLOSE_ACCOUNT_DESTINATION_INDEX = 1;\nexports.CLOSE_ACCOUNT_OWNER_INDEX = 2;\nexports.TOKEN_PROGRAM_ID = new web3_js_1.PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');\nexports.WRAPPED_SOL_MINT = new web3_js_1.PublicKey('So11111111111111111111111111111111111111112');\nexports.MSRM_MINT = new web3_js_1.PublicKey('MSRMcoVyrFxnSgo5uXwone5SKcGhT1KEJMFEkMEWf9L');\nexports.MSRM_DECIMALS = 0;\nexports.SRM_MINT = new web3_js_1.PublicKey('SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt');\nexports.SRM_DECIMALS = 6;\nconst LAYOUT = BufferLayout.union(BufferLayout.u8('instruction'));\nLAYOUT.addVariant(0, BufferLayout.struct([\n    BufferLayout.u8('decimals'),\n    layout_1.publicKeyLayout('mintAuthority'),\n    BufferLayout.u8('freezeAuthorityOption'),\n    layout_1.publicKeyLayout('freezeAuthority'),\n]), 'initializeMint');\nLAYOUT.addVariant(1, BufferLayout.struct([]), 'initializeAccount');\nLAYOUT.addVariant(3, BufferLayout.struct([BufferLayout.nu64('amount')]), 'transfer');\nLAYOUT.addVariant(4, BufferLayout.struct([BufferLayout.nu64('amount')]), 'approve');\nLAYOUT.addVariant(5, BufferLayout.struct([]), 'revoke');\nLAYOUT.addVariant(6, BufferLayout.struct([\n    BufferLayout.u8('authorityType'),\n    BufferLayout.u8('newAuthorityOption'),\n    layout_1.publicKeyLayout('newAuthority'),\n]), 'setAuthority');\nLAYOUT.addVariant(7, BufferLayout.struct([BufferLayout.nu64('amount')]), 'mintTo');\nLAYOUT.addVariant(8, BufferLayout.struct([BufferLayout.nu64('amount')]), 'burn');\nLAYOUT.addVariant(9, BufferLayout.struct([]), 'closeAccount');\nconst instructionMaxSpan = Math.max(...Object.values(LAYOUT.registry).map((r) => r.span));\nfunction encodeTokenInstructionData(instruction) {\n    const b = Buffer.alloc(instructionMaxSpan);\n    const span = LAYOUT.encode(instruction, b);\n    return b.slice(0, span);\n}\nfunction decodeTokenInstructionData(instruction) {\n    return LAYOUT.decode(instruction);\n}\nexports.decodeTokenInstructionData = decodeTokenInstructionData;\nfunction initializeMint({ mint, decimals, mintAuthority, freezeAuthority = null, }) {\n    const keys = [\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: web3_js_1.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        data: encodeTokenInstructionData({\n            initializeMint: {\n                decimals,\n                mintAuthority,\n                freezeAuthorityOption: !!freezeAuthority,\n                freezeAuthority: freezeAuthority || new web3_js_1.PublicKey(0),\n            },\n        }),\n        programId: exports.TOKEN_PROGRAM_ID,\n    });\n}\nexports.initializeMint = initializeMint;\nfunction initializeAccount({ account, mint, owner }) {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: web3_js_1.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        data: encodeTokenInstructionData({\n            initializeAccount: {},\n        }),\n        programId: exports.TOKEN_PROGRAM_ID,\n    });\n}\nexports.initializeAccount = initializeAccount;\nfunction transfer({ source, destination, amount, owner }) {\n    const keys = [\n        { pubkey: source, isSigner: false, isWritable: true },\n        { pubkey: destination, isSigner: false, isWritable: true },\n        { pubkey: owner, isSigner: true, isWritable: false },\n    ];\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        data: encodeTokenInstructionData({\n            transfer: { amount },\n        }),\n        programId: exports.TOKEN_PROGRAM_ID,\n    });\n}\nexports.transfer = transfer;\nfunction approve({ source, delegate, amount, owner }) {\n    const keys = [\n        { pubkey: source, isSigner: false, isWritable: true },\n        { pubkey: delegate, isSigner: false, isWritable: false },\n        { pubkey: owner, isSigner: true, isWritable: false },\n    ];\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        data: encodeTokenInstructionData({\n            approve: { amount },\n        }),\n        programId: exports.TOKEN_PROGRAM_ID,\n    });\n}\nexports.approve = approve;\nfunction revoke({ source, owner }) {\n    const keys = [\n        { pubkey: source, isSigner: false, isWritable: true },\n        { pubkey: owner, isSigner: true, isWritable: false },\n    ];\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        data: encodeTokenInstructionData({\n            revoke: {},\n        }),\n        programId: exports.TOKEN_PROGRAM_ID,\n    });\n}\nexports.revoke = revoke;\nfunction setAuthority({ target, currentAuthority, newAuthority, authorityType, }) {\n    const keys = [\n        { pubkey: target, isSigner: false, isWritable: true },\n        { pubkey: currentAuthority, isSigner: true, isWritable: false },\n    ];\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        data: encodeTokenInstructionData({\n            setAuthority: {\n                authorityType,\n                newAuthorityOption: !!newAuthority,\n                newAuthority,\n            },\n        }),\n        programId: exports.TOKEN_PROGRAM_ID,\n    });\n}\nexports.setAuthority = setAuthority;\nfunction mintTo({ mint, destination, amount, mintAuthority }) {\n    const keys = [\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: destination, isSigner: false, isWritable: true },\n        { pubkey: mintAuthority, isSigner: true, isWritable: false },\n    ];\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        data: encodeTokenInstructionData({\n            mintTo: { amount },\n        }),\n        programId: exports.TOKEN_PROGRAM_ID,\n    });\n}\nexports.mintTo = mintTo;\nfunction closeAccount({ source, destination, owner }) {\n    const keys = [\n        { pubkey: source, isSigner: false, isWritable: true },\n        { pubkey: destination, isSigner: false, isWritable: true },\n        { pubkey: owner, isSigner: true, isWritable: false },\n    ];\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        data: encodeTokenInstructionData({\n            closeAccount: {},\n        }),\n        programId: exports.TOKEN_PROGRAM_ID,\n    });\n}\nexports.closeAccount = closeAccount;\n//# sourceMappingURL=token-instructions.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MARKETS = exports.TOKEN_MINTS = exports.getLayoutVersion = exports.PROGRAM_LAYOUT_VERSIONS = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst markets_json_1 = __importDefault(require(\"./markets.json\"));\nconst token_mints_json_1 = __importDefault(require(\"./token-mints.json\"));\nexports.PROGRAM_LAYOUT_VERSIONS = {\n    '4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn': 1,\n    'BJ3jrUzddfuSrZHXSCxMUUQsjKEyLmuuyZebkcaFp2fg': 1,\n    'EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o': 2,\n    '9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin': 3,\n};\nfunction getLayoutVersion(programId) {\n    return exports.PROGRAM_LAYOUT_VERSIONS[programId.toString()] || 3;\n}\nexports.getLayoutVersion = getLayoutVersion;\nexports.TOKEN_MINTS = token_mints_json_1.default.map((mint) => {\n    return {\n        address: new web3_js_1.PublicKey(mint.address),\n        name: mint.name,\n    };\n});\nexports.MARKETS = markets_json_1.default.map((market) => {\n    return {\n        address: new web3_js_1.PublicKey(market.address),\n        name: market.name,\n        programId: new web3_js_1.PublicKey(market.programId),\n        deprecated: market.deprecated,\n    };\n});\n//# sourceMappingURL=tokens_and_markets.js.map","type Skin = {\n  active: string;\n  ready: string;\n  inactive: string;\n  notReady: string;\n  deactivating: string;\n};\n\nconst _skin: Skin = {\n  active: '#43a047',\n  ready: '#3f51b5',\n  notReady: '#ccc',\n  inactive: 'red',\n  deactivating: 'rgb(255, 121, 42)',\n};\n\nexport function instance(): Skin {\n  return _skin;\n}\n","import { struct, Layout } from 'buffer-layout';\nimport { rustEnum } from '@project-serum/borsh';\n\n// Simplified since we only use the SetBuffer variant.\nexport type IdlInstruction =\n  | Create\n  | CreateBuffer\n  | Write\n  | SetBuffer\n  | SetAuthority;\n\ntype Create = {};\ntype CreateBuffer = {};\ntype Write = {};\ntype SetBuffer = {};\ntype SetAuthority = {};\n\nconst IDL_INSTRUCTION_LAYOUT: Layout<IdlInstruction> = rustEnum([\n  struct([], 'create'),\n  struct([], 'createBuffer'),\n  struct([], 'write'),\n  struct([], 'setBuffer'),\n  struct([], 'setAuthority'),\n]);\n\nexport function encodeInstruction(i: IdlInstruction): Buffer {\n  const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n  const len = IDL_INSTRUCTION_LAYOUT.encode(i, buffer);\n  return Buffer.concat([IDL_TAG, buffer.slice(0, len)]);\n}\n\n// Reverse for little endian.\nexport const IDL_TAG = Buffer.from('0a69e9a778bcf440', 'hex').reverse();\n","export type Action = {\n  type: ActionType;\n  item: any;\n};\n\nexport enum ActionType {\n  // Common.\n  CommonTriggerBootstrap,\n  CommonAppWillBootstrap,\n  CommonAppDidBootstrap,\n  CommonTriggerShutdown,\n  CommonDidShutdown,\n  CommonWalletDidConnect,\n  CommonWalletDidDisconnect,\n  CommonWalletSetProvider,\n  CommonSetNetwork,\n  CommonOwnedTokenAccountsSet,\n  CommonOwnedTokenAccountsUpdate,\n  CommonWalletReset,\n\n  // Lockup.\n  LockupSetVestings,\n  LockupUpdateVesting,\n  LockupCreateVesting,\n\n  // Registry.\n  RegistrySetMember,\n  RegistrySetRegistrar,\n  RegistrySetPendingWithdrawals,\n  RegistryCreatePendingWithdrawal,\n  RegistryUpdatePendingWithdrawal,\n\n  // Accounts.\n  AccountAdd,\n  AccountUpdate,\n}\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport LockIcon from '@material-ui/icons/Lock';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Collapse from '@material-ui/core/Collapse';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\nimport { PublicKey, SYSVAR_CLOCK_PUBKEY } from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport OwnedTokenAccountsSelect from '../../components/common/OwnedTokenAccountsSelect';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport { toDisplay } from '../../utils/tokens';\nimport { ProgramAccount } from '../../store/reducer';\nimport { Network } from '../../store/config';\nimport { State as StoreState } from '../../store/reducer';\nimport { ViewTransactionOnExplorerButton } from '../../components/common/Notification';\n\ntype RewardsListProps = {\n  rewards: (RewardListItemViewModel | null)[];\n};\n\nexport default function RewardsList(props: RewardsListProps) {\n  const { rewards } = props;\n  let loading = false;\n  rewards.forEach(r => {\n    if (r === null) {\n      loading = true;\n    }\n  });\n  return (\n    <List>\n      {loading ? (\n        <CircularProgress\n          style={{\n            display: 'block',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n          }}\n        />\n      ) : rewards.length > 0 ? (\n        rewards\n          .filter(r => r!.vendor.account.expired === false)\n          .map(r => {\n            return <RewardListItem rli={r as RewardListItemViewModel} />;\n          })\n      ) : (\n        <ListItem>\n          <ListItemText primary={'No rewards found'} />\n        </ListItem>\n      )}\n    </List>\n  );\n}\n\ntype RewardListItemProps = {\n  rli: RewardListItemViewModel;\n};\n\nfunction RewardListItem(props: RewardListItemProps) {\n  const { rli } = props;\n\n  const [open, setOpen] = useState(false);\n\n  const dateLabel = new Date(\n    rli.vendor!.account.startTs.toNumber() * 1000,\n  ).toLocaleString();\n  let fromLabel = `Dropped by ${rli.vendor.account.from.toString()} | ${dateLabel}`;\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(open => !open)}>\n        <LockIcon\n          style={{\n            visibility: rli.reward.locked ? 'visible' : 'hidden',\n            marginRight: '16px',\n          }}\n        />\n        <ListItemText\n          primary={\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'space-between',\n                color: rli.needsClaim ? '#54a15e' : '',\n              }}\n            >\n              <div>{`${toDisplay(\n                rli.vendor.account.total,\n                rli.mint!.account.decimals,\n              )} ${rli.mint!.publicKey}`}</div>\n            </div>\n          }\n          secondary={fromLabel}\n        />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        {rli.vendor === undefined ? (\n          <CircularProgress />\n        ) : (\n          <RewardListItemDetails vendor={rli.vendor!} />\n        )}\n      </Collapse>\n    </>\n  );\n}\n\ntype RewardListItemDetailsProps = {\n  vendor: ProgramAccount;\n};\n\nfunction RewardListItemDetails(props: RewardListItemDetailsProps) {\n  let { vendor } = props;\n  const { registryClient } = useWallet();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const { vendorMint, registrar } = useSelector((state: StoreState) => {\n    return {\n      registrar: state.registry.registrar,\n      vendorMint: state.accounts[vendor.account.mint.toString()],\n    };\n  });\n  const [\n    expiryReceiverToken,\n    setExpiryReceiverToken,\n  ] = useState<null | PublicKey>(null);\n  const expire = async () => {\n    enqueueSnackbar('Expiring reward', {\n      variant: 'info',\n    });\n    const vendorSigner = await PublicKey.createProgramAddress(\n      [\n        registrar.toBuffer(),\n        vendor.publicKey.toBuffer(),\n        Buffer.from([vendor.account.nonce]),\n      ],\n      registryClient.programId,\n    );\n\n    const tx = await registryClient.rpc.expireReward({\n      accounts: {\n        registrar,\n        vendor: vendor.publicKey,\n        vault: vendor.account.vault,\n        vendorSigner,\n        expiryReceiver: vendor.account.expiryReceiver,\n        expiryReceiverToken,\n        tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n        clock: SYSVAR_CLOCK_PUBKEY,\n      },\n    });\n    closeSnackbar();\n    enqueueSnackbar(`Reward expired`, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx as string} />,\n    });\n  };\n  return (\n    <div\n      style={{\n        marginLeft: '56px',\n      }}\n    >\n      <div>Vendor</div>\n      <ul>\n        <li>Address {vendor.publicKey.toString()}</li>\n        <li>Vault: {vendor.account.vault.toString()}</li>\n        <li>Mint: {vendor.account.mint.toString()}</li>\n        <li>\n          Pool token supply snapshot:{' '}\n          {vendor.account.poolTokenSupply.toString()}\n        </li>\n        <li>\n          Expiry:{' '}\n          {new Date(\n            vendor.account.expiryTs.toNumber() * 1000,\n          ).toLocaleDateString()}\n          {` (${vendor.account.expiryTs.toNumber()})`}\n        </li>\n        <li>Expiry receiver: {vendor.account.expiryReceiver.toString()}</li>\n        <li>Expired: {vendor.account.expired.toString()}</li>\n        <li>\n          Reward queue cursor: {vendor.account.rewardEventQCursor.toString()}\n        </li>\n      </ul>\n      {(vendor.account.expiryTs.toNumber() <= Date.now()/1000) && registryClient.provider.wallet.publicKey.equals(vendor.account.expiryReceiver) && (\n        <div style={{ display: 'flex', flexDirection: 'row-reverse' }}>\n          <Button\n            color=\"primary\"\n            variant=\"outlined\"\n            onClick={expire}\n            style={{ marginRight: '24px' }}\n          >\n            Expire\n          </Button>\n          <div style={{ flex: 1, marginRight: '24px' }}>\n            <OwnedTokenAccountsSelect\n              variant=\"outlined\"\n              decimals={vendorMint.decimals}\n              mint={vendor.account.mint}\n              onChange={(f: PublicKey) => {\n                setExpiryReceiverToken(f);\n              }}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport class RewardListItemViewModel {\n  constructor(\n    readonly reward: any,\n    readonly cursor: number,\n    readonly needsClaim: boolean,\n    readonly mint: ProgramAccount,\n    readonly vendor: ProgramAccount,\n  ) {}\n\n  static fromMessage(ctx: Context, event: any): RewardListItemViewModel | null {\n    let needsClaim = false;\n\n    const vendor = ctx.accounts[event.vendor.toString()];\n\n    if (vendor === undefined) {\n      return null;\n    }\n\n    const mint = {\n      publicKey: vendor.mint,\n      account: ctx.accounts[vendor.mint.toString()],\n    };\n\n    if (ctx.member !== undefined) {\n      // Must own shares of the reward's target pool.\n      const sptAccount =\n        ctx.accounts[ctx.member.account.balances.spt.toString()];\n      const lockedSptAccount =\n        ctx.accounts[ctx.member.account.balancesLocked.spt.toString()];\n\n      const ownsPoolShares = sptAccount.amount + lockedSptAccount.amount > 0;\n\n      // Must not have claimed the reward yet.\n      const notYetClaimed =\n        vendor.rewardEventQCursor >= ctx.member.account.rewardsCursor;\n\n      // Must have staked before the reward was dropped.\n      const isEligible = ctx.member.account.lastStakeTs < vendor.startTs;\n\n      // Must not have let the reward expire.\n      const expired = vendor.expired;\n\n      needsClaim = ownsPoolShares && notYetClaimed && isEligible && !expired;\n    }\n\n    const vendorProgramAccount = {\n      publicKey: event.vendor,\n      account: vendor,\n    };\n\n    return new RewardListItemViewModel(\n      event,\n      vendor.rewardEventQCursor,\n      needsClaim,\n      mint,\n      vendorProgramAccount,\n    );\n  }\n}\n\ntype Context = {\n  accounts: any;\n  rewardEventQueue: ProgramAccount;\n  member?: ProgramAccount;\n  network: Network;\n};\n","import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router';\nimport { useSnackbar } from 'notistack';\nimport { encode as encodeBase64 } from 'js-base64';\nimport Container from '@material-ui/core/Container';\nimport AppBar from '@material-ui/core/AppBar';\nimport GavelIcon from '@material-ui/icons/Gavel';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport Paper from '@material-ui/core/Paper';\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\nimport CheckIcon from '@material-ui/icons/Check';\nimport ReceiptIcon from '@material-ui/icons/Receipt';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport Collapse from '@material-ui/core/Collapse';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport InfoIcon from '@material-ui/icons/Info';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport BuildIcon from '@material-ui/icons/Build';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport CardContent from '@material-ui/core/CardContent';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport SearchIcon from '@material-ui/icons/Search';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport AddIcon from '@material-ui/icons/Add';\nimport List from '@material-ui/core/List';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport BN from 'bn.js';\nimport {\n  Account,\n  PublicKey,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n} from '@solana/web3.js';\nimport * as anchor from '@project-serum/anchor';\nimport { useWallet } from '../common/WalletProvider';\nimport { ViewTransactionOnExplorerButton } from '../common/Notification';\nimport * as idl from '../../utils/idl';\n\nexport default function Multisig({ multisig }: { multisig?: PublicKey }) {\n  const history = useHistory();\n  const [multisigAddress, setMultisigAddress] = useState('');\n  const disabled = !isValidPubkey(multisigAddress);\n  const searchFn = () => {\n    history.push(`/multisig/${multisigAddress}`);\n  };\n  return (\n    <div>\n      <div\n        style={{\n          paddingLeft: '16px',\n          paddingRight: '16px',\n          borderBottom: 'solid 1pt #ccc',\n          display: 'flex',\n        }}\n      >\n        <input\n          style={{\n            flex: 1,\n            background: 'none',\n            padding: '16px',\n            border: 'none',\n            outlineWidth: 0,\n          }}\n          placeholder=\"Multisig address\"\n          value={multisigAddress}\n          onChange={e => setMultisigAddress(e.target.value as string)}\n          onKeyPress={e => {\n            if (e.key === 'Enter') {\n              searchFn();\n            }\n          }}\n        />\n        <IconButton disabled={disabled} onClick={searchFn}>\n          <SearchIcon />\n        </IconButton>\n        <NewMultisigButton />\n      </div>\n      <div>{multisig && <MultisigInstance multisig={multisig} />}</div>\n    </div>\n  );\n}\n\nfunction isValidPubkey(addr: string): boolean {\n  try {\n    new PublicKey(addr);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\n\nexport function MultisigInstance({ multisig }: { multisig: PublicKey }) {\n  const { multisigClient } = useWallet();\n  const [multisigAccount, setMultisigAccount] = useState<any>(undefined);\n  const [transactions, setTransactions] = useState<any>(null);\n  const [showSignerDialog, setShowSignerDialog] = useState(false);\n  const [showAddTransactionDialog, setShowAddTransactionDialog] = useState(\n    false,\n  );\n  const [forceRefresh, setForceRefresh] = useState(false);\n  useEffect(() => {\n    multisigClient.account\n      .multisig(multisig)\n      .then((account: any) => {\n        setMultisigAccount(account);\n      })\n      .catch((err: any) => {\n        console.error(err);\n        setMultisigAccount(null);\n      });\n  }, [multisig, multisigClient.account]);\n  useEffect(() => {\n    multisigClient.account.transaction.all(multisig.toBuffer()).then(txs => {\n      setTransactions(txs);\n    });\n  }, [multisigClient.account.transaction, multisig, forceRefresh]);\n  useEffect(() => {\n    multisigClient.account.multisig\n      .subscribe(multisig)\n      .on('change', account => {\n        setMultisigAccount(account);\n      });\n  }, [multisigClient, multisig]);\n  return (\n    <Container fixed maxWidth=\"md\" style={{ marginBottom: '16px' }}>\n      <div>\n        <Card style={{ marginTop: '24px' }}>\n          {multisigAccount === undefined ? (\n            <div style={{ padding: '16px' }}>\n              <CircularProgress\n                style={{\n                  display: 'block',\n                  marginLeft: 'auto',\n                  marginRight: 'auto',\n                }}\n              />\n            </div>\n          ) : multisigAccount === null ? (\n            <CardContent>\n              <Typography\n                color=\"textSecondary\"\n                style={{\n                  padding: '24px',\n                  textAlign: 'center',\n                }}\n              >\n                Multisig not found\n              </Typography>\n            </CardContent>\n          ) : (\n            <></>\n          )}\n        </Card>\n        {multisigAccount && (\n          <Paper>\n            <AppBar\n              style={{ marginTop: '24px' }}\n              position=\"static\"\n              color=\"default\"\n              elevation={1}\n            >\n              <Toolbar>\n                <Typography variant=\"h6\" style={{ flexGrow: 1 }} component=\"h2\">\n                  {multisig.toString()} | {multisigAccount.threshold.toString()}{' '}\n                  of {multisigAccount.owners.length.toString()} Multisig\n                </Typography>\n                <Tooltip title=\"Signer\" arrow>\n                  <IconButton onClick={() => setShowSignerDialog(true)}>\n                    <InfoIcon />\n                  </IconButton>\n                </Tooltip>\n                <Tooltip title=\"Add\" arrow>\n                  <IconButton onClick={() => setShowAddTransactionDialog(true)}>\n                    <AddIcon />\n                  </IconButton>\n                </Tooltip>\n              </Toolbar>\n            </AppBar>\n            <List disablePadding>\n              {transactions === null ? (\n                <div style={{ padding: '16px' }}>\n                  <CircularProgress\n                    style={{\n                      display: 'block',\n                      marginLeft: 'auto',\n                      marginRight: 'auto',\n                    }}\n                  />\n                </div>\n              ) : transactions.length === 0 ? (\n                <ListItem>\n                  <ListItemText primary=\"No transactions found\" />\n                </ListItem>\n              ) : (\n                transactions.map((tx: any) => (\n                  <TxListItem\n                    key={tx.publicKey.toString()}\n                    multisig={multisig}\n                    multisigAccount={multisigAccount}\n                    tx={tx}\n                  />\n                ))\n              )}\n            </List>\n          </Paper>\n        )}\n      </div>\n      <AddTransactionDialog\n        multisig={multisig}\n        open={showAddTransactionDialog}\n        onClose={() => setShowAddTransactionDialog(false)}\n        didAddTransaction={() => setForceRefresh(!forceRefresh)}\n      />\n      {multisigAccount && (\n        <SignerDialog\n          multisig={multisig}\n          multisigAccount={multisigAccount}\n          open={showSignerDialog}\n          onClose={() => setShowSignerDialog(false)}\n        />\n      )}\n    </Container>\n  );\n}\n\nfunction NewMultisigButton() {\n  const [open, setOpen] = useState(false);\n  return (\n    <div>\n      <IconButton onClick={() => setOpen(true)}>\n        <AddIcon />\n      </IconButton>\n      <NewMultisigDialog open={open} onClose={() => setOpen(false)} />\n    </div>\n  );\n}\n\nfunction NewMultisigDialog({\n  open,\n  onClose,\n}: {\n  open: boolean;\n  onClose: () => void;\n}) {\n  const history = useHistory();\n  const { multisigClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n  const [threshold, setThreshold] = useState(2);\n  // @ts-ignore\n  const zeroAddr = new PublicKey().toString();\n  const [participants, setParticipants] = useState([\n    multisigClient.provider.wallet.publicKey.toString(),\n    zeroAddr,\n  ]);\n  const _onClose = () => {\n    onClose();\n    setThreshold(2);\n    setParticipants([zeroAddr, zeroAddr]);\n  };\n  const createMultisig = async () => {\n    enqueueSnackbar('Creating multisig', {\n      variant: 'info',\n    });\n    const multisig = new Account();\n    // Disc. + threshold + nonce.\n    const baseSize = 8 + 8 + 1;\n    // Can only grow the participant set by 2x the initialized value.\n    const ownerSize = participants.length * 2 * 32 + 8;\n    const multisigSize = baseSize + ownerSize;\n    const [, nonce] = await PublicKey.findProgramAddress(\n      [multisig.publicKey.toBuffer()],\n      multisigClient.programId,\n    );\n    const owners = participants.map(p => new PublicKey(p));\n    const tx = await multisigClient.rpc.createMultisig(\n      owners,\n      new BN(threshold),\n      nonce,\n      {\n        accounts: {\n          multisig: multisig.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [multisig],\n        instructions: [\n          await multisigClient.account.multisig.createInstruction(\n            multisig,\n            // @ts-ignore\n            multisigSize,\n          ),\n        ],\n      },\n    );\n    enqueueSnackbar(`Multisig created: ${multisig.publicKey.toString()}`, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    _onClose();\n    history.push(`/multisig/${multisig.publicKey.toString()}`);\n  };\n  return (\n    <Dialog fullWidth open={open} onClose={_onClose} maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          New Multisig\n        </Typography>\n      </DialogTitle>\n      <DialogContent>\n        <TextField\n          fullWidth\n          label=\"Threshold\"\n          value={threshold}\n          type=\"number\"\n          onChange={e => setThreshold(parseInt(e.target.value) as number)}\n        />\n        {participants.map((p, idx) => (\n          <TextField\n            key={p}\n            fullWidth\n            label=\"Participant\"\n            value={p}\n            onChange={e => {\n              const p = [...participants];\n              p[idx] = e.target.value;\n              setParticipants(p);\n            }}\n          />\n        ))}\n        <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n          <IconButton\n            onClick={() => {\n              const p = [...participants];\n              // @ts-ignore\n              p.push(new PublicKey().toString());\n              setParticipants(p);\n            }}\n          >\n            <AddIcon />\n          </IconButton>\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={_onClose}>Cancel</Button>\n        <Button\n          variant=\"contained\"\n          type=\"submit\"\n          color=\"primary\"\n          onClick={() =>\n            createMultisig().catch(err => {\n              const str = err ? err.toString() : '';\n              enqueueSnackbar(`Error creating multisig: ${str}`, {\n                variant: 'error',\n              });\n            })\n          }\n        >\n          Create\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nfunction TxListItem({\n  multisig,\n  multisigAccount,\n  tx,\n}: {\n  multisig: PublicKey;\n  multisigAccount: any;\n  tx: any;\n}) {\n  const { enqueueSnackbar } = useSnackbar();\n  const { multisigClient } = useWallet();\n  const [open, setOpen] = useState(false);\n  const [txAccount, setTxAccount] = useState(tx.account);\n  useEffect(() => {\n    multisigClient.account.transaction\n      .subscribe(tx.publicKey)\n      .on('change', account => {\n        setTxAccount(account);\n      });\n  }, [multisigClient, multisig, tx.publicKey]);\n  const rows = [\n    {\n      field: 'Program ID',\n      value: txAccount.programId.toString(),\n    },\n    {\n      field: 'Did execute',\n      value: txAccount.didExecute.toString(),\n    },\n    {\n      field: 'Instruction data',\n      value: (\n        <code\n          style={{\n            wordBreak: 'break-word',\n            width: '370px',\n            background: 'black',\n            color: '#ffffff',\n            float: 'right',\n            textAlign: 'left',\n          }}\n        >\n          {encodeBase64(txAccount.data)}\n        </code>\n      ),\n    },\n    {\n      field: 'Multisig',\n      value: txAccount.multisig.toString(),\n    },\n    {\n      field: 'Transaction account',\n      value: tx.publicKey.toString(),\n    },\n    {\n      field: 'Owner set seqno',\n      value: txAccount.ownerSetSeqno.toString(),\n    },\n  ];\n  const msAccountRows = multisigAccount.owners.map(\n    (owner: PublicKey, idx: number) => {\n      return {\n        field: owner.toString(),\n        value: txAccount.signers[idx] ? <CheckIcon /> : <RemoveIcon />,\n      };\n    },\n  );\n  const approve = async () => {\n    enqueueSnackbar('Approving transaction', {\n      variant: 'info',\n    });\n    await multisigClient.rpc.approve({\n      accounts: {\n        multisig,\n        transaction: tx.publicKey,\n        owner: multisigClient.provider.wallet.publicKey,\n      },\n    });\n    enqueueSnackbar('Transaction approved', {\n      variant: 'success',\n    });\n  };\n  const execute = async () => {\n    enqueueSnackbar('Executing transaction', {\n      variant: 'info',\n    });\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId,\n    );\n    await multisigClient.rpc.executeTransaction({\n      accounts: {\n        multisig,\n        multisigSigner,\n        transaction: tx.publicKey,\n      },\n      remainingAccounts: txAccount.accounts\n        .map((t: any) => {\n          if (t.pubkey.equals(multisigSigner)) {\n            return { ...t, isSigner: false };\n          }\n          return t;\n        })\n        .concat({\n          pubkey: txAccount.programId,\n          isWritable: false,\n          isSigner: false,\n        }),\n    });\n    enqueueSnackbar('Transaction executed', {\n      variant: 'success',\n    });\n  };\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(!open)}>\n        <ListItemIcon>{icon(tx, multisigClient)}</ListItemIcon>\n        {ixLabel(tx, multisigClient)}\n        {txAccount.didExecute && (\n          <CheckCircleIcon style={{ marginRight: '16px' }} />\n        )}\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <div style={{ background: '#ececec', padding: '10px' }}>\n          <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n            <Button\n              style={{ marginRight: '10px' }}\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() =>\n                approve().catch(err => {\n                  let errStr = '';\n                  if (err) {\n                    errStr = err.toString();\n                  }\n                  enqueueSnackbar(`Unable to approve transaction: ${errStr}`, {\n                    variant: 'error',\n                  });\n                })\n              }\n            >\n              Approve\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={() =>\n                execute().catch(err => {\n                  let errStr = '';\n                  if (err) {\n                    errStr = err.toString();\n                  }\n                  enqueueSnackbar(`Unable to execute transaction: ${errStr}`, {\n                    variant: 'error',\n                  });\n                })\n              }\n            >\n              Execute\n            </Button>\n          </div>\n          <Card style={{ marginTop: '16px' }}>\n            <CardContent>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Transaction Field</TableCell>\n                    <TableCell align=\"right\">Value</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {rows.map(r => (\n                    <TableRow>\n                      <TableCell>{r.field}</TableCell>\n                      <TableCell align=\"right\">{r.value}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n          <Card style={{ marginTop: '16px' }}>\n            <CardContent>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Multisig Owner</TableCell>\n                    <TableCell align=\"right\">Did Sign</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {txAccount.ownerSetSeqno === multisigAccount.ownerSetSeqno &&\n                    msAccountRows.map((r: any) => (\n                      <TableRow>\n                        <TableCell>{r.field}</TableCell>\n                        <TableCell align=\"right\">{r.value}</TableCell>\n                      </TableRow>\n                    ))}\n                </TableBody>\n              </Table>\n              {txAccount.ownerSetSeqno !== multisigAccount.ownerSetSeqno && (\n                <div style={{ marginTop: '16px' }}>\n                  <Typography\n                    color=\"textSecondary\"\n                    style={{ textAlign: 'center' }}\n                  >\n                    The owner set has changed since this transaction was created\n                  </Typography>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n          <Card style={{ marginTop: '16px' }}>\n            <CardContent>\n              <AccountsList accounts={txAccount.accounts} />\n            </CardContent>\n          </Card>\n        </div>\n      </Collapse>\n    </>\n  );\n}\n\nfunction ixLabel(tx: any, multisigClient: any) {\n  if (tx.account.programId.equals(BPF_LOADER_UPGRADEABLE_PID)) {\n    // Upgrade instruction.\n    if (tx.account.data.equals(Buffer.from([3, 0, 0, 0]))) {\n      return (\n        <ListItemText\n          primary=\"Program upgrade\"\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n  }\n  if (tx.account.programId.equals(multisigClient.programId)) {\n    const setThresholdSighash = multisigClient.coder.sighash(\n      'global',\n      'change_threshold',\n    );\n    if (setThresholdSighash.equals(tx.account.data.slice(0, 8))) {\n      return (\n        <ListItemText\n          primary=\"Set threshold\"\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n    const setOwnersSighash = multisigClient.coder.sighash(\n      'global',\n      'set_owners',\n    );\n    if (setOwnersSighash.equals(tx.account.data.slice(0, 8))) {\n      return (\n        <ListItemText\n          primary=\"Set owners\"\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n  }\n  if (idl.IDL_TAG.equals(tx.account.data.slice(0, 8))) {\n    return (\n      <ListItemText primary=\"Upgrade IDL\" secondary={tx.publicKey.toString()} />\n    );\n  }\n  return <ListItemText primary={tx.publicKey.toString()} />;\n}\n\nfunction AccountsList({ accounts }: { accounts: any }) {\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>Account</TableCell>\n          <TableCell align=\"right\">Writable</TableCell>\n          <TableCell align=\"right\">Signer</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {accounts.map((r: any) => (\n          <TableRow>\n            <TableCell>{r.pubkey.toString()}</TableCell>\n            <TableCell align=\"right\">{r.isWritable.toString()}</TableCell>\n            <TableCell align=\"right\">{r.isSigner.toString()}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n}\n\nfunction SignerDialog({\n  multisig,\n  multisigAccount,\n  open,\n  onClose,\n}: {\n  multisig: PublicKey;\n  multisigAccount: any;\n  open: boolean;\n  onClose: () => void;\n}) {\n  const { multisigClient } = useWallet();\n  const [signer, setSigner] = useState<null | string>(null);\n  useEffect(() => {\n    PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId,\n    ).then(addrNonce => setSigner(addrNonce[0].toString()));\n  }, [multisig, multisigClient.programId, setSigner]);\n  return (\n    <Dialog open={open} fullWidth onClose={onClose} maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          Multisig Info\n        </Typography>\n      </DialogTitle>\n      <DialogContent style={{ paddingBottom: '16px' }}>\n        <DialogContentText>\n          <b>Program derived address</b>: {signer}. This is the address one\n          should use as the authority for data governed by the multisig.\n        </DialogContentText>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Owners</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {multisigAccount.owners.map((r: any) => (\n              <TableRow>\n                <TableCell>{r.toString()}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Close</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nfunction AddTransactionDialog({\n  multisig,\n  open,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  open: boolean;\n  onClose: () => void;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  return (\n    <Dialog open={open} fullWidth onClose={onClose} maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          New Transaction\n        </Typography>\n      </DialogTitle>\n      <DialogContent style={{ paddingBottom: '16px' }}>\n        <DialogContentText>\n          Create a new transaction to be signed by the multisig. This\n          transaction will not execute until enough owners have signed the\n          transaction.\n        </DialogContentText>\n        <List disablePadding>\n          <ProgramUpdateListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <IdlUpgradeListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <MultisigSetOwnersListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <ChangeThresholdListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n        </List>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nfunction ChangeThresholdListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(open => !open)}>\n        <ListItemIcon>\n          <GavelIcon />\n        </ListItemIcon>\n        <ListItemText primary={'Change threshold'} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <ChangeThresholdListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nfunction ChangeThresholdListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [threshold, setThreshold] = useState(2);\n  const { multisigClient } = useWallet();\n  // @ts-ignore\n  const { enqueueSnackbar } = useSnackbar();\n  const changeThreshold = async () => {\n    enqueueSnackbar('Creating change threshold transaction', {\n      variant: 'info',\n    });\n    const data = changeThresholdData(multisigClient, threshold);\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId,\n    );\n    const accounts = [\n      {\n        pubkey: multisig,\n        isWritable: true,\n        isSigner: false,\n      },\n      {\n        pubkey: multisigSigner,\n        isWritable: false,\n        isSigner: true,\n      },\n    ];\n    const transaction = new Account();\n    const txSize = 1000; // todo\n    const tx = await multisigClient.rpc.createTransaction(\n      multisigClient.programId,\n      accounts,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize,\n          ),\n        ],\n      },\n    );\n    enqueueSnackbar('Transaction created', {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n  return (\n    <div\n      style={{\n        background: '#f1f0f0',\n        paddingLeft: '24px',\n        paddingRight: '24px',\n      }}\n    >\n      <TextField\n        fullWidth\n        style={{ marginTop: '16px' }}\n        label=\"Threshold\"\n        value={threshold}\n        type=\"number\"\n        onChange={e => {\n          // @ts-ignore\n          setThreshold(e.target.value);\n        }}\n      />\n      <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n        <Button onClick={() => changeThreshold()}>Change Threshold</Button>\n      </div>\n    </div>\n  );\n}\n\nfunction MultisigSetOwnersListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(open => !open)}>\n        <ListItemIcon>\n          <SupervisorAccountIcon />\n        </ListItemIcon>\n        <ListItemText primary={'Set owners'} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <SetOwnersListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nfunction SetOwnersListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const { multisigClient } = useWallet();\n  // @ts-ignore\n  const zeroAddr = new PublicKey().toString();\n  const [participants, setParticipants] = useState([\n    multisigClient.provider.wallet.publicKey.toString(),\n    zeroAddr,\n  ]);\n  const { enqueueSnackbar } = useSnackbar();\n  const setOwners = async () => {\n    enqueueSnackbar('Creating setOwners transaction', {\n      variant: 'info',\n    });\n    const owners = participants.map(p => new PublicKey(p));\n    const data = setOwnersData(multisigClient, owners);\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId,\n    );\n    const accounts = [\n      {\n        pubkey: multisig,\n        isWritable: true,\n        isSigner: false,\n      },\n      {\n        pubkey: multisigSigner,\n        isWritable: false,\n        isSigner: true,\n      },\n    ];\n    const transaction = new Account();\n    const txSize = 5000; // TODO: tighter bound.\n    const tx = await multisigClient.rpc.createTransaction(\n      multisigClient.programId,\n      accounts,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize,\n          ),\n        ],\n      },\n    );\n    enqueueSnackbar('Transaction created', {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n  return (\n    <div\n      style={{\n        background: '#f1f0f0',\n        paddingLeft: '24px',\n        paddingRight: '24px',\n      }}\n    >\n      {participants.map((p, idx) => (\n        <TextField\n          fullWidth\n          style={{ marginTop: '16px' }}\n          label=\"Participant\"\n          value={p}\n          onChange={e => {\n            const p = [...participants];\n            p[idx] = e.target.value;\n            setParticipants(p);\n          }}\n        />\n      ))}\n      <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n        <IconButton\n          onClick={() => {\n            const p = [...participants];\n            // @ts-ignore\n            p.push(new PublicKey().toString());\n            setParticipants(p);\n          }}\n        >\n          <AddIcon />\n        </IconButton>\n      </div>\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'flex-end',\n          marginTop: '16px',\n          paddingBottom: '16px',\n        }}\n      >\n        <Button onClick={() => setOwners()}>Set Owners</Button>\n      </div>\n    </div>\n  );\n}\n\nfunction IdlUpgradeListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(open => !open)}>\n        <ListItemIcon>\n          <DescriptionIcon />\n        </ListItemIcon>\n        <ListItemText primary={'Upgrade IDL'} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <UpgradeIdlListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nfunction UpgradeIdlListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [programId, setProgramId] = useState<null | string>(null);\n  const [buffer, setBuffer] = useState<null | string>(null);\n\n  const { multisigClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n  const createTransactionAccount = async () => {\n    enqueueSnackbar('Creating transaction', {\n      variant: 'info',\n    });\n    const programAddr = new PublicKey(programId as string);\n    const bufferAddr = new PublicKey(buffer as string);\n    const idlAddr = await anchor.utils.idlAddress(programAddr);\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId,\n    );\n    const data = idl.encodeInstruction({ setBuffer: {} });\n    const accs = [\n      {\n        pubkey: bufferAddr,\n        isWritable: true,\n        isSigner: false,\n      },\n      { pubkey: idlAddr, isWritable: true, isSigner: false },\n      { pubkey: multisigSigner, isWritable: true, isSigner: false },\n    ];\n    const txSize = 1000; // TODO: tighter bound.\n    const transaction = new Account();\n    const tx = await multisigClient.rpc.createTransaction(\n      programAddr,\n      accs,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize,\n          ),\n        ],\n      },\n    );\n    enqueueSnackbar('Transaction created', {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n\n  return (\n    <div\n      style={{\n        background: '#f1f0f0',\n        paddingLeft: '24px',\n        paddingRight: '24px',\n      }}\n    >\n      <TextField\n        fullWidth\n        style={{ marginTop: '16px' }}\n        label=\"Program ID\"\n        value={programId}\n        onChange={e => setProgramId(e.target.value as string)}\n      />\n      <TextField\n        style={{ marginTop: '16px' }}\n        fullWidth\n        label=\"New IDL buffer\"\n        value={buffer}\n        onChange={e => setBuffer(e.target.value as string)}\n      />\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'flex-end',\n          marginTop: '16px',\n          paddingBottom: '16px',\n        }}\n      >\n        <Button onClick={() => createTransactionAccount()}>\n          Create upgrade\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nfunction ProgramUpdateListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(open => !open)}>\n        <ListItemIcon>\n          <BuildIcon />\n        </ListItemIcon>\n        <ListItemText primary={'Upgrade program'} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <UpgradeProgramListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nconst BPF_LOADER_UPGRADEABLE_PID = new PublicKey(\n  'BPFLoaderUpgradeab1e11111111111111111111111',\n);\n\nfunction UpgradeProgramListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [programId, setProgramId] = useState<null | string>(null);\n  const [buffer, setBuffer] = useState<null | string>(null);\n\n  const { multisigClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n  const createTransactionAccount = async () => {\n    enqueueSnackbar('Creating transaction', {\n      variant: 'info',\n    });\n    const programAddr = new PublicKey(programId as string);\n    const bufferAddr = new PublicKey(buffer as string);\n    // Hard code serialization.\n    const data = Buffer.from([3, 0, 0, 0]);\n\n    const programAccount = await (async () => {\n      const programAccount = await multisigClient.provider.connection.getAccountInfo(\n        programAddr,\n      );\n      if (programAccount === null) {\n        throw new Error('Invalid program ID');\n      }\n      return {\n        // Hard code deserialization.\n        programdataAddress: new PublicKey(programAccount.data.slice(4)),\n      };\n    })();\n    const spill = multisigClient.provider.wallet.publicKey;\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId,\n    );\n    const accs = [\n      {\n        pubkey: programAccount.programdataAddress,\n        isWritable: true,\n        isSigner: false,\n      },\n      { pubkey: programAddr, isWritable: true, isSigner: false },\n      { pubkey: bufferAddr, isWritable: true, isSigner: false },\n      { pubkey: spill, isWritable: true, isSigner: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isWritable: false, isSigner: false },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false, isSigner: false },\n      { pubkey: multisigSigner, isWritable: false, isSigner: false },\n    ];\n    const txSize = 1000; // TODO: tighter bound.\n    const transaction = new Account();\n    const tx = await multisigClient.rpc.createTransaction(\n      BPF_LOADER_UPGRADEABLE_PID,\n      accs,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize,\n          ),\n        ],\n      },\n    );\n    enqueueSnackbar('Transaction created', {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n\n  return (\n    <div\n      style={{\n        background: '#f1f0f0',\n        paddingLeft: '24px',\n        paddingRight: '24px',\n      }}\n    >\n      <TextField\n        fullWidth\n        style={{ marginTop: '16px' }}\n        label=\"Program ID\"\n        value={programId}\n        onChange={e => setProgramId(e.target.value as string)}\n      />\n      <TextField\n        style={{ marginTop: '16px' }}\n        fullWidth\n        label=\"New program buffer\"\n        value={buffer}\n        onChange={e => setBuffer(e.target.value as string)}\n      />\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'flex-end',\n          marginTop: '16px',\n          paddingBottom: '16px',\n        }}\n      >\n        <Button onClick={() => createTransactionAccount()}>\n          Create upgrade\n        </Button>\n      </div>\n    </div>\n  );\n}\n\n// @ts-ignore\nfunction icon(tx, multisigClient) {\n  if (tx.account.programId.equals(BPF_LOADER_UPGRADEABLE_PID)) {\n    return <BuildIcon />;\n  }\n  if (tx.account.programId.equals(multisigClient.programId)) {\n    const setThresholdSighash = multisigClient.coder.sighash(\n      'global',\n      'change_threshold',\n    );\n    if (setThresholdSighash.equals(tx.account.data.slice(0, 8))) {\n      return <GavelIcon />;\n    }\n    const setOwnersSighash = multisigClient.coder.sighash(\n      'global',\n      'set_owners',\n    );\n    if (setOwnersSighash.equals(tx.account.data.slice(0, 8))) {\n      return <SupervisorAccountIcon />;\n    }\n  }\n  if (idl.IDL_TAG.equals(tx.account.data.slice(0, 8))) {\n    return <DescriptionIcon />;\n  }\n  return <ReceiptIcon />;\n}\n\n// @ts-ignore\nfunction changeThresholdData(multisigClient, threshold) {\n  return multisigClient.coder.instruction.encode('change_threshold', {\n    threshold: new BN(threshold),\n  });\n}\n\n// @ts-ignore\nfunction setOwnersData(multisigClient, owners) {\n  return multisigClient.coder.instruction.encode('set_owners', {\n    owners,\n  });\n}\n","import React, {\n  ReactNode,\n  PropsWithChildren,\n  useContext,\n  useState,\n  useEffect,\n} from 'react';\nimport BN from 'bn.js';\nimport { PublicKey } from '@solana/web3.js';\nimport { TokenListProvider, TokenInfo } from '@solana/spl-token-registry';\nimport { networks } from '../store/config';\n\nconst TokenListContext = React.createContext<TokenListContextValues>({\n  tokenMap: new Map(),\n});\n\ntype TokenListContextValues = {\n  tokenMap: Map<string, TokenInfo>;\n};\n\nexport function useTokenInfos(): Map<string, TokenInfo> {\n  const { tokenMap } = useContext<TokenListContextValues>(TokenListContext);\n  return tokenMap;\n}\n\nexport function TokenRegistryProvider(props: PropsWithChildren<ReactNode>) {\n  const [tokenMap, setTokenMap] = useState<Map<string, TokenInfo>>(new Map());\n  useEffect(() => {\n    new TokenListProvider().resolve().then(tokens => {\n      const tokenList = tokens.filterByClusterSlug('mainnet-beta').getList();\n      setTokenMap(\n        tokenList.reduce((map, item) => {\n          map.set(item.address, item);\n          return map;\n        }, new Map()),\n      );\n    });\n  }, [setTokenMap]);\n\n  return (\n    <TokenListContext.Provider value={{ tokenMap }}>\n      {props.children}\n    </TokenListContext.Provider>\n  );\n}\n\nexport function fromDisplay(amount: number, decimals: number): BN {\n  return new BN(amount * 10 ** decimals);\n}\n\nexport function toDisplay(amount: BN | number, decimals: number): string {\n  if (amount instanceof BN) {\n    amount = amount.toNumber();\n  }\n  return (amount / 10 ** decimals).toString();\n}\n\nexport function toDisplayLabel(mint: PublicKey): string {\n  let whitelistedMint = Object.keys(networks.mainnet.mints)\n    .filter(label => networks.mainnet.mints[label].equals(mint))\n    .pop();\n  if (whitelistedMint) {\n    return whitelistedMint.toUpperCase();\n  }\n  return mint.toString();\n}\n","import { Idl } from '@project-serum/anchor';\n\nconst idl: Idl = {\n  version: '0.0.0',\n  name: 'lockup',\n  instructions: [\n    {\n      name: 'createVesting',\n      accounts: [\n        {\n          name: 'vesting',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositor',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositorAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'beneficiary',\n          type: 'publicKey',\n        },\n        {\n          name: 'depositAmount',\n          type: 'u64',\n        },\n        {\n          name: 'nonce',\n          type: 'u8',\n        },\n        {\n          name: 'startTs',\n          type: 'i64',\n        },\n        {\n          name: 'endTs',\n          type: 'i64',\n        },\n        {\n          name: 'periodCount',\n          type: 'u64',\n        },\n        {\n          name: 'realizor',\n          type: {\n            option: {\n              defined: 'Realizor',\n            },\n          },\n        },\n      ],\n    },\n    {\n      name: 'withdraw',\n      accounts: [\n        {\n          name: 'vesting',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'vault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vestingSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'token',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'whitelistWithdraw',\n      accounts: [\n        {\n          name: 'transfer',\n          accounts: [\n            {\n              name: 'lockup',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'beneficiary',\n              isMut: false,\n              isSigner: true,\n            },\n            {\n              name: 'whitelistedProgram',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'vesting',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vestingSigner',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'tokenProgram',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'whitelistedProgramVault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'whitelistedProgramVaultAuthority',\n              isMut: false,\n              isSigner: false,\n            },\n          ],\n        },\n      ],\n      args: [\n        {\n          name: 'instructionData',\n          type: 'bytes',\n        },\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'whitelistDeposit',\n      accounts: [\n        {\n          name: 'transfer',\n          accounts: [\n            {\n              name: 'lockup',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'beneficiary',\n              isMut: false,\n              isSigner: true,\n            },\n            {\n              name: 'whitelistedProgram',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'vesting',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vestingSigner',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'tokenProgram',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'whitelistedProgramVault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'whitelistedProgramVaultAuthority',\n              isMut: false,\n              isSigner: false,\n            },\n          ],\n        },\n      ],\n      args: [\n        {\n          name: 'instructionData',\n          type: 'bytes',\n        },\n      ],\n    },\n    {\n      name: 'availableForWithdrawal',\n      accounts: [\n        {\n          name: 'vesting',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  state: {\n    struct: {\n      name: 'Lockup',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'authority',\n            type: 'publicKey',\n          },\n          {\n            name: 'whitelist',\n            type: {\n              vec: {\n                defined: 'WhitelistEntry',\n              },\n            },\n          },\n        ],\n      },\n    },\n    methods: [\n      {\n        name: 'new',\n        accounts: [\n          {\n            name: 'authority',\n            isMut: false,\n            isSigner: true,\n          },\n        ],\n        args: [],\n      },\n      {\n        name: 'whitelistAdd',\n        accounts: [\n          {\n            name: 'authority',\n            isMut: false,\n            isSigner: true,\n          },\n        ],\n        args: [\n          {\n            name: 'entry',\n            type: {\n              defined: 'WhitelistEntry',\n            },\n          },\n        ],\n      },\n      {\n        name: 'whitelistDelete',\n        accounts: [\n          {\n            name: 'authority',\n            isMut: false,\n            isSigner: true,\n          },\n        ],\n        args: [\n          {\n            name: 'entry',\n            type: {\n              defined: 'WhitelistEntry',\n            },\n          },\n        ],\n      },\n      {\n        name: 'setAuthority',\n        accounts: [\n          {\n            name: 'authority',\n            isMut: false,\n            isSigner: true,\n          },\n        ],\n        args: [\n          {\n            name: 'newAuthority',\n            type: 'publicKey',\n          },\n        ],\n      },\n    ],\n  },\n  accounts: [\n    {\n      name: 'Vesting',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'beneficiary',\n            type: 'publicKey',\n          },\n          {\n            name: 'mint',\n            type: 'publicKey',\n          },\n          {\n            name: 'vault',\n            type: 'publicKey',\n          },\n          {\n            name: 'grantor',\n            type: 'publicKey',\n          },\n          {\n            name: 'outstanding',\n            type: 'u64',\n          },\n          {\n            name: 'startBalance',\n            type: 'u64',\n          },\n          {\n            name: 'createdTs',\n            type: 'i64',\n          },\n          {\n            name: 'startTs',\n            type: 'i64',\n          },\n          {\n            name: 'endTs',\n            type: 'i64',\n          },\n          {\n            name: 'periodCount',\n            type: 'u64',\n          },\n          {\n            name: 'whitelistOwned',\n            type: 'u64',\n          },\n          {\n            name: 'nonce',\n            type: 'u8',\n          },\n          {\n            name: 'realizor',\n            type: {\n              option: {\n                defined: 'Realizor',\n              },\n            },\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: 'Realizor',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'program',\n            type: 'publicKey',\n          },\n          {\n            name: 'metadata',\n            type: 'publicKey',\n          },\n        ],\n      },\n    },\n    {\n      name: 'WhitelistEntry',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'programId',\n            type: 'publicKey',\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 100,\n      name: 'InvalidTimestamp',\n      msg: 'Vesting end must be greater than the current unix timestamp.',\n    },\n    {\n      code: 101,\n      name: 'InvalidPeriod',\n      msg: 'The number of vesting periods must be greater than zero.',\n    },\n    {\n      code: 102,\n      name: 'InvalidDepositAmount',\n      msg: 'The vesting deposit amount must be greater than zero.',\n    },\n    {\n      code: 103,\n      name: 'InvalidWhitelistEntry',\n      msg: 'The Whitelist entry is not a valid program address.',\n    },\n    {\n      code: 104,\n      name: 'InvalidProgramAddress',\n      msg: 'Invalid program address. Did you provide the correct nonce?',\n    },\n    {\n      code: 105,\n      name: 'InvalidVaultOwner',\n      msg: 'Invalid vault owner.',\n    },\n    {\n      code: 106,\n      name: 'InvalidVaultAmount',\n      msg: 'Vault amount must be zero.',\n    },\n    {\n      code: 107,\n      name: 'InsufficientWithdrawalBalance',\n      msg: 'Insufficient withdrawal balance.',\n    },\n    {\n      code: 108,\n      name: 'WhitelistFull',\n      msg: 'Whitelist is full',\n    },\n    {\n      code: 109,\n      name: 'WhitelistEntryAlreadyExists',\n      msg: 'Whitelist entry already exists',\n    },\n    {\n      code: 110,\n      name: 'InsufficientWhitelistDepositAmount',\n      msg: 'Balance must go up when performing a whitelist deposit',\n    },\n    {\n      code: 111,\n      name: 'WhitelistDepositOverflow',\n      msg: 'Cannot deposit more than withdrawn',\n    },\n    {\n      code: 112,\n      name: 'WhitelistWithdrawLimit',\n      msg: 'Tried to withdraw over the specified limit',\n    },\n    {\n      code: 113,\n      name: 'WhitelistEntryNotFound',\n      msg: 'Whitelist entry not found.',\n    },\n    {\n      code: 114,\n      name: 'Unauthorized',\n      msg: 'You do not have sufficient permissions to perform this action.',\n    },\n    {\n      code: 115,\n      name: 'UnableToWithdrawWhileStaked',\n      msg: 'You are unable to realize projected rewards until unstaking.',\n    },\n    {\n      code: 116,\n      name: 'InvalidLockRealizor',\n      msg: \"The given lock realizor doesn't match the vesting account.\",\n    },\n    {\n      code: 117,\n      name: 'UnrealizedVesting',\n      msg: 'You have not realized this vesting account.',\n    },\n    {\n      code: 118,\n      name: 'InvalidSchedule',\n      msg: 'Invalid vesting schedule given.',\n    },\n  ],\n};\n\nexport default idl;\n","import { Idl } from '@project-serum/anchor';\n\nconst idl: Idl = {\n  version: '0.0.0',\n  name: 'registry',\n  instructions: [\n    {\n      name: 'initialize',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'rewardEventQ',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'mint',\n          type: 'publicKey',\n        },\n        {\n          name: 'authority',\n          type: 'publicKey',\n        },\n        {\n          name: 'nonce',\n          type: 'u8',\n        },\n        {\n          name: 'withdrawalTimelock',\n          type: 'i64',\n        },\n        {\n          name: 'stakeRate',\n          type: 'u64',\n        },\n        {\n          name: 'rewardQLen',\n          type: 'u32',\n        },\n      ],\n    },\n    {\n      name: 'updateRegistrar',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'newAuthority',\n          type: {\n            option: 'publicKey',\n          },\n        },\n        {\n          name: 'withdrawalTimelock',\n          type: {\n            option: 'i64',\n          },\n        },\n      ],\n    },\n    {\n      name: 'createMember',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'balances',\n          accounts: [\n            {\n              name: 'spt',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultStake',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultPw',\n              isMut: true,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'balancesLocked',\n          accounts: [\n            {\n              name: 'spt',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultStake',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultPw',\n              isMut: true,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'nonce',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'updateMember',\n      accounts: [\n        {\n          name: 'member',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'metadata',\n          type: {\n            option: 'publicKey',\n          },\n        },\n      ],\n    },\n    {\n      name: 'deposit',\n      accounts: [\n        {\n          name: 'member',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'vault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositor',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositorAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'depositLocked',\n      accounts: [\n        {\n          name: 'vesting',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'vestingVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositorAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'memberVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'registry',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'stake',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rewardEventQ',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'balances',\n          accounts: [\n            {\n              name: 'spt',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultStake',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultPw',\n              isMut: true,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'balancesLocked',\n          accounts: [\n            {\n              name: 'spt',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultStake',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultPw',\n              isMut: true,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'registrarSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'sptAmount',\n          type: 'u64',\n        },\n        {\n          name: 'locked',\n          type: 'bool',\n        },\n      ],\n    },\n    {\n      name: 'startUnstake',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rewardEventQ',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'pendingWithdrawal',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'balances',\n          accounts: [\n            {\n              name: 'spt',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultStake',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultPw',\n              isMut: true,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'balancesLocked',\n          accounts: [\n            {\n              name: 'spt',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultStake',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultPw',\n              isMut: true,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'sptAmount',\n          type: 'u64',\n        },\n        {\n          name: 'locked',\n          type: 'bool',\n        },\n      ],\n    },\n    {\n      name: 'endUnstake',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'pendingWithdrawal',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vaultPw',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'withdraw',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'vault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'depositor',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'withdrawLocked',\n      accounts: [\n        {\n          name: 'vesting',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'vestingVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vestingSigner',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'memberVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'registry',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'dropReward',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rewardEventQ',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'vendor',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vendorVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositor',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositorAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'kind',\n          type: {\n            defined: 'RewardVendorKind',\n          },\n        },\n        {\n          name: 'total',\n          type: 'u64',\n        },\n        {\n          name: 'expiryTs',\n          type: 'i64',\n        },\n        {\n          name: 'expiryReceiver',\n          type: 'publicKey',\n        },\n        {\n          name: 'nonce',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'claimReward',\n      accounts: [\n        {\n          name: 'cmn',\n          accounts: [\n            {\n              name: 'registrar',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'member',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'beneficiary',\n              isMut: false,\n              isSigner: true,\n            },\n            {\n              name: 'balances',\n              accounts: [\n                {\n                  name: 'spt',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vault',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultStake',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultPw',\n                  isMut: true,\n                  isSigner: false,\n                },\n              ],\n            },\n            {\n              name: 'balancesLocked',\n              accounts: [\n                {\n                  name: 'spt',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vault',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultStake',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultPw',\n                  isMut: true,\n                  isSigner: false,\n                },\n              ],\n            },\n            {\n              name: 'vendor',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vendorSigner',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'tokenProgram',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'clock',\n              isMut: false,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'to',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'claimRewardLocked',\n      accounts: [\n        {\n          name: 'cmn',\n          accounts: [\n            {\n              name: 'registrar',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'member',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'beneficiary',\n              isMut: false,\n              isSigner: true,\n            },\n            {\n              name: 'balances',\n              accounts: [\n                {\n                  name: 'spt',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vault',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultStake',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultPw',\n                  isMut: true,\n                  isSigner: false,\n                },\n              ],\n            },\n            {\n              name: 'balancesLocked',\n              accounts: [\n                {\n                  name: 'spt',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vault',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultStake',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultPw',\n                  isMut: true,\n                  isSigner: false,\n                },\n              ],\n            },\n            {\n              name: 'vendor',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vendorSigner',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'tokenProgram',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'clock',\n              isMut: false,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'registry',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'lockupProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'nonce',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'expireReward',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'vendor',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vendorSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'expiryReceiver',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'expiryReceiverToken',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  state: {\n    struct: {\n      name: 'Registry',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'lockupProgram',\n            type: 'publicKey',\n          },\n        ],\n      },\n    },\n    methods: [\n      {\n        name: 'new',\n        accounts: [\n          {\n            name: 'lockupProgram',\n            isMut: false,\n            isSigner: false,\n          },\n        ],\n        args: [],\n      },\n      {\n        name: 'setLockupProgram',\n        accounts: [\n          {\n            name: 'authority',\n            isMut: false,\n            isSigner: true,\n          },\n        ],\n        args: [\n          {\n            name: 'lockupProgram',\n            type: 'publicKey',\n          },\n        ],\n      },\n    ],\n  },\n  accounts: [\n    {\n      name: 'Registrar',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'authority',\n            type: 'publicKey',\n          },\n          {\n            name: 'nonce',\n            type: 'u8',\n          },\n          {\n            name: 'withdrawalTimelock',\n            type: 'i64',\n          },\n          {\n            name: 'rewardEventQ',\n            type: 'publicKey',\n          },\n          {\n            name: 'mint',\n            type: 'publicKey',\n          },\n          {\n            name: 'poolMint',\n            type: 'publicKey',\n          },\n          {\n            name: 'stakeRate',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n    {\n      name: 'Member',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'registrar',\n            type: 'publicKey',\n          },\n          {\n            name: 'beneficiary',\n            type: 'publicKey',\n          },\n          {\n            name: 'metadata',\n            type: 'publicKey',\n          },\n          {\n            name: 'balances',\n            type: {\n              defined: 'BalanceSandbox',\n            },\n          },\n          {\n            name: 'balancesLocked',\n            type: {\n              defined: 'BalanceSandbox',\n            },\n          },\n          {\n            name: 'rewardsCursor',\n            type: 'u32',\n          },\n          {\n            name: 'lastStakeTs',\n            type: 'i64',\n          },\n          {\n            name: 'nonce',\n            type: 'u8',\n          },\n        ],\n      },\n    },\n    {\n      name: 'PendingWithdrawal',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'registrar',\n            type: 'publicKey',\n          },\n          {\n            name: 'member',\n            type: 'publicKey',\n          },\n          {\n            name: 'burned',\n            type: 'bool',\n          },\n          {\n            name: 'pool',\n            type: 'publicKey',\n          },\n          {\n            name: 'startTs',\n            type: 'i64',\n          },\n          {\n            name: 'endTs',\n            type: 'i64',\n          },\n          {\n            name: 'amount',\n            type: 'u64',\n          },\n          {\n            name: 'locked',\n            type: 'bool',\n          },\n        ],\n      },\n    },\n    {\n      name: 'RewardQueue',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'head',\n            type: 'u32',\n          },\n          {\n            name: 'tail',\n            type: 'u32',\n          },\n          {\n            name: 'events',\n            type: {\n              vec: {\n                defined: 'RewardEvent',\n              },\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: 'RewardVendor',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'registrar',\n            type: 'publicKey',\n          },\n          {\n            name: 'vault',\n            type: 'publicKey',\n          },\n          {\n            name: 'mint',\n            type: 'publicKey',\n          },\n          {\n            name: 'nonce',\n            type: 'u8',\n          },\n          {\n            name: 'poolTokenSupply',\n            type: 'u64',\n          },\n          {\n            name: 'rewardEventQCursor',\n            type: 'u32',\n          },\n          {\n            name: 'startTs',\n            type: 'i64',\n          },\n          {\n            name: 'expiryTs',\n            type: 'i64',\n          },\n          {\n            name: 'expiryReceiver',\n            type: 'publicKey',\n          },\n          {\n            name: 'from',\n            type: 'publicKey',\n          },\n          {\n            name: 'total',\n            type: 'u64',\n          },\n          {\n            name: 'expired',\n            type: 'bool',\n          },\n          {\n            name: 'kind',\n            type: {\n              defined: 'RewardVendorKind',\n            },\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: 'BalanceSandbox',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'spt',\n            type: 'publicKey',\n          },\n          {\n            name: 'vault',\n            type: 'publicKey',\n          },\n          {\n            name: 'vaultStake',\n            type: 'publicKey',\n          },\n          {\n            name: 'vaultPw',\n            type: 'publicKey',\n          },\n        ],\n      },\n    },\n    {\n      name: 'RewardEvent',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'vendor',\n            type: 'publicKey',\n          },\n          {\n            name: 'ts',\n            type: 'i64',\n          },\n          {\n            name: 'locked',\n            type: 'bool',\n          },\n        ],\n      },\n    },\n    {\n      name: 'RewardVendorKind',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'Unlocked',\n          },\n          {\n            name: 'Locked',\n            fields: [\n              {\n                name: 'start_ts',\n                type: 'i64',\n              },\n              {\n                name: 'end_ts',\n                type: 'i64',\n              },\n              {\n                name: 'period_count',\n                type: 'u64',\n              },\n            ],\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 100,\n      name: 'RewardQAlreadyInitialized',\n      msg: 'The given reward queue has already been initialized.',\n    },\n    {\n      code: 101,\n      name: 'InvalidNonce',\n      msg: \"The nonce given doesn't derive a valid program address.\",\n    },\n    {\n      code: 102,\n      name: 'InvalidPoolMintAuthority',\n      msg: 'Invalid pool mint authority',\n    },\n    {\n      code: 103,\n      name: 'InvalidMemberSigner',\n      msg: \"Member signer doesn't match the derived address.\",\n    },\n    {\n      code: 104,\n      name: 'InvalidVaultDeposit',\n      msg: 'The given vault owner must match the signing depositor.',\n    },\n    {\n      code: 105,\n      name: 'InvalidDepositor',\n      msg: \"The signing depositor doesn't match either of the balance accounts\",\n    },\n    {\n      code: 106,\n      name: 'InvalidVault',\n      msg: 'The vault given does not match the vault expected.',\n    },\n    {\n      code: 107,\n      name: 'InvalidVaultOwner',\n      msg: 'Invalid vault owner.',\n    },\n    {\n      code: 108,\n      name: 'Unknown',\n      msg: 'An unknown error has occured.',\n    },\n    {\n      code: 109,\n      name: 'UnstakeTimelock',\n      msg: 'The unstake timelock has not yet expired.',\n    },\n    {\n      code: 110,\n      name: 'InsufficientReward',\n      msg: 'Reward vendors must have at least one token unit per pool token',\n    },\n    {\n      code: 111,\n      name: 'InvalidExpiry',\n      msg: 'Reward expiry must be after the current clock timestamp.',\n    },\n    {\n      code: 112,\n      name: 'VendorExpired',\n      msg: 'The reward vendor has been expired.',\n    },\n    {\n      code: 113,\n      name: 'CursorAlreadyProcessed',\n      msg: 'This reward has already been processed.',\n    },\n    {\n      code: 114,\n      name: 'NotStakedDuringDrop',\n      msg: 'The account was not staked at the time of this reward.',\n    },\n    {\n      code: 115,\n      name: 'VendorNotYetExpired',\n      msg: 'The vendor is not yet eligible for expiry.',\n    },\n    {\n      code: 116,\n      name: 'RewardsNeedsProcessing',\n      msg: 'Please collect your reward before otherwise using the program.',\n    },\n    {\n      code: 117,\n      name: 'ExpectedLockedVendor',\n      msg: 'Locked reward vendor expected but an unlocked vendor was given.',\n    },\n    {\n      code: 118,\n      name: 'ExpectedUnlockedVendor',\n      msg: 'Unlocked reward vendor expected but a locked vendor was given.',\n    },\n    {\n      code: 119,\n      name: 'InvalidVestingSigner',\n      msg: 'Locked deposit from an invalid deposit authority.',\n    },\n    {\n      code: 120,\n      name: 'UnrealizedReward',\n      msg: 'Locked rewards cannot be realized until one unstaked all tokens.',\n    },\n    {\n      code: 121,\n      name: 'InvalidBeneficiary',\n      msg: \"The beneficiary doesn't match.\",\n    },\n    {\n      code: 122,\n      name: 'InvalidRealizorMetadata',\n      msg: 'The given member account does not match the realizor metadata.',\n    },\n    {\n      code: 123,\n      name: 'InvalidVestingSchedule',\n      msg: 'Invalid vesting schedule for the locked reward.',\n    },\n    {\n      code: 124,\n      name: 'InvalidProgramAuthority',\n      msg: 'Please specify the correct authority for this program.',\n    },\n  ],\n};\n\nexport default idl;\n","import { Idl } from '@project-serum/anchor';\n\nconst idl: Idl = {\n  version: '0.0.0',\n  name: 'multisig',\n  instructions: [\n    {\n      name: 'createMultisig',\n      accounts: [\n        {\n          name: 'multisig',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'owners',\n          type: {\n            vec: 'publicKey',\n          },\n        },\n        {\n          name: 'threshold',\n          type: 'u64',\n        },\n        {\n          name: 'nonce',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'createTransaction',\n      accounts: [\n        {\n          name: 'multisig',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'transaction',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'proposer',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'pid',\n          type: 'publicKey',\n        },\n        {\n          name: 'accs',\n          type: {\n            vec: {\n              defined: 'TransactionAccount',\n            },\n          },\n        },\n        {\n          name: 'data',\n          type: 'bytes',\n        },\n      ],\n    },\n    {\n      name: 'approve',\n      accounts: [\n        {\n          name: 'multisig',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'transaction',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'setOwners',\n      accounts: [\n        {\n          name: 'multisig',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'multisigSigner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'owners',\n          type: {\n            vec: 'publicKey',\n          },\n        },\n      ],\n    },\n    {\n      name: 'changeThreshold',\n      accounts: [\n        {\n          name: 'multisig',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'multisigSigner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'threshold',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'executeTransaction',\n      accounts: [\n        {\n          name: 'multisig',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'multisigSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'transaction',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  accounts: [\n    {\n      name: 'Multisig',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'owners',\n            type: {\n              vec: 'publicKey',\n            },\n          },\n          {\n            name: 'threshold',\n            type: 'u64',\n          },\n          {\n            name: 'nonce',\n            type: 'u8',\n          },\n          {\n            name: 'ownerSetSeqno',\n            type: 'u32',\n          },\n        ],\n      },\n    },\n    {\n      name: 'Transaction',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'multisig',\n            type: 'publicKey',\n          },\n          {\n            name: 'programId',\n            type: 'publicKey',\n          },\n          {\n            name: 'accounts',\n            type: {\n              vec: {\n                defined: 'TransactionAccount',\n              },\n            },\n          },\n          {\n            name: 'data',\n            type: 'bytes',\n          },\n          {\n            name: 'signers',\n            type: {\n              vec: 'bool',\n            },\n          },\n          {\n            name: 'didExecute',\n            type: 'bool',\n          },\n          {\n            name: 'ownerSetSeqno',\n            type: 'u32',\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: 'TransactionAccount',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'pubkey',\n            type: 'publicKey',\n          },\n          {\n            name: 'isSigner',\n            type: 'bool',\n          },\n          {\n            name: 'isWritable',\n            type: 'bool',\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 100,\n      name: 'InvalidOwner',\n      msg: 'The given owner is not part of this multisig.',\n    },\n    {\n      code: 101,\n      name: 'NotEnoughSigners',\n      msg: 'Not enough owners signed this transaction.',\n    },\n    {\n      code: 102,\n      name: 'TransactionAlreadySigned',\n      msg: 'Cannot delete a transaction that has been signed by an owner.',\n    },\n    {\n      code: 103,\n      name: 'Overflow',\n      msg: 'Overflow when adding.',\n    },\n    {\n      code: 104,\n      name: 'UnableToDelete',\n      msg: 'Cannot delete a transaction the owner did not create.',\n    },\n    {\n      code: 105,\n      name: 'AlreadyExecuted',\n      msg: 'The given transaction has already been executed.',\n    },\n    {\n      code: 106,\n      name: 'InvalidThreshold',\n      msg: 'Threshold must be less than or equal to the number of owners.',\n    },\n  ],\n};\n\nexport default idl;\n","import React, {\n  PropsWithChildren,\n  ReactElement,\n  ReactNode,\n  useMemo,\n  useContext,\n} from 'react';\nimport { useSelector } from 'react-redux';\nimport { Connection, ConfirmOptions } from '@solana/web3.js';\n// @ts-ignore\nimport Wallet from '@project-serum/sol-wallet-adapter';\nimport { Provider } from '@project-serum/common';\nimport { Program } from '@project-serum/anchor';\nimport { State as StoreState } from '../../store/reducer';\nimport LockupIdl from '../../idl/lockup';\nimport RegistryIdl from '../../idl/registry';\nimport MultisigIdl from '../../idl/multisig';\n\nexport function useWallet(): WalletContextValues {\n  const w = useContext(WalletContext);\n  if (!w) {\n    throw new Error('Missing wallet context');\n  }\n  return w;\n}\n\nconst WalletContext = React.createContext<null | WalletContextValues>(null);\n\ntype WalletContextValues = {\n  wallet: Wallet;\n  lockupClient: Program;\n  registryClient: Program;\n  multisigClient: Program;\n};\n\nexport default function WalletProvider(\n  props: PropsWithChildren<ReactNode>,\n): ReactElement {\n  const { walletProvider, network } = useSelector((state: StoreState) => {\n    return {\n      walletProvider: state.common.walletProvider,\n      network: state.common.network,\n    };\n  });\n\n  const {\n    wallet,\n    lockupClient,\n    registryClient,\n    multisigClient,\n  } = useMemo(() => {\n    const opts: ConfirmOptions = {\n      preflightCommitment: 'recent',\n      commitment: 'recent',\n    };\n    const connection = new Connection(network.url, opts.preflightCommitment);\n    const wallet = new Wallet(walletProvider, network.url);\n    const provider = new Provider(connection, wallet, opts);\n\n    const lockupClient = new Program(\n      LockupIdl,\n      network.lockupProgramId,\n      provider,\n    );\n    const registryClient = new Program(\n      RegistryIdl,\n      network.registryProgramId,\n      provider,\n    );\n\n    const multisigClient = new Program(\n      MultisigIdl,\n      network.multisigProgramId,\n      provider,\n    );\n\n    return {\n      wallet,\n      lockupClient,\n      registryClient,\n      multisigClient,\n    };\n  }, [walletProvider, network]);\n\n  return (\n    <WalletContext.Provider\n      value={{ wallet, lockupClient, registryClient, multisigClient }}\n    >\n      {props.children}\n    </WalletContext.Provider>\n  );\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DexInstructions = exports.decodeInstruction = exports.encodeInstruction = exports.INSTRUCTION_LAYOUT = exports.NEW_ORDER_V3_OWNER_INDEX = exports.NEW_ORDER_V3_OPEN_ORDERS_INDEX = exports.NEW_ORDER_OWNER_INDEX = exports.NEW_ORDER_OPEN_ORDERS_INDEX = exports.SETTLE_FUNDS_QUOTE_WALLET_INDEX = exports.SETTLE_FUNDS_BASE_WALLET_INDEX = void 0;\nconst buffer_layout_1 = require(\"buffer-layout\");\nconst layout_1 = require(\"./layout\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst token_instructions_1 = require(\"./token-instructions\");\n// NOTE: Update these if the position of arguments for the settleFunds instruction changes\nexports.SETTLE_FUNDS_BASE_WALLET_INDEX = 5;\nexports.SETTLE_FUNDS_QUOTE_WALLET_INDEX = 6;\n// NOTE: Update these if the position of arguments for the newOrder instruction changes\nexports.NEW_ORDER_OPEN_ORDERS_INDEX = 1;\nexports.NEW_ORDER_OWNER_INDEX = 4;\n// NOTE: Update these if the position of arguments for the newOrder instruction changes\nexports.NEW_ORDER_V3_OPEN_ORDERS_INDEX = 1;\nexports.NEW_ORDER_V3_OWNER_INDEX = 7;\nexports.INSTRUCTION_LAYOUT = new layout_1.VersionedLayout(0, buffer_layout_1.union(buffer_layout_1.u32('instruction')));\nexports.INSTRUCTION_LAYOUT.inner.addVariant(0, buffer_layout_1.struct([\n    layout_1.u64('baseLotSize'),\n    layout_1.u64('quoteLotSize'),\n    buffer_layout_1.u16('feeRateBps'),\n    layout_1.u64('vaultSignerNonce'),\n    layout_1.u64('quoteDustThreshold'),\n]), 'initializeMarket');\nexports.INSTRUCTION_LAYOUT.inner.addVariant(1, buffer_layout_1.struct([\n    layout_1.sideLayout('side'),\n    layout_1.u64('limitPrice'),\n    layout_1.u64('maxQuantity'),\n    layout_1.orderTypeLayout('orderType'),\n    layout_1.u64('clientId'),\n]), 'newOrder');\nexports.INSTRUCTION_LAYOUT.inner.addVariant(2, buffer_layout_1.struct([buffer_layout_1.u16('limit')]), 'matchOrders');\nexports.INSTRUCTION_LAYOUT.inner.addVariant(3, buffer_layout_1.struct([buffer_layout_1.u16('limit')]), 'consumeEvents');\nexports.INSTRUCTION_LAYOUT.inner.addVariant(4, buffer_layout_1.struct([\n    layout_1.sideLayout('side'),\n    layout_1.u128('orderId'),\n    layout_1.publicKeyLayout('openOrders'),\n    buffer_layout_1.u8('openOrdersSlot'),\n]), 'cancelOrder');\nexports.INSTRUCTION_LAYOUT.inner.addVariant(5, buffer_layout_1.struct([]), 'settleFunds');\nexports.INSTRUCTION_LAYOUT.inner.addVariant(6, buffer_layout_1.struct([layout_1.u64('clientId')]), 'cancelOrderByClientId');\nexports.INSTRUCTION_LAYOUT.inner.addVariant(10, buffer_layout_1.struct([\n    layout_1.sideLayout('side'),\n    layout_1.u64('limitPrice'),\n    layout_1.u64('maxBaseQuantity'),\n    layout_1.u64('maxQuoteQuantity'),\n    layout_1.selfTradeBehaviorLayout('selfTradeBehavior'),\n    layout_1.orderTypeLayout('orderType'),\n    layout_1.u64('clientId'),\n    buffer_layout_1.u16('limit'),\n]), 'newOrderV3');\nexports.INSTRUCTION_LAYOUT.inner.addVariant(11, buffer_layout_1.struct([layout_1.sideLayout('side'), layout_1.u128('orderId')]), 'cancelOrderV2');\nexports.INSTRUCTION_LAYOUT.inner.addVariant(12, buffer_layout_1.struct([layout_1.u64('clientId')]), 'cancelOrderByClientIdV2');\nfunction encodeInstruction(instruction) {\n    const b = Buffer.alloc(100);\n    return b.slice(0, exports.INSTRUCTION_LAYOUT.encode(instruction, b));\n}\nexports.encodeInstruction = encodeInstruction;\nfunction decodeInstruction(message) {\n    return exports.INSTRUCTION_LAYOUT.decode(message);\n}\nexports.decodeInstruction = decodeInstruction;\nclass DexInstructions {\n    static initializeMarket({ market, requestQueue, eventQueue, bids, asks, baseVault, quoteVault, baseMint, quoteMint, baseLotSize, quoteLotSize, feeRateBps, vaultSignerNonce, quoteDustThreshold, programId, }) {\n        let rentSysvar = new web3_js_1.PublicKey('SysvarRent111111111111111111111111111111111');\n        return new web3_js_1.TransactionInstruction({\n            keys: [\n                { pubkey: market, isSigner: false, isWritable: true },\n                { pubkey: requestQueue, isSigner: false, isWritable: true },\n                { pubkey: eventQueue, isSigner: false, isWritable: true },\n                { pubkey: bids, isSigner: false, isWritable: true },\n                { pubkey: asks, isSigner: false, isWritable: true },\n                { pubkey: baseVault, isSigner: false, isWritable: true },\n                { pubkey: quoteVault, isSigner: false, isWritable: true },\n                { pubkey: baseMint, isSigner: false, isWritable: false },\n                { pubkey: quoteMint, isSigner: false, isWritable: false },\n                { pubkey: rentSysvar, isSigner: false, isWritable: false },\n            ],\n            programId,\n            data: encodeInstruction({\n                initializeMarket: {\n                    baseLotSize,\n                    quoteLotSize,\n                    feeRateBps,\n                    vaultSignerNonce,\n                    quoteDustThreshold,\n                },\n            }),\n        });\n    }\n    static newOrder({ market, openOrders, payer, owner, requestQueue, baseVault, quoteVault, side, limitPrice, maxQuantity, orderType, clientId, programId, feeDiscountPubkey = null, }) {\n        const keys = [\n            { pubkey: market, isSigner: false, isWritable: true },\n            { pubkey: openOrders, isSigner: false, isWritable: true },\n            { pubkey: requestQueue, isSigner: false, isWritable: true },\n            { pubkey: payer, isSigner: false, isWritable: true },\n            { pubkey: owner, isSigner: true, isWritable: false },\n            { pubkey: baseVault, isSigner: false, isWritable: true },\n            { pubkey: quoteVault, isSigner: false, isWritable: true },\n            { pubkey: token_instructions_1.TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n            { pubkey: web3_js_1.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n        ];\n        if (feeDiscountPubkey) {\n            keys.push({\n                pubkey: feeDiscountPubkey,\n                isSigner: false,\n                isWritable: false,\n            });\n        }\n        return new web3_js_1.TransactionInstruction({\n            keys,\n            programId,\n            data: encodeInstruction({\n                newOrder: clientId\n                    ? { side, limitPrice, maxQuantity, orderType, clientId }\n                    : { side, limitPrice, maxQuantity, orderType },\n            }),\n        });\n    }\n    static newOrderV3({ market, openOrders, payer, owner, requestQueue, eventQueue, bids, asks, baseVault, quoteVault, side, limitPrice, maxBaseQuantity, maxQuoteQuantity, orderType, clientId, programId, selfTradeBehavior, feeDiscountPubkey = null, }) {\n        const keys = [\n            { pubkey: market, isSigner: false, isWritable: true },\n            { pubkey: openOrders, isSigner: false, isWritable: true },\n            { pubkey: requestQueue, isSigner: false, isWritable: true },\n            { pubkey: eventQueue, isSigner: false, isWritable: true },\n            { pubkey: bids, isSigner: false, isWritable: true },\n            { pubkey: asks, isSigner: false, isWritable: true },\n            { pubkey: payer, isSigner: false, isWritable: true },\n            { pubkey: owner, isSigner: true, isWritable: false },\n            { pubkey: baseVault, isSigner: false, isWritable: true },\n            { pubkey: quoteVault, isSigner: false, isWritable: true },\n            { pubkey: token_instructions_1.TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n            { pubkey: web3_js_1.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n        ];\n        if (feeDiscountPubkey) {\n            keys.push({\n                pubkey: feeDiscountPubkey,\n                isSigner: false,\n                isWritable: false,\n            });\n        }\n        return new web3_js_1.TransactionInstruction({\n            keys,\n            programId,\n            data: encodeInstruction({\n                newOrderV3: {\n                    side,\n                    limitPrice,\n                    maxBaseQuantity,\n                    maxQuoteQuantity,\n                    selfTradeBehavior,\n                    orderType,\n                    clientId,\n                    limit: 65535,\n                },\n            }),\n        });\n    }\n    static matchOrders({ market, requestQueue, eventQueue, bids, asks, baseVault, quoteVault, limit, programId, }) {\n        return new web3_js_1.TransactionInstruction({\n            keys: [\n                { pubkey: market, isSigner: false, isWritable: true },\n                { pubkey: requestQueue, isSigner: false, isWritable: true },\n                { pubkey: eventQueue, isSigner: false, isWritable: true },\n                { pubkey: bids, isSigner: false, isWritable: true },\n                { pubkey: asks, isSigner: false, isWritable: true },\n                { pubkey: baseVault, isSigner: false, isWritable: true },\n                { pubkey: quoteVault, isSigner: false, isWritable: true },\n            ],\n            programId,\n            data: encodeInstruction({ matchOrders: { limit } }),\n        });\n    }\n    static consumeEvents({ market, eventQueue, openOrdersAccounts, limit, programId, }) {\n        return new web3_js_1.TransactionInstruction({\n            keys: [\n                ...openOrdersAccounts.map((account) => ({\n                    pubkey: account,\n                    isSigner: false,\n                    isWritable: true,\n                })),\n                { pubkey: market, isSigner: false, isWritable: true },\n                { pubkey: eventQueue, isSigner: false, isWritable: true },\n            ],\n            programId,\n            data: encodeInstruction({ consumeEvents: { limit } }),\n        });\n    }\n    static cancelOrder({ market, openOrders, owner, requestQueue, side, orderId, openOrdersSlot, programId, }) {\n        return new web3_js_1.TransactionInstruction({\n            keys: [\n                { pubkey: market, isSigner: false, isWritable: false },\n                { pubkey: openOrders, isSigner: false, isWritable: true },\n                { pubkey: requestQueue, isSigner: false, isWritable: true },\n                { pubkey: owner, isSigner: true, isWritable: false },\n            ],\n            programId,\n            data: encodeInstruction({\n                cancelOrder: { side, orderId, openOrders, openOrdersSlot },\n            }),\n        });\n    }\n    static cancelOrderV2({ market, bids, asks, eventQueue, openOrders, owner, side, orderId, openOrdersSlot, programId, }) {\n        return new web3_js_1.TransactionInstruction({\n            keys: [\n                { pubkey: market, isSigner: false, isWritable: false },\n                { pubkey: bids, isSigner: false, isWritable: true },\n                { pubkey: asks, isSigner: false, isWritable: true },\n                { pubkey: openOrders, isSigner: false, isWritable: true },\n                { pubkey: owner, isSigner: true, isWritable: false },\n                { pubkey: eventQueue, isSigner: false, isWritable: true },\n            ],\n            programId,\n            data: encodeInstruction({\n                cancelOrderV2: { side, orderId },\n            }),\n        });\n    }\n    static cancelOrderByClientId({ market, openOrders, owner, requestQueue, clientId, programId, }) {\n        return new web3_js_1.TransactionInstruction({\n            keys: [\n                { pubkey: market, isSigner: false, isWritable: false },\n                { pubkey: openOrders, isSigner: false, isWritable: true },\n                { pubkey: requestQueue, isSigner: false, isWritable: true },\n                { pubkey: owner, isSigner: true, isWritable: false },\n            ],\n            programId,\n            data: encodeInstruction({\n                cancelOrderByClientId: { clientId },\n            }),\n        });\n    }\n    static cancelOrderByClientIdV2({ market, openOrders, owner, bids, asks, eventQueue, clientId, programId, }) {\n        return new web3_js_1.TransactionInstruction({\n            keys: [\n                { pubkey: market, isSigner: false, isWritable: false },\n                { pubkey: bids, isSigner: false, isWritable: true },\n                { pubkey: asks, isSigner: false, isWritable: true },\n                { pubkey: openOrders, isSigner: false, isWritable: true },\n                { pubkey: owner, isSigner: true, isWritable: false },\n                { pubkey: eventQueue, isSigner: false, isWritable: true },\n            ],\n            programId,\n            data: encodeInstruction({\n                cancelOrderByClientIdV2: { clientId },\n            }),\n        });\n    }\n    static settleFunds({ market, openOrders, owner, baseVault, quoteVault, baseWallet, quoteWallet, vaultSigner, programId, referrerQuoteWallet = null, }) {\n        const keys = [\n            { pubkey: market, isSigner: false, isWritable: true },\n            { pubkey: openOrders, isSigner: false, isWritable: true },\n            { pubkey: owner, isSigner: true, isWritable: false },\n            { pubkey: baseVault, isSigner: false, isWritable: true },\n            { pubkey: quoteVault, isSigner: false, isWritable: true },\n            { pubkey: baseWallet, isSigner: false, isWritable: true },\n            { pubkey: quoteWallet, isSigner: false, isWritable: true },\n            { pubkey: vaultSigner, isSigner: false, isWritable: false },\n            { pubkey: token_instructions_1.TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n        ];\n        if (referrerQuoteWallet) {\n            keys.push({\n                pubkey: referrerQuoteWallet,\n                isSigner: false,\n                isWritable: true,\n            });\n        }\n        return new web3_js_1.TransactionInstruction({\n            keys,\n            programId,\n            data: encodeInstruction({\n                settleFunds: {},\n            }),\n        });\n    }\n}\nexports.DexInstructions = DexInstructions;\n//# sourceMappingURL=instructions.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EVENT_QUEUE_LAYOUT = exports.REQUEST_QUEUE_LAYOUT = exports.decodeEventQueue = exports.decodeRequestQueue = exports.decodeEventsSince = void 0;\nconst buffer_layout_1 = require(\"buffer-layout\");\nconst layout_1 = require(\"./layout\");\nconst REQUEST_QUEUE_HEADER = buffer_layout_1.struct([\n    buffer_layout_1.blob(5),\n    layout_1.accountFlagsLayout('accountFlags'),\n    buffer_layout_1.u32('head'),\n    layout_1.zeros(4),\n    buffer_layout_1.u32('count'),\n    layout_1.zeros(4),\n    buffer_layout_1.u32('nextSeqNum'),\n    layout_1.zeros(4),\n]);\nconst REQUEST_FLAGS = buffer_layout_1.bits(buffer_layout_1.u8(), false, 'requestFlags');\nREQUEST_FLAGS.addBoolean('newOrder');\nREQUEST_FLAGS.addBoolean('cancelOrder');\nREQUEST_FLAGS.addBoolean('bid');\nREQUEST_FLAGS.addBoolean('postOnly');\nREQUEST_FLAGS.addBoolean('ioc');\nconst REQUEST = buffer_layout_1.struct([\n    REQUEST_FLAGS,\n    buffer_layout_1.u8('openOrdersSlot'),\n    buffer_layout_1.u8('feeTier'),\n    buffer_layout_1.blob(5),\n    layout_1.u64('maxBaseSizeOrCancelId'),\n    layout_1.u64('nativeQuoteQuantityLocked'),\n    layout_1.u128('orderId'),\n    layout_1.publicKeyLayout('openOrders'),\n    layout_1.u64('clientOrderId'),\n]);\nconst EVENT_QUEUE_HEADER = buffer_layout_1.struct([\n    buffer_layout_1.blob(5),\n    layout_1.accountFlagsLayout('accountFlags'),\n    buffer_layout_1.u32('head'),\n    layout_1.zeros(4),\n    buffer_layout_1.u32('count'),\n    layout_1.zeros(4),\n    buffer_layout_1.u32('seqNum'),\n    layout_1.zeros(4),\n]);\nconst EVENT_FLAGS = buffer_layout_1.bits(buffer_layout_1.u8(), false, 'eventFlags');\nEVENT_FLAGS.addBoolean('fill');\nEVENT_FLAGS.addBoolean('out');\nEVENT_FLAGS.addBoolean('bid');\nEVENT_FLAGS.addBoolean('maker');\nconst EVENT = buffer_layout_1.struct([\n    EVENT_FLAGS,\n    buffer_layout_1.u8('openOrdersSlot'),\n    buffer_layout_1.u8('feeTier'),\n    buffer_layout_1.blob(5),\n    layout_1.u64('nativeQuantityReleased'),\n    layout_1.u64('nativeQuantityPaid'),\n    layout_1.u64('nativeFeeOrRebate'),\n    layout_1.u128('orderId'),\n    layout_1.publicKeyLayout('openOrders'),\n    layout_1.u64('clientOrderId'),\n]);\nfunction decodeQueueItem(headerLayout, nodeLayout, buffer, nodeIndex) {\n    return nodeLayout.decode(buffer, headerLayout.span + nodeIndex * nodeLayout.span);\n}\nfunction decodeQueue(headerLayout, nodeLayout, buffer, history) {\n    const header = headerLayout.decode(buffer);\n    const allocLen = Math.floor((buffer.length - headerLayout.span) / nodeLayout.span);\n    const nodes = [];\n    if (history) {\n        for (let i = 0; i < Math.min(history, allocLen); ++i) {\n            const nodeIndex = (header.head + header.count + allocLen - 1 - i) % allocLen;\n            nodes.push(decodeQueueItem(headerLayout, nodeLayout, buffer, nodeIndex));\n        }\n    }\n    else {\n        for (let i = 0; i < header.count; ++i) {\n            const nodeIndex = (header.head + i) % allocLen;\n            nodes.push(decodeQueueItem(headerLayout, nodeLayout, buffer, nodeIndex));\n        }\n    }\n    return { header, nodes };\n}\nfunction decodeEventsSince(buffer, lastSeqNum) {\n    const header = EVENT_QUEUE_HEADER.decode(buffer);\n    const allocLen = Math.floor((buffer.length - EVENT_QUEUE_HEADER.span) / EVENT.span);\n    // calculate number of missed events\n    // account for u32 & ringbuffer overflows\n    const modulo32Uint = 0x100000000;\n    let missedEvents = (header.seqNum - lastSeqNum + modulo32Uint) % modulo32Uint;\n    if (missedEvents > allocLen) {\n        missedEvents = allocLen - 1;\n    }\n    const startSeq = (header.seqNum - missedEvents + modulo32Uint) % modulo32Uint;\n    // define boundary indexes in ring buffer [start;end)\n    const endIndex = (header.head + header.count) % allocLen;\n    const startIndex = (endIndex - missedEvents + allocLen) % allocLen;\n    const results = [];\n    for (let i = 0; i < missedEvents; ++i) {\n        const nodeIndex = (startIndex + i) % allocLen;\n        const event = decodeQueueItem(EVENT_QUEUE_HEADER, EVENT, buffer, nodeIndex);\n        event.seqNum = (startSeq + i) % modulo32Uint;\n        results.push(event);\n    }\n    return results;\n}\nexports.decodeEventsSince = decodeEventsSince;\nfunction decodeRequestQueue(buffer, history) {\n    const { header, nodes } = decodeQueue(REQUEST_QUEUE_HEADER, REQUEST, buffer, history);\n    if (!header.accountFlags.initialized || !header.accountFlags.requestQueue) {\n        throw new Error('Invalid requests queue');\n    }\n    return nodes;\n}\nexports.decodeRequestQueue = decodeRequestQueue;\nfunction decodeEventQueue(buffer, history) {\n    const { header, nodes } = decodeQueue(EVENT_QUEUE_HEADER, EVENT, buffer, history);\n    if (!header.accountFlags.initialized || !header.accountFlags.eventQueue) {\n        throw new Error('Invalid events queue');\n    }\n    return nodes;\n}\nexports.decodeEventQueue = decodeEventQueue;\nexports.REQUEST_QUEUE_LAYOUT = {\n    HEADER: REQUEST_QUEUE_HEADER,\n    NODE: REQUEST,\n};\nexports.EVENT_QUEUE_LAYOUT = {\n    HEADER: EVENT_QUEUE_HEADER,\n    NODE: EVENT,\n};\n//# sourceMappingURL=queue.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFeeTier = exports.getFeeRates = exports.supportsSrmFeeDiscounts = void 0;\nconst tokens_and_markets_1 = require(\"./tokens_and_markets\");\nfunction supportsSrmFeeDiscounts(programId) {\n    return tokens_and_markets_1.getLayoutVersion(programId) > 1;\n}\nexports.supportsSrmFeeDiscounts = supportsSrmFeeDiscounts;\nfunction getFeeRates(feeTier) {\n    if (feeTier === 1) {\n        // SRM2\n        return { taker: 0.002, maker: -0.0003 };\n    }\n    else if (feeTier === 2) {\n        // SRM3\n        return { taker: 0.0018, maker: -0.0003 };\n    }\n    else if (feeTier === 3) {\n        // SRM4\n        return { taker: 0.0016, maker: -0.0003 };\n    }\n    else if (feeTier === 4) {\n        // SRM5\n        return { taker: 0.0014, maker: -0.0003 };\n    }\n    else if (feeTier === 5) {\n        // SRM6\n        return { taker: 0.0012, maker: -0.0003 };\n    }\n    else if (feeTier === 6) {\n        // MSRM\n        return { taker: 0.001, maker: -0.0005 };\n    }\n    // Base\n    return { taker: 0.0022, maker: -0.0003 };\n}\nexports.getFeeRates = getFeeRates;\nfunction getFeeTier(msrmBalance, srmBalance) {\n    if (msrmBalance >= 1) {\n        return 6;\n    }\n    else if (srmBalance >= 1000000) {\n        return 5;\n    }\n    else if (srmBalance >= 100000) {\n        return 4;\n    }\n    else if (srmBalance >= 10000) {\n        return 3;\n    }\n    else if (srmBalance >= 1000) {\n        return 2;\n    }\n    else if (srmBalance >= 100) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}\nexports.getFeeTier = getFeeTier;\n//# sourceMappingURL=fees.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.simulateTransaction = void 0;\n/** Copy of Connection.simulateTransaction that takes a commitment parameter. */\nasync function simulateTransaction(connection, transaction, commitment) {\n    // @ts-ignore\n    transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching);\n    const signData = transaction.serializeMessage();\n    // @ts-ignore\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = { encoding: 'base64', commitment };\n    const args = [encodedTransaction, config];\n    // @ts-ignore\n    const res = await connection._rpcRequest('simulateTransaction', args);\n    if (res.error) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n    }\n    return res.result;\n}\nexports.simulateTransaction = simulateTransaction;\n//# sourceMappingURL=simulate-transaction.js.map","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport BN from 'bn.js';\nimport { useSnackbar } from 'notistack';\nimport {\n  Account,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n} from '@solana/web3.js';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport { u64 } from '@solana/spl-token';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { useWallet } from '../components/common/WalletProvider';\nimport { ViewTransactionOnExplorerButton } from '../components/common/Notification';\nimport { State as StoreState, ProgramAccount } from '../store/reducer';\nimport { ActionType } from '../store/actions';\nimport * as skin from '../skin';\nimport { toDisplay, toDisplayLabel } from '../utils/tokens';\nimport { memberSigner, registrarSigner } from '../utils/registry';\n\nexport default function Stake() {\n  const { registryClient } = useWallet();\n  const dispatch = useDispatch();\n  const { member, memberAccount, registrarAccount, registrar } = useSelector(\n    (state: StoreState) => {\n      const registrarAccount =\n        state.accounts[state.registry.registrar.toString()];\n      return {\n        member: state.registry.member,\n        memberAccount: state.registry.member\n          ? state.accounts[state.registry.member.toString()]\n          : undefined,\n        registrarAccount: registrarAccount,\n        registrar: state.registry.registrar,\n      };\n    },\n  );\n\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n  const createPoolTokens = async (amount: number, isLocked: boolean) => {\n    enqueueSnackbar(\n      `Staking ${toDisplayLabel(registrarAccount.poolMint)} Pool tokens`,\n      {\n        variant: 'info',\n      },\n    );\n\n    const tx = await registryClient.rpc.stake(new u64(amount), isLocked, {\n      accounts: {\n        registrar,\n        rewardEventQ: registrarAccount.rewardEventQ,\n        poolMint: registrarAccount.poolMint,\n        member,\n        beneficiary: registryClient.provider.wallet.publicKey,\n        balances: memberAccount.balances,\n        balancesLocked: memberAccount.balancesLocked,\n        memberSigner: (\n          await memberSigner(registryClient.programId, registrar, member!)\n        ).publicKey,\n        registrarSigner: (\n          await registrarSigner(registryClient.programId, registrar)\n        ).publicKey,\n        clock: SYSVAR_CLOCK_PUBKEY,\n        tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n      },\n    });\n    closeSnackbar();\n    enqueueSnackbar(`Staking complete`, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n  };\n\n  const redeemPoolTokens = async (amount: number, isLocked: boolean) => {\n    enqueueSnackbar(\n      `Unstaking ${amount} ${toDisplayLabel(\n        registrarAccount.poolMint,\n      )} Pool tokens`,\n      {\n        variant: 'info',\n      },\n    );\n\n    const pendingWithdrawal = new Account();\n    const tx = await registryClient.rpc.startUnstake(\n      new u64(amount),\n      isLocked,\n      {\n        accounts: {\n          registrar,\n          rewardEventQ: registrarAccount.rewardEventQ,\n          poolMint: registrarAccount.poolMint,\n\n          pendingWithdrawal: pendingWithdrawal.publicKey,\n          member,\n          beneficiary: registryClient.provider.wallet.publicKey,\n          balances: memberAccount.balances,\n          balancesLocked: memberAccount.balancesLocked,\n\n          memberSigner: (\n            await memberSigner(registryClient.programId, registrar, member!)\n          ).publicKey,\n\n          tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n          clock: SYSVAR_CLOCK_PUBKEY,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [pendingWithdrawal],\n        instructions: [\n          await registryClient.account.pendingWithdrawal.createInstruction(\n            pendingWithdrawal,\n          ),\n        ],\n      },\n    );\n    const pwAccount = await registryClient.account.pendingWithdrawal(\n      pendingWithdrawal.publicKey,\n    );\n    dispatch({\n      type: ActionType.RegistryCreatePendingWithdrawal,\n      item: {\n        pendingWithdrawal: {\n          publicKey: pendingWithdrawal.publicKey,\n          account: pwAccount,\n        },\n      },\n    });\n    closeSnackbar();\n    enqueueSnackbar(`Stake transfer initiated`, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n  };\n\n  const createPool = async (shares: number, isLocked: boolean) => {\n    if (shares > 0) {\n      createPoolTokens(shares, isLocked).catch(err => {\n        console.error(err);\n        enqueueSnackbar(`Error staking: ${err.toString()}`, {\n          variant: 'error',\n        });\n      });\n    }\n  };\n  const redeemPool = async (shares: number, isLocked: boolean) => {\n    if (shares > 0) {\n      redeemPoolTokens(shares, isLocked).catch(err => {\n        console.error(err);\n        enqueueSnackbar(`Error unstaking: ${err.toString()}`, {\n          variant: 'error',\n        });\n      });\n    }\n  };\n\n  return (\n    <div style={{ width: '100%' }}>\n      <div style={{ display: 'flex', width: '100%' }}>\n        <div style={{ flex: 1, marginTop: '24px', marginBottom: '24px' }}>\n          <PoolCard\n            title={'Stake Pool'}\n            create={createPool}\n            redeem={redeemPool}\n          />\n        </div>\n        <RedemptionList\n          style={{\n            marginBottom: '24px',\n          }}\n        />\n      </div>\n      <AllPendingTransfers />\n    </div>\n  );\n}\n\ntype PoolCardProps = {\n  title: string;\n  create: (shares: number, isLocked: boolean) => void;\n  redeem: (shares: number, isLocked: boolean) => void;\n};\n\nfunction PoolCard(props: PoolCardProps) {\n  const { title, create, redeem } = props;\n  const [poolAmount, setPoolAmount] = useState<null | number>(null);\n  const [isLocked, setIsLocked] = useState(false);\n  const { poolTokenMint, member, registrarAccount, mint } = useSelector(\n    (state: StoreState) => {\n      const registrarAccount =\n        state.accounts[state.registry.registrar.toString()];\n      const poolTokenMint = {\n        publicKey: registrarAccount.poolMint,\n        account: state.accounts[registrarAccount.poolMint.toString()],\n      };\n      return {\n        poolTokenMint,\n        member: state.registry.member,\n        registrarAccount,\n        mint: {\n          publicKey: registrarAccount.mint,\n          account: state.accounts[registrarAccount.mint.toString()],\n        },\n      };\n    },\n  );\n\n  const pricePerShare = toDisplay(\n    registrarAccount.stakeRate,\n    mint.account.decimals,\n  );\n\n  const cost = poolAmount\n    ? toDisplay(\n        registrarAccount.stakeRate.mul(new BN(poolAmount)),\n        mint.account.decimals,\n      )\n    : 0;\n  return (\n    <Card\n      style={{\n        marginBottom: '24px',\n      }}\n    >\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n        <CardHeader\n          title={title}\n          subheader={poolTokenMint.publicKey.toString()}\n        />\n        <div\n          style={{\n            paddingRight: '16px',\n            display: 'flex',\n            justifyContent: 'center',\n            flexDirection: 'column',\n          }}\n        >\n          <Typography color=\"textSecondary\"></Typography>\n        </div>\n      </div>\n      <CardContent>\n        <div\n          style={{\n            marginBottom: '16px',\n          }}\n        >\n          <Typography>\n            Please enter the amount of pool tokens you would like to purchase in\n            the form below. Upon pressing <b>stake</b> you will create new pool\n            tokens at a fixed price, adding to the amount of pool tokens\n            outstanding.\n          </Typography>\n          <br />\n          <Typography>\n            Unstaking works similarly, except one must incur an unbonding period\n            where funds will not be able to be retrieved until the unbonding\n            period ends. At the end of the unbonding period, click the blue\n            checkbox next to your pending transfer. If the checkbox is grey,\n            your unbonding period has not yet completed.\n          </Typography>\n          <br />\n          <Typography style={{ fontWeight: 'bold' }}>\n            Total pool tokens outstanding\n          </Typography>\n          <Typography>{poolTokenMint.account.supply.toString()}</Typography>\n          <Typography style={{ fontWeight: 'bold' }}>\n            Price per pool token\n          </Typography>\n          <Typography>{pricePerShare.toString()}</Typography>\n          <Typography style={{ fontWeight: 'bold' }}>\n            Your total cost\n          </Typography>\n          <Typography>\n            {cost} {toDisplayLabel(mint.publicKey)}\n          </Typography>\n          <Typography style={{ fontWeight: 'bold' }}>\n            Unbonding period (days)\n          </Typography>\n          <Typography>\n            {(\n              registrarAccount.withdrawalTimelock /\n              (60 * 60 * 24.0)\n            ).toString()}\n          </Typography>\n        </div>\n        <div>\n          <div style={{ marginBottom: '10px' }}>\n            <FormControl>\n              <TextField\n                style={{ width: '100%' }}\n                label=\"Pool tokens\"\n                type=\"number\"\n                variant=\"outlined\"\n                onChange={e => setPoolAmount(parseInt(e.target.value))}\n              />\n            </FormControl>\n          </div>\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <div>\n              <Button\n                disabled={member === undefined}\n                color=\"primary\"\n                variant=\"contained\"\n                onClick={() => create(poolAmount as number, isLocked)}\n              >\n                Stake\n              </Button>\n              <Button\n                disabled={member === undefined}\n                color=\"secondary\"\n                variant=\"contained\"\n                style={{ marginLeft: '10px' }}\n                onClick={() => redeem(poolAmount as number, isLocked)}\n              >\n                Unstake\n              </Button>\n            </div>\n            <div>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={isLocked}\n                    onChange={() => setIsLocked(!isLocked)}\n                  />\n                }\n                labelPlacement={'start'}\n                label=\"Locked balances\"\n              />\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\ntype RedemptionListProps = {\n  style: any;\n};\n\nfunction RedemptionList(props: RedemptionListProps) {\n  const { registryClient } = useWallet();\n  const dispatch = useDispatch();\n  const { member, registrar, mint, pendingWithdrawals } = useSelector(\n    (state: StoreState) => {\n      const member = state.registry.member\n        ? {\n            publicKey: state.registry.member,\n            account: state.accounts[state.registry.member.toString()],\n          }\n        : undefined;\n      const registrar = {\n        publicKey: state.registry.registrar!,\n        account: state.accounts[state.registry.registrar.toString()],\n      };\n      const mint = {\n        publicKey: registrar.account.mint,\n        account: state.accounts[registrar.account.mint.toString()],\n      };\n      const pendingWithdrawals =\n        state.registry.pendingWithdrawals === null\n          ? null\n          : state.registry.pendingWithdrawals.map(pw => {\n              return {\n                publicKey: pw,\n                account: state.accounts[pw.toString()],\n              };\n            });\n      return {\n        member,\n        registrar,\n        mint,\n        pendingWithdrawals,\n      };\n    },\n  );\n\n  useEffect(() => {\n    if (!member) {\n      return;\n    }\n    if (pendingWithdrawals !== null) {\n      return;\n    }\n\n    // Only grab pending withdrawals for the current member account.\n    const filter = Buffer.concat([\n      registrar.publicKey.toBuffer(),\n      member.publicKey.toBuffer(),\n    ]);\n    registryClient.account.pendingWithdrawal\n      .all(filter)\n      .then(pendingWithdrawals => {\n        dispatch({\n          type: ActionType.RegistrySetPendingWithdrawals,\n          item: {\n            pendingWithdrawals,\n          },\n        });\n      });\n  }, [\n    dispatch,\n    registrar,\n    member,\n    pendingWithdrawals,\n    registryClient.account.pendingWithdrawal,\n  ]);\n\n  return (\n    <div style={props.style}>\n      <Card\n        style={{\n          marginLeft: '20px',\n          marginTop: '24px',\n          width: '294px',\n        }}\n      >\n        <CardContent\n          style={{\n            paddingLeft: 0,\n            paddingRight: 0,\n            paddingBottom: 0,\n            paddingTop: 0,\n          }}\n        >\n          <div\n            style={{\n              marginLeft: '24px',\n              marginTop: '24px',\n              marginRight: '24px',\n              borderBottom: 'solid 1pt #ccc',\n              paddingBottom: '12px',\n            }}\n          >\n            <Typography style={{}}>Your Pending Transfers</Typography>\n            <Typography style={{ fontSize: '12px' }} color=\"textSecondary\">\n              Click the checkmark to complete a transfer on or after the \"end\"\n              date.\n            </Typography>\n          </div>\n          <div style={{ paddingLeft: '24px', paddingRight: '24px' }}>\n            {member && pendingWithdrawals === null ? (\n              <div style={{ paddingTop: '24px', marginBottom: '24px' }}>\n                <CircularProgress\n                  style={{\n                    display: 'block',\n                    marginLeft: 'auto',\n                    marginRight: 'auto',\n                  }}\n                />\n              </div>\n            ) : pendingWithdrawals !== null && pendingWithdrawals.length > 0 ? (\n              pendingWithdrawals.map((pw, idx) => {\n                return (\n                  <PendingStakeListItem\n                    key={pw.publicKey.toString()}\n                    isLast={idx === pendingWithdrawals.length - 1}\n                    registrar={registrar}\n                    pw={pw}\n                    member={member!}\n                    mint={mint}\n                  />\n                );\n              })\n            ) : (\n              <div\n                style={{\n                  paddingBottom: '24px',\n                  paddingTop: '12px',\n                }}\n              >\n                <Typography color=\"textSecondary\" style={{ fontSize: '14px' }}>\n                  None found\n                </Typography>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\ntype PendingStakeListItemProps = {\n  isLast?: boolean;\n  registrar: ProgramAccount;\n  pw: ProgramAccount;\n  member: ProgramAccount;\n  mint: ProgramAccount;\n};\n\nfunction PendingStakeListItem(props: PendingStakeListItemProps) {\n  const { isLast, pw, member, registrar, mint } = props;\n  const sptLabel = (() => {\n    const isLocked = pw.account.locked;\n    const l = isLocked ? '(locked)' : '';\n    return `${toDisplay(\n      pw.account.amount,\n      mint.account.decimals,\n    )} ${toDisplayLabel(mint.publicKey)} ${l}`;\n  })();\n  return (\n    <div\n      style={{\n        paddingBottom: !isLast ? '12px' : '24px',\n        paddingTop: '12px',\n        borderBottom: 'solid 1pt #ccc',\n      }}\n    >\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          overflow: 'hidden',\n        }}\n      >\n        <div>\n          <Typography\n            style={{\n              whiteSpace: 'pre',\n              maxWidth: '195px',\n              overflow: 'hidden',\n              fontWeight: 'bold',\n              fontSize: '14px',\n            }}\n          >\n            {`${sptLabel}`}\n          </Typography>\n        </div>\n        <div>\n          <PendingWithdrawalButton\n            registrar={registrar}\n            member={member}\n            pendingWithdrawal={pw}\n          />\n        </div>\n      </div>\n      <Typography style={{ fontSize: '14px' }}>\n        {`Start: ${new Date(\n          pw.account.startTs.toNumber() * 1000,\n        ).toLocaleString()}`}\n      </Typography>\n      <Typography style={{ fontSize: '14px' }}>\n        {`End:   ${new Date(\n          pw.account.endTs.toNumber() * 1000,\n        ).toLocaleString()}`}\n      </Typography>\n      <Typography\n        color=\"textSecondary\"\n        style={{\n          fontSize: '14px',\n          overflow: 'hidden',\n        }}\n      >\n        {pw.account.pool.toString()}\n      </Typography>\n    </div>\n  );\n}\n\ntype PendingWithdrawalButtonProps = {\n  registrar: ProgramAccount;\n  pendingWithdrawal: ProgramAccount;\n  member: ProgramAccount;\n};\n\nfunction PendingWithdrawalButton(props: PendingWithdrawalButtonProps) {\n  const { pendingWithdrawal, member, registrar } = props;\n  const { registryClient } = useWallet();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const dispatch = useDispatch();\n\n  const endPendingWithdrawal = async () => {\n    enqueueSnackbar(`Completing redemption`, {\n      variant: 'info',\n    });\n    const balances = pendingWithdrawal.account.locked\n      ? member.account.balancesLocked\n      : member.account.balances;\n    const tx = await registryClient.rpc.endUnstake({\n      accounts: {\n        registrar: registrar.publicKey,\n        member: member.publicKey,\n        beneficiary: registryClient.provider.wallet.publicKey,\n        pendingWithdrawal: pendingWithdrawal.publicKey,\n        vault: balances.vault,\n        vaultPw: balances.vaultPw,\n        memberSigner: (\n          await memberSigner(\n            registryClient.programId,\n            registrar.publicKey,\n            member.publicKey,\n          )\n        ).publicKey,\n        clock: SYSVAR_CLOCK_PUBKEY,\n        tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n      },\n    });\n\n    const updatedPendingWithdrawal = {\n      publicKey: pendingWithdrawal.publicKey,\n      account: {\n        ...pendingWithdrawal.account,\n        burned: true,\n      },\n    };\n\n    dispatch({\n      type: ActionType.RegistryUpdatePendingWithdrawal,\n      item: {\n        pendingWithdrawal: updatedPendingWithdrawal,\n      },\n    });\n\n    closeSnackbar();\n    enqueueSnackbar(`Stake transfer completed`, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n  };\n\n  let disabled = false;\n  let color = skin.instance().ready;\n  let onClick = async () =>\n    endPendingWithdrawal().catch(err => {\n      console.error(`Error completing transfer: ${err.toString()}`);\n      enqueueSnackbar(\n        `Error completing transfer. Wait for the transfer's timelock to end and try again.`,\n        {\n          variant: 'error',\n        },\n      );\n    });\n  if (pendingWithdrawal.account.burned) {\n    disabled = true;\n    color = skin.instance().active;\n    onClick = async () => {};\n  }\n\n  if (pendingWithdrawal.account.endTs.toNumber() > Date.now() / 1000) {\n    disabled = true;\n    color = skin.instance().notReady;\n    onClick = async () => {};\n  }\n\n  return (\n    <div\n      onClick={onClick}\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n      }}\n    >\n      <IconButton disabled={disabled} style={{ width: '25px', height: '25px' }}>\n        <CheckCircleIcon style={{ color, fontSize: '20px' }} />\n      </IconButton>\n    </div>\n  );\n}\n\nfunction AllPendingTransfers() {\n  const { registryClient } = useWallet();\n  const { registrar, registrarAccount, mintAccount } = useSelector(\n    (state: StoreState) => {\n      const registrarAccount =\n        state.accounts[state.registry.registrar.toString()];\n      return {\n        registrar: state.registry.registrar,\n        registrarAccount,\n        mintAccount: state.accounts[registrarAccount.mint.toString()],\n      };\n    },\n  );\n  const [pendingTransfers, setPendingTransfers] = useState<null | any>(null);\n  useEffect(() => {\n    const fetchAll = async () => {\n      let transfers = await registryClient.account.pendingWithdrawal.all(\n        registrar.toBuffer(),\n      );\n      transfers = transfers\n        .filter((pw: any) => pw.account.burned === false)\n        .sort((a, b) => {\n          if (a.account.startTs < b.account.startTs) {\n            return 1;\n          } else if (a.account.startTs > b.account.startTs) {\n            return -1;\n          } else {\n            return 0;\n          }\n        });\n      setPendingTransfers(transfers);\n    };\n    fetchAll();\n  }, [registryClient, registrar]);\n\n  return (\n    <Card style={{ maxHeight: '900px', overflow: 'auto' }}>\n      <Typography\n        variant=\"h5\"\n        style={{ padding: '16px', borderBottom: 'solid 1pt #ccc' }}\n      >\n        All pending transfers\n      </Typography>\n      {pendingTransfers !== null ? (\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Member Account</TableCell>\n              <TableCell>Amount</TableCell>\n              <TableCell>Pool</TableCell>\n              <TableCell>Locked</TableCell>\n              <TableCell>Start</TableCell>\n              <TableCell>End</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {pendingTransfers.map((pw: any) => (\n              <TableRow>\n                <TableCell>{pw.account.member.toString()}</TableCell>\n                <TableCell>\n                  {toDisplay(\n                    pw.account.amount.toString(),\n                    mintAccount.decimals,\n                  )}\n                </TableCell>\n                <TableCell>\n                  {pw.account.amount.div(registrarAccount.stakeRate).toString()}\n                </TableCell>\n                <TableCell>{pw.account.locked.toString()}</TableCell>\n                <TableCell>\n                  {new Date(pw.account.startTs.toNumber() * 1000).toString()}\n                </TableCell>\n                <TableCell>\n                  {new Date(pw.account.endTs.toNumber() * 1000).toString()}\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      ) : (\n        <div style={{ padding: '24px' }}>\n          <CircularProgress\n            style={{\n              display: 'block',\n              marginLeft: 'auto',\n              marginRight: 'auto',\n            }}\n          />\n        </div>\n      )}\n    </Card>\n  );\n}\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sleep = exports.parseTokenAccount = exports.getTokenAccount = exports.parseMintAccount = exports.getMintInfo = exports.createAccountRentExempt = exports.createTokenAccountInstrs = exports.createTokenAccount = exports.createMintAndVault = exports.createMintInstructions = exports.createMint = exports.SPL_SHARED_MEMORY_ID = exports.connection = exports.simulateTransaction = exports.token = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst serum_1 = require(\"@project-serum/serum\");\n__exportStar(require(\"./provider\"), exports);\nexports.token = __importStar(require(\"./token\"));\nvar simulate_transaction_1 = require(\"./simulate-transaction\");\nObject.defineProperty(exports, \"simulateTransaction\", { enumerable: true, get: function () { return simulate_transaction_1.simulateTransaction; } });\nexports.connection = __importStar(require(\"./connection\"));\nexports.SPL_SHARED_MEMORY_ID = new web3_js_1.PublicKey('shmem4EWT2sPdVGvTZCzXXRAURL9G5vpPxNwSeKhHUL');\nasync function createMint(provider, authority, decimals) {\n    if (authority === undefined) {\n        authority = provider.wallet.publicKey;\n    }\n    const mint = new web3_js_1.Account();\n    const instructions = await createMintInstructions(provider, authority, mint.publicKey, decimals);\n    const tx = new web3_js_1.Transaction();\n    tx.add(...instructions);\n    await provider.send(tx, [mint]);\n    return mint.publicKey;\n}\nexports.createMint = createMint;\nasync function createMintInstructions(provider, authority, mint, decimals) {\n    let instructions = [\n        web3_js_1.SystemProgram.createAccount({\n            fromPubkey: provider.wallet.publicKey,\n            newAccountPubkey: mint,\n            space: 82,\n            lamports: await provider.connection.getMinimumBalanceForRentExemption(82),\n            programId: serum_1.TokenInstructions.TOKEN_PROGRAM_ID,\n        }),\n        serum_1.TokenInstructions.initializeMint({\n            mint,\n            decimals: decimals !== null && decimals !== void 0 ? decimals : 0,\n            mintAuthority: authority,\n        }),\n    ];\n    return instructions;\n}\nexports.createMintInstructions = createMintInstructions;\nasync function createMintAndVault(provider, amount, owner, decimals) {\n    if (owner === undefined) {\n        owner = provider.wallet.publicKey;\n    }\n    const mint = new web3_js_1.Account();\n    const vault = new web3_js_1.Account();\n    const tx = new web3_js_1.Transaction();\n    tx.add(web3_js_1.SystemProgram.createAccount({\n        fromPubkey: provider.wallet.publicKey,\n        newAccountPubkey: mint.publicKey,\n        space: 82,\n        lamports: await provider.connection.getMinimumBalanceForRentExemption(82),\n        programId: serum_1.TokenInstructions.TOKEN_PROGRAM_ID,\n    }), serum_1.TokenInstructions.initializeMint({\n        mint: mint.publicKey,\n        decimals: decimals !== null && decimals !== void 0 ? decimals : 0,\n        mintAuthority: provider.wallet.publicKey,\n    }), web3_js_1.SystemProgram.createAccount({\n        fromPubkey: provider.wallet.publicKey,\n        newAccountPubkey: vault.publicKey,\n        space: 165,\n        lamports: await provider.connection.getMinimumBalanceForRentExemption(165),\n        programId: serum_1.TokenInstructions.TOKEN_PROGRAM_ID,\n    }), serum_1.TokenInstructions.initializeAccount({\n        account: vault.publicKey,\n        mint: mint.publicKey,\n        owner,\n    }), serum_1.TokenInstructions.mintTo({\n        mint: mint.publicKey,\n        destination: vault.publicKey,\n        amount,\n        mintAuthority: provider.wallet.publicKey,\n    }));\n    await provider.send(tx, [mint, vault]);\n    return [mint.publicKey, vault.publicKey];\n}\nexports.createMintAndVault = createMintAndVault;\nasync function createTokenAccount(provider, mint, owner) {\n    const vault = new web3_js_1.Account();\n    const tx = new web3_js_1.Transaction();\n    tx.add(...(await createTokenAccountInstrs(provider, vault.publicKey, mint, owner)));\n    await provider.send(tx, [vault]);\n    return vault.publicKey;\n}\nexports.createTokenAccount = createTokenAccount;\nasync function createTokenAccountInstrs(provider, newAccountPubkey, mint, owner, lamports) {\n    if (lamports === undefined) {\n        lamports = await provider.connection.getMinimumBalanceForRentExemption(165);\n    }\n    return [\n        web3_js_1.SystemProgram.createAccount({\n            fromPubkey: provider.wallet.publicKey,\n            newAccountPubkey,\n            space: 165,\n            lamports,\n            programId: serum_1.TokenInstructions.TOKEN_PROGRAM_ID,\n        }),\n        serum_1.TokenInstructions.initializeAccount({\n            account: newAccountPubkey,\n            mint,\n            owner,\n        }),\n    ];\n}\nexports.createTokenAccountInstrs = createTokenAccountInstrs;\nasync function createAccountRentExempt(provider, programId, size) {\n    const acc = new web3_js_1.Account();\n    const tx = new web3_js_1.Transaction();\n    tx.add(web3_js_1.SystemProgram.createAccount({\n        fromPubkey: provider.wallet.publicKey,\n        newAccountPubkey: acc.publicKey,\n        space: size,\n        lamports: await provider.connection.getMinimumBalanceForRentExemption(size),\n        programId,\n    }));\n    await provider.send(tx, [acc]);\n    return acc;\n}\nexports.createAccountRentExempt = createAccountRentExempt;\nasync function getMintInfo(provider, addr) {\n    let depositorAccInfo = await provider.connection.getAccountInfo(addr);\n    if (depositorAccInfo === null) {\n        throw new Error('Failed to find token account');\n    }\n    return parseMintAccount(depositorAccInfo.data);\n}\nexports.getMintInfo = getMintInfo;\nfunction parseMintAccount(data) {\n    const m = spl_token_1.MintLayout.decode(data);\n    m.mintAuthority = new web3_js_1.PublicKey(m.mintAuthority);\n    m.supply = spl_token_1.u64.fromBuffer(m.supply);\n    m.isInitialized = m.state !== 0;\n    return m;\n}\nexports.parseMintAccount = parseMintAccount;\nasync function getTokenAccount(provider, addr) {\n    let depositorAccInfo = await provider.connection.getAccountInfo(addr);\n    if (depositorAccInfo === null) {\n        throw new Error('Failed to find token account');\n    }\n    return parseTokenAccount(depositorAccInfo.data);\n}\nexports.getTokenAccount = getTokenAccount;\nfunction parseTokenAccount(data) {\n    const accountInfo = spl_token_1.AccountLayout.decode(data);\n    accountInfo.mint = new web3_js_1.PublicKey(accountInfo.mint);\n    accountInfo.owner = new web3_js_1.PublicKey(accountInfo.owner);\n    accountInfo.amount = spl_token_1.u64.fromBuffer(accountInfo.amount);\n    if (accountInfo.delegateOption === 0) {\n        accountInfo.delegate = null;\n        // eslint-disable-next-line new-cap\n        accountInfo.delegatedAmount = new spl_token_1.u64(0);\n    }\n    else {\n        accountInfo.delegate = new web3_js_1.PublicKey(accountInfo.delegate);\n        accountInfo.delegatedAmount = spl_token_1.u64.fromBuffer(accountInfo.delegatedAmount);\n    }\n    accountInfo.isInitialized = accountInfo.state !== 0;\n    accountInfo.isFrozen = accountInfo.state === 2;\n    if (accountInfo.isNativeOption === 1) {\n        accountInfo.rentExemptReserve = spl_token_1.u64.fromBuffer(accountInfo.isNative);\n        accountInfo.isNative = true;\n    }\n    else {\n        accountInfo.rentExemptReserve = null;\n        accountInfo.isNative = false;\n    }\n    if (accountInfo.closeAuthorityOption === 0) {\n        accountInfo.closeAuthority = null;\n    }\n    else {\n        accountInfo.closeAuthority = new web3_js_1.PublicKey(accountInfo.closeAuthority);\n    }\n    return accountInfo;\n}\nexports.parseTokenAccount = parseTokenAccount;\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\nexports.sleep = sleep;\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TokenInstructions = exports.EVENT_QUEUE_LAYOUT = exports.REQUEST_QUEUE_LAYOUT = exports.decodeRequestQueue = exports.decodeEventQueue = exports.getLayoutVersion = exports.MARKETS = exports.TOKEN_MINTS = exports.supportsSrmFeeDiscounts = exports.getFeeRates = exports.getFeeTier = exports.NEW_ORDER_V3_OWNER_INDEX = exports.NEW_ORDER_V3_OPEN_ORDERS_INDEX = exports.NEW_ORDER_OWNER_INDEX = exports.NEW_ORDER_OPEN_ORDERS_INDEX = exports.SETTLE_FUNDS_QUOTE_WALLET_INDEX = exports.SETTLE_FUNDS_BASE_WALLET_INDEX = exports.decodeInstruction = exports.DexInstructions = exports.OpenOrders = exports.Orderbook = exports.Market = void 0;\nvar market_1 = require(\"./market\");\nObject.defineProperty(exports, \"Market\", { enumerable: true, get: function () { return market_1.Market; } });\nObject.defineProperty(exports, \"Orderbook\", { enumerable: true, get: function () { return market_1.Orderbook; } });\nObject.defineProperty(exports, \"OpenOrders\", { enumerable: true, get: function () { return market_1.OpenOrders; } });\nvar instructions_1 = require(\"./instructions\");\nObject.defineProperty(exports, \"DexInstructions\", { enumerable: true, get: function () { return instructions_1.DexInstructions; } });\nObject.defineProperty(exports, \"decodeInstruction\", { enumerable: true, get: function () { return instructions_1.decodeInstruction; } });\nObject.defineProperty(exports, \"SETTLE_FUNDS_BASE_WALLET_INDEX\", { enumerable: true, get: function () { return instructions_1.SETTLE_FUNDS_BASE_WALLET_INDEX; } });\nObject.defineProperty(exports, \"SETTLE_FUNDS_QUOTE_WALLET_INDEX\", { enumerable: true, get: function () { return instructions_1.SETTLE_FUNDS_QUOTE_WALLET_INDEX; } });\nObject.defineProperty(exports, \"NEW_ORDER_OPEN_ORDERS_INDEX\", { enumerable: true, get: function () { return instructions_1.NEW_ORDER_OPEN_ORDERS_INDEX; } });\nObject.defineProperty(exports, \"NEW_ORDER_OWNER_INDEX\", { enumerable: true, get: function () { return instructions_1.NEW_ORDER_OWNER_INDEX; } });\nObject.defineProperty(exports, \"NEW_ORDER_V3_OPEN_ORDERS_INDEX\", { enumerable: true, get: function () { return instructions_1.NEW_ORDER_V3_OPEN_ORDERS_INDEX; } });\nObject.defineProperty(exports, \"NEW_ORDER_V3_OWNER_INDEX\", { enumerable: true, get: function () { return instructions_1.NEW_ORDER_V3_OWNER_INDEX; } });\nvar fees_1 = require(\"./fees\");\nObject.defineProperty(exports, \"getFeeTier\", { enumerable: true, get: function () { return fees_1.getFeeTier; } });\nObject.defineProperty(exports, \"getFeeRates\", { enumerable: true, get: function () { return fees_1.getFeeRates; } });\nObject.defineProperty(exports, \"supportsSrmFeeDiscounts\", { enumerable: true, get: function () { return fees_1.supportsSrmFeeDiscounts; } });\nvar tokens_and_markets_1 = require(\"./tokens_and_markets\");\nObject.defineProperty(exports, \"TOKEN_MINTS\", { enumerable: true, get: function () { return tokens_and_markets_1.TOKEN_MINTS; } });\nObject.defineProperty(exports, \"MARKETS\", { enumerable: true, get: function () { return tokens_and_markets_1.MARKETS; } });\nObject.defineProperty(exports, \"getLayoutVersion\", { enumerable: true, get: function () { return tokens_and_markets_1.getLayoutVersion; } });\nvar queue_1 = require(\"./queue\");\nObject.defineProperty(exports, \"decodeEventQueue\", { enumerable: true, get: function () { return queue_1.decodeEventQueue; } });\nObject.defineProperty(exports, \"decodeRequestQueue\", { enumerable: true, get: function () { return queue_1.decodeRequestQueue; } });\nObject.defineProperty(exports, \"REQUEST_QUEUE_LAYOUT\", { enumerable: true, get: function () { return queue_1.REQUEST_QUEUE_LAYOUT; } });\nObject.defineProperty(exports, \"EVENT_QUEUE_LAYOUT\", { enumerable: true, get: function () { return queue_1.EVENT_QUEUE_LAYOUT; } });\nexports.TokenInstructions = __importStar(require(\"./token-instructions\"));\n__exportStar(require(\"./error\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getMintDecimals = exports.Orderbook = exports.ORDERBOOK_LAYOUT = exports.OpenOrders = exports._OPEN_ORDERS_LAYOUT_V2 = exports._OPEN_ORDERS_LAYOUT_V1 = exports.Market = exports._MARKET_STATE_LAYOUT_V2 = exports._MARKET_STAT_LAYOUT_V1 = void 0;\nconst buffer_layout_1 = require(\"buffer-layout\");\nconst layout_1 = require(\"./layout\");\nconst slab_1 = require(\"./slab\");\nconst instructions_1 = require(\"./instructions\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst queue_1 = require(\"./queue\");\nconst buffer_1 = require(\"buffer\");\nconst fees_1 = require(\"./fees\");\nconst token_instructions_1 = require(\"./token-instructions\");\nconst tokens_and_markets_1 = require(\"./tokens_and_markets\");\nexports._MARKET_STAT_LAYOUT_V1 = buffer_layout_1.struct([\n    buffer_layout_1.blob(5),\n    layout_1.accountFlagsLayout('accountFlags'),\n    layout_1.publicKeyLayout('ownAddress'),\n    layout_1.u64('vaultSignerNonce'),\n    layout_1.publicKeyLayout('baseMint'),\n    layout_1.publicKeyLayout('quoteMint'),\n    layout_1.publicKeyLayout('baseVault'),\n    layout_1.u64('baseDepositsTotal'),\n    layout_1.u64('baseFeesAccrued'),\n    layout_1.publicKeyLayout('quoteVault'),\n    layout_1.u64('quoteDepositsTotal'),\n    layout_1.u64('quoteFeesAccrued'),\n    layout_1.u64('quoteDustThreshold'),\n    layout_1.publicKeyLayout('requestQueue'),\n    layout_1.publicKeyLayout('eventQueue'),\n    layout_1.publicKeyLayout('bids'),\n    layout_1.publicKeyLayout('asks'),\n    layout_1.u64('baseLotSize'),\n    layout_1.u64('quoteLotSize'),\n    layout_1.u64('feeRateBps'),\n    buffer_layout_1.blob(7),\n]);\nexports._MARKET_STATE_LAYOUT_V2 = buffer_layout_1.struct([\n    buffer_layout_1.blob(5),\n    layout_1.accountFlagsLayout('accountFlags'),\n    layout_1.publicKeyLayout('ownAddress'),\n    layout_1.u64('vaultSignerNonce'),\n    layout_1.publicKeyLayout('baseMint'),\n    layout_1.publicKeyLayout('quoteMint'),\n    layout_1.publicKeyLayout('baseVault'),\n    layout_1.u64('baseDepositsTotal'),\n    layout_1.u64('baseFeesAccrued'),\n    layout_1.publicKeyLayout('quoteVault'),\n    layout_1.u64('quoteDepositsTotal'),\n    layout_1.u64('quoteFeesAccrued'),\n    layout_1.u64('quoteDustThreshold'),\n    layout_1.publicKeyLayout('requestQueue'),\n    layout_1.publicKeyLayout('eventQueue'),\n    layout_1.publicKeyLayout('bids'),\n    layout_1.publicKeyLayout('asks'),\n    layout_1.u64('baseLotSize'),\n    layout_1.u64('quoteLotSize'),\n    layout_1.u64('feeRateBps'),\n    layout_1.u64('referrerRebatesAccrued'),\n    buffer_layout_1.blob(7),\n]);\nclass Market {\n    constructor(decoded, baseMintDecimals, quoteMintDecimals, options = {}, programId) {\n        const { skipPreflight = false, commitment = 'recent' } = options;\n        if (!decoded.accountFlags.initialized || !decoded.accountFlags.market) {\n            throw new Error('Invalid market state');\n        }\n        this._decoded = decoded;\n        this._baseSplTokenDecimals = baseMintDecimals;\n        this._quoteSplTokenDecimals = quoteMintDecimals;\n        this._skipPreflight = skipPreflight;\n        this._commitment = commitment;\n        this._programId = programId;\n        this._openOrdersAccountsCache = {};\n        this._feeDiscountKeysCache = {};\n    }\n    static getLayout(programId) {\n        if (tokens_and_markets_1.getLayoutVersion(programId) === 1) {\n            return exports._MARKET_STAT_LAYOUT_V1;\n        }\n        return exports._MARKET_STATE_LAYOUT_V2;\n    }\n    static async findAccountsByMints(connection, baseMintAddress, quoteMintAddress, programId) {\n        const filters = [\n            {\n                memcmp: {\n                    offset: this.getLayout(programId).offsetOf('baseMint'),\n                    bytes: baseMintAddress.toBase58(),\n                },\n            },\n            {\n                memcmp: {\n                    offset: Market.getLayout(programId).offsetOf('quoteMint'),\n                    bytes: quoteMintAddress.toBase58(),\n                },\n            },\n        ];\n        return getFilteredProgramAccounts(connection, programId, filters);\n    }\n    static async load(connection, address, options = {}, programId) {\n        const { owner, data } = throwIfNull(await connection.getAccountInfo(address), 'Market not found');\n        if (!owner.equals(programId)) {\n            throw new Error('Address not owned by program: ' + owner.toBase58());\n        }\n        const decoded = this.getLayout(programId).decode(data);\n        if (!decoded.accountFlags.initialized ||\n            !decoded.accountFlags.market ||\n            !decoded.ownAddress.equals(address)) {\n            throw new Error('Invalid market');\n        }\n        const [baseMintDecimals, quoteMintDecimals] = await Promise.all([\n            getMintDecimals(connection, decoded.baseMint),\n            getMintDecimals(connection, decoded.quoteMint),\n        ]);\n        return new Market(decoded, baseMintDecimals, quoteMintDecimals, options, programId);\n    }\n    get programId() {\n        return this._programId;\n    }\n    get address() {\n        return this._decoded.ownAddress;\n    }\n    get publicKey() {\n        return this.address;\n    }\n    get baseMintAddress() {\n        return this._decoded.baseMint;\n    }\n    get quoteMintAddress() {\n        return this._decoded.quoteMint;\n    }\n    get bidsAddress() {\n        return this._decoded.bids;\n    }\n    get asksAddress() {\n        return this._decoded.asks;\n    }\n    async loadBids(connection) {\n        const { data } = throwIfNull(await connection.getAccountInfo(this._decoded.bids));\n        return Orderbook.decode(this, data);\n    }\n    async loadAsks(connection) {\n        const { data } = throwIfNull(await connection.getAccountInfo(this._decoded.asks));\n        return Orderbook.decode(this, data);\n    }\n    async loadOrdersForOwner(connection, ownerAddress, cacheDurationMs = 0) {\n        const [bids, asks, openOrdersAccounts] = await Promise.all([\n            this.loadBids(connection),\n            this.loadAsks(connection),\n            this.findOpenOrdersAccountsForOwner(connection, ownerAddress, cacheDurationMs),\n        ]);\n        return this.filterForOpenOrders(bids, asks, openOrdersAccounts);\n    }\n    filterForOpenOrders(bids, asks, openOrdersAccounts) {\n        return [...bids, ...asks].filter((order) => openOrdersAccounts.some((openOrders) => order.openOrdersAddress.equals(openOrders.address)));\n    }\n    async findBaseTokenAccountsForOwner(connection, ownerAddress, includeUnwrappedSol = false) {\n        if (this.baseMintAddress.equals(token_instructions_1.WRAPPED_SOL_MINT) && includeUnwrappedSol) {\n            const [wrapped, unwrapped] = await Promise.all([\n                this.findBaseTokenAccountsForOwner(connection, ownerAddress, false),\n                connection.getAccountInfo(ownerAddress),\n            ]);\n            if (unwrapped !== null) {\n                return [{ pubkey: ownerAddress, account: unwrapped }, ...wrapped];\n            }\n            return wrapped;\n        }\n        return await this.getTokenAccountsByOwnerForMint(connection, ownerAddress, this.baseMintAddress);\n    }\n    async getTokenAccountsByOwnerForMint(connection, ownerAddress, mintAddress) {\n        return (await connection.getTokenAccountsByOwner(ownerAddress, {\n            mint: mintAddress,\n        })).value;\n    }\n    async findQuoteTokenAccountsForOwner(connection, ownerAddress, includeUnwrappedSol = false) {\n        if (this.quoteMintAddress.equals(token_instructions_1.WRAPPED_SOL_MINT) && includeUnwrappedSol) {\n            const [wrapped, unwrapped] = await Promise.all([\n                this.findQuoteTokenAccountsForOwner(connection, ownerAddress, false),\n                connection.getAccountInfo(ownerAddress),\n            ]);\n            if (unwrapped !== null) {\n                return [{ pubkey: ownerAddress, account: unwrapped }, ...wrapped];\n            }\n            return wrapped;\n        }\n        return await this.getTokenAccountsByOwnerForMint(connection, ownerAddress, this.quoteMintAddress);\n    }\n    async findOpenOrdersAccountsForOwner(connection, ownerAddress, cacheDurationMs = 0) {\n        const strOwner = ownerAddress.toBase58();\n        const now = new Date().getTime();\n        if (strOwner in this._openOrdersAccountsCache &&\n            now - this._openOrdersAccountsCache[strOwner].ts < cacheDurationMs) {\n            return this._openOrdersAccountsCache[strOwner].accounts;\n        }\n        const openOrdersAccountsForOwner = await OpenOrders.findForMarketAndOwner(connection, this.address, ownerAddress, this._programId);\n        this._openOrdersAccountsCache[strOwner] = {\n            accounts: openOrdersAccountsForOwner,\n            ts: now,\n        };\n        return openOrdersAccountsForOwner;\n    }\n    async placeOrder(connection, { owner, payer, side, price, size, orderType = 'limit', clientId, openOrdersAddressKey, openOrdersAccount, feeDiscountPubkey, }) {\n        const { transaction, signers, } = await this.makePlaceOrderTransaction(connection, {\n            owner,\n            payer,\n            side,\n            price,\n            size,\n            orderType,\n            clientId,\n            openOrdersAddressKey,\n            openOrdersAccount,\n            feeDiscountPubkey,\n        });\n        return await this._sendTransaction(connection, transaction, [\n            owner,\n            ...signers,\n        ]);\n    }\n    getSplTokenBalanceFromAccountInfo(accountInfo, decimals) {\n        return divideBnToNumber(new bn_js_1.default(accountInfo.data.slice(64, 72), 10, 'le'), new bn_js_1.default(10).pow(new bn_js_1.default(decimals)));\n    }\n    get supportsSrmFeeDiscounts() {\n        return fees_1.supportsSrmFeeDiscounts(this._programId);\n    }\n    get supportsReferralFees() {\n        return tokens_and_markets_1.getLayoutVersion(this._programId) > 1;\n    }\n    get usesRequestQueue() {\n        return tokens_and_markets_1.getLayoutVersion(this._programId) <= 2;\n    }\n    async findFeeDiscountKeys(connection, ownerAddress, cacheDurationMs = 0) {\n        let sortedAccounts = [];\n        const now = new Date().getTime();\n        const strOwner = ownerAddress.toBase58();\n        if (strOwner in this._feeDiscountKeysCache &&\n            now - this._feeDiscountKeysCache[strOwner].ts < cacheDurationMs) {\n            return this._feeDiscountKeysCache[strOwner].accounts;\n        }\n        if (this.supportsSrmFeeDiscounts) {\n            // Fee discounts based on (M)SRM holdings supported in newer versions\n            const msrmAccounts = (await this.getTokenAccountsByOwnerForMint(connection, ownerAddress, token_instructions_1.MSRM_MINT)).map(({ pubkey, account }) => {\n                const balance = this.getSplTokenBalanceFromAccountInfo(account, token_instructions_1.MSRM_DECIMALS);\n                return {\n                    pubkey,\n                    mint: token_instructions_1.MSRM_MINT,\n                    balance,\n                    feeTier: fees_1.getFeeTier(balance, 0),\n                };\n            });\n            const srmAccounts = (await this.getTokenAccountsByOwnerForMint(connection, ownerAddress, token_instructions_1.SRM_MINT)).map(({ pubkey, account }) => {\n                const balance = this.getSplTokenBalanceFromAccountInfo(account, token_instructions_1.SRM_DECIMALS);\n                return {\n                    pubkey,\n                    mint: token_instructions_1.SRM_MINT,\n                    balance,\n                    feeTier: fees_1.getFeeTier(0, balance),\n                };\n            });\n            sortedAccounts = msrmAccounts.concat(srmAccounts).sort((a, b) => {\n                if (a.feeTier > b.feeTier) {\n                    return -1;\n                }\n                else if (a.feeTier < b.feeTier) {\n                    return 1;\n                }\n                else {\n                    if (a.balance > b.balance) {\n                        return -1;\n                    }\n                    else if (a.balance < b.balance) {\n                        return 1;\n                    }\n                    else {\n                        return 0;\n                    }\n                }\n            });\n        }\n        this._feeDiscountKeysCache[strOwner] = {\n            accounts: sortedAccounts,\n            ts: now,\n        };\n        return sortedAccounts;\n    }\n    async findBestFeeDiscountKey(connection, ownerAddress, cacheDurationMs = 30000) {\n        const accounts = await this.findFeeDiscountKeys(connection, ownerAddress, cacheDurationMs);\n        if (accounts.length > 0) {\n            return {\n                pubkey: accounts[0].pubkey,\n                feeTier: accounts[0].feeTier,\n            };\n        }\n        return {\n            pubkey: null,\n            feeTier: 0,\n        };\n    }\n    async makePlaceOrderTransaction(connection, { owner, payer, side, price, size, orderType = 'limit', clientId, openOrdersAddressKey, openOrdersAccount, feeDiscountPubkey = undefined, selfTradeBehavior = 'decrementTake', }, cacheDurationMs = 0, feeDiscountPubkeyCacheDurationMs = 0) {\n        var _a, _b;\n        // @ts-ignore\n        const ownerAddress = (_a = owner.publicKey) !== null && _a !== void 0 ? _a : owner;\n        const openOrdersAccounts = await this.findOpenOrdersAccountsForOwner(connection, ownerAddress, cacheDurationMs);\n        const transaction = new web3_js_1.Transaction();\n        const signers = [];\n        // Fetch an SRM fee discount key if the market supports discounts and it is not supplied\n        let useFeeDiscountPubkey;\n        if (feeDiscountPubkey) {\n            useFeeDiscountPubkey = feeDiscountPubkey;\n        }\n        else if (feeDiscountPubkey === undefined &&\n            this.supportsSrmFeeDiscounts) {\n            useFeeDiscountPubkey = (await this.findBestFeeDiscountKey(connection, ownerAddress, feeDiscountPubkeyCacheDurationMs)).pubkey;\n        }\n        else {\n            useFeeDiscountPubkey = null;\n        }\n        let openOrdersAddress;\n        if (openOrdersAccounts.length === 0) {\n            let account;\n            if (openOrdersAccount) {\n                account = openOrdersAccount;\n            }\n            else {\n                account = new web3_js_1.Account();\n            }\n            transaction.add(await OpenOrders.makeCreateAccountTransaction(connection, this.address, ownerAddress, account.publicKey, this._programId));\n            openOrdersAddress = account.publicKey;\n            signers.push(account);\n            // refresh the cache of open order accounts on next fetch\n            this._openOrdersAccountsCache[ownerAddress.toBase58()].ts = 0;\n        }\n        else if (openOrdersAccount) {\n            openOrdersAddress = openOrdersAccount.publicKey;\n        }\n        else if (openOrdersAddressKey) {\n            openOrdersAddress = openOrdersAddressKey;\n        }\n        else {\n            openOrdersAddress = openOrdersAccounts[0].address;\n        }\n        let wrappedSolAccount = null;\n        if (payer.equals(ownerAddress)) {\n            if ((side === 'buy' && this.quoteMintAddress.equals(token_instructions_1.WRAPPED_SOL_MINT)) ||\n                (side === 'sell' && this.baseMintAddress.equals(token_instructions_1.WRAPPED_SOL_MINT))) {\n                wrappedSolAccount = new web3_js_1.Account();\n                let lamports;\n                if (side === 'buy') {\n                    lamports = Math.round(price * size * 1.01 * web3_js_1.LAMPORTS_PER_SOL);\n                    if (openOrdersAccounts.length > 0) {\n                        lamports -= openOrdersAccounts[0].quoteTokenFree.toNumber();\n                    }\n                }\n                else {\n                    lamports = Math.round(size * web3_js_1.LAMPORTS_PER_SOL);\n                    if (openOrdersAccounts.length > 0) {\n                        lamports -= openOrdersAccounts[0].baseTokenFree.toNumber();\n                    }\n                }\n                lamports = Math.max(lamports, 0) + 1e7;\n                transaction.add(web3_js_1.SystemProgram.createAccount({\n                    fromPubkey: ownerAddress,\n                    newAccountPubkey: wrappedSolAccount.publicKey,\n                    lamports,\n                    space: 165,\n                    programId: token_instructions_1.TOKEN_PROGRAM_ID,\n                }));\n                transaction.add(token_instructions_1.initializeAccount({\n                    account: wrappedSolAccount.publicKey,\n                    mint: token_instructions_1.WRAPPED_SOL_MINT,\n                    owner: ownerAddress,\n                }));\n                signers.push(wrappedSolAccount);\n            }\n            else {\n                throw new Error('Invalid payer account');\n            }\n        }\n        const placeOrderInstruction = this.makePlaceOrderInstruction(connection, {\n            owner,\n            payer: (_b = wrappedSolAccount === null || wrappedSolAccount === void 0 ? void 0 : wrappedSolAccount.publicKey) !== null && _b !== void 0 ? _b : payer,\n            side,\n            price,\n            size,\n            orderType,\n            clientId,\n            openOrdersAddressKey: openOrdersAddress,\n            feeDiscountPubkey: useFeeDiscountPubkey,\n            selfTradeBehavior,\n        });\n        transaction.add(placeOrderInstruction);\n        if (wrappedSolAccount) {\n            transaction.add(token_instructions_1.closeAccount({\n                source: wrappedSolAccount.publicKey,\n                destination: ownerAddress,\n                owner: ownerAddress,\n            }));\n        }\n        return { transaction, signers, payer: owner };\n    }\n    makePlaceOrderInstruction(connection, { owner, payer, side, price, size, orderType = 'limit', clientId, openOrdersAddressKey, openOrdersAccount, feeDiscountPubkey = null, selfTradeBehavior = 'decrementTake', }) {\n        var _a;\n        // @ts-ignore\n        const ownerAddress = (_a = owner.publicKey) !== null && _a !== void 0 ? _a : owner;\n        if (this.baseSizeNumberToLots(size).lte(new bn_js_1.default(0))) {\n            throw new Error('size too small');\n        }\n        if (this.priceNumberToLots(price).lte(new bn_js_1.default(0))) {\n            throw new Error('invalid price');\n        }\n        if (!this.supportsSrmFeeDiscounts) {\n            feeDiscountPubkey = null;\n        }\n        if (this.usesRequestQueue) {\n            return instructions_1.DexInstructions.newOrder({\n                market: this.address,\n                requestQueue: this._decoded.requestQueue,\n                baseVault: this._decoded.baseVault,\n                quoteVault: this._decoded.quoteVault,\n                openOrders: openOrdersAccount\n                    ? openOrdersAccount.publicKey\n                    : openOrdersAddressKey,\n                owner: ownerAddress,\n                payer,\n                side,\n                limitPrice: this.priceNumberToLots(price),\n                maxQuantity: this.baseSizeNumberToLots(size),\n                orderType,\n                clientId,\n                programId: this._programId,\n                feeDiscountPubkey,\n            });\n        }\n        else {\n            return instructions_1.DexInstructions.newOrderV3({\n                market: this.address,\n                bids: this._decoded.bids,\n                asks: this._decoded.asks,\n                requestQueue: this._decoded.requestQueue,\n                eventQueue: this._decoded.eventQueue,\n                baseVault: this._decoded.baseVault,\n                quoteVault: this._decoded.quoteVault,\n                openOrders: openOrdersAccount\n                    ? openOrdersAccount.publicKey\n                    : openOrdersAddressKey,\n                owner: ownerAddress,\n                payer,\n                side,\n                limitPrice: this.priceNumberToLots(price),\n                maxBaseQuantity: this.baseSizeNumberToLots(size),\n                maxQuoteQuantity: new bn_js_1.default(this._decoded.quoteLotSize.toNumber()).mul(this.baseSizeNumberToLots(size).mul(this.priceNumberToLots(price))),\n                orderType,\n                clientId,\n                programId: this._programId,\n                selfTradeBehavior,\n                feeDiscountPubkey,\n            });\n        }\n    }\n    async _sendTransaction(connection, transaction, signers) {\n        const signature = await connection.sendTransaction(transaction, signers, {\n            skipPreflight: this._skipPreflight,\n        });\n        const { value } = await connection.confirmTransaction(signature, this._commitment);\n        if (value === null || value === void 0 ? void 0 : value.err) {\n            throw new Error(JSON.stringify(value.err));\n        }\n        return signature;\n    }\n    async cancelOrderByClientId(connection, owner, openOrders, clientId) {\n        const transaction = await this.makeCancelOrderByClientIdTransaction(connection, owner.publicKey, openOrders, clientId);\n        return await this._sendTransaction(connection, transaction, [owner]);\n    }\n    async makeCancelOrderByClientIdTransaction(connection, owner, openOrders, clientId) {\n        const transaction = new web3_js_1.Transaction();\n        if (this.usesRequestQueue) {\n            transaction.add(instructions_1.DexInstructions.cancelOrderByClientId({\n                market: this.address,\n                owner,\n                openOrders,\n                requestQueue: this._decoded.requestQueue,\n                clientId,\n                programId: this._programId,\n            }));\n        }\n        else {\n            transaction.add(instructions_1.DexInstructions.cancelOrderByClientIdV2({\n                market: this.address,\n                openOrders,\n                owner,\n                bids: this._decoded.bids,\n                asks: this._decoded.asks,\n                eventQueue: this._decoded.eventQueue,\n                clientId,\n                programId: this._programId,\n            }));\n        }\n        return transaction;\n    }\n    async cancelOrder(connection, owner, order) {\n        const transaction = await this.makeCancelOrderTransaction(connection, owner.publicKey, order);\n        return await this._sendTransaction(connection, transaction, [owner]);\n    }\n    async makeCancelOrderTransaction(connection, owner, order) {\n        const transaction = new web3_js_1.Transaction();\n        transaction.add(this.makeCancelOrderInstruction(connection, owner, order));\n        return transaction;\n    }\n    makeCancelOrderInstruction(connection, owner, order) {\n        if (this.usesRequestQueue) {\n            return instructions_1.DexInstructions.cancelOrder({\n                market: this.address,\n                owner,\n                openOrders: order.openOrdersAddress,\n                requestQueue: this._decoded.requestQueue,\n                side: order.side,\n                orderId: order.orderId,\n                openOrdersSlot: order.openOrdersSlot,\n                programId: this._programId,\n            });\n        }\n        else {\n            return instructions_1.DexInstructions.cancelOrderV2({\n                market: this.address,\n                owner,\n                openOrders: order.openOrdersAddress,\n                bids: this._decoded.bids,\n                asks: this._decoded.asks,\n                eventQueue: this._decoded.eventQueue,\n                side: order.side,\n                orderId: order.orderId,\n                openOrdersSlot: order.openOrdersSlot,\n                programId: this._programId,\n            });\n        }\n    }\n    async settleFunds(connection, owner, openOrders, baseWallet, quoteWallet, referrerQuoteWallet = null) {\n        if (!openOrders.owner.equals(owner.publicKey)) {\n            throw new Error('Invalid open orders account');\n        }\n        if (referrerQuoteWallet && !this.supportsReferralFees) {\n            throw new Error('This program ID does not support referrerQuoteWallet');\n        }\n        const { transaction, signers } = await this.makeSettleFundsTransaction(connection, openOrders, baseWallet, quoteWallet, referrerQuoteWallet);\n        return await this._sendTransaction(connection, transaction, [\n            owner,\n            ...signers,\n        ]);\n    }\n    async makeSettleFundsTransaction(connection, openOrders, baseWallet, quoteWallet, referrerQuoteWallet = null) {\n        // @ts-ignore\n        const vaultSigner = await web3_js_1.PublicKey.createProgramAddress([\n            this.address.toBuffer(),\n            this._decoded.vaultSignerNonce.toArrayLike(buffer_1.Buffer, 'le', 8),\n        ], this._programId);\n        const transaction = new web3_js_1.Transaction();\n        const signers = [];\n        let wrappedSolAccount = null;\n        if ((this.baseMintAddress.equals(token_instructions_1.WRAPPED_SOL_MINT) &&\n            baseWallet.equals(openOrders.owner)) ||\n            (this.quoteMintAddress.equals(token_instructions_1.WRAPPED_SOL_MINT) &&\n                quoteWallet.equals(openOrders.owner))) {\n            wrappedSolAccount = new web3_js_1.Account();\n            transaction.add(web3_js_1.SystemProgram.createAccount({\n                fromPubkey: openOrders.owner,\n                newAccountPubkey: wrappedSolAccount.publicKey,\n                lamports: await connection.getMinimumBalanceForRentExemption(165),\n                space: 165,\n                programId: token_instructions_1.TOKEN_PROGRAM_ID,\n            }));\n            transaction.add(token_instructions_1.initializeAccount({\n                account: wrappedSolAccount.publicKey,\n                mint: token_instructions_1.WRAPPED_SOL_MINT,\n                owner: openOrders.owner,\n            }));\n            signers.push(wrappedSolAccount);\n        }\n        transaction.add(instructions_1.DexInstructions.settleFunds({\n            market: this.address,\n            openOrders: openOrders.address,\n            owner: openOrders.owner,\n            baseVault: this._decoded.baseVault,\n            quoteVault: this._decoded.quoteVault,\n            baseWallet: baseWallet.equals(openOrders.owner) && wrappedSolAccount\n                ? wrappedSolAccount.publicKey\n                : baseWallet,\n            quoteWallet: quoteWallet.equals(openOrders.owner) && wrappedSolAccount\n                ? wrappedSolAccount.publicKey\n                : quoteWallet,\n            vaultSigner,\n            programId: this._programId,\n            referrerQuoteWallet,\n        }));\n        if (wrappedSolAccount) {\n            transaction.add(token_instructions_1.closeAccount({\n                source: wrappedSolAccount.publicKey,\n                destination: openOrders.owner,\n                owner: openOrders.owner,\n            }));\n        }\n        return { transaction, signers, payer: openOrders.owner };\n    }\n    async matchOrders(connection, feePayer, limit) {\n        const tx = this.makeMatchOrdersTransaction(limit);\n        return await this._sendTransaction(connection, tx, [feePayer]);\n    }\n    makeMatchOrdersTransaction(limit) {\n        const tx = new web3_js_1.Transaction();\n        tx.add(instructions_1.DexInstructions.matchOrders({\n            market: this.address,\n            requestQueue: this._decoded.requestQueue,\n            eventQueue: this._decoded.eventQueue,\n            bids: this._decoded.bids,\n            asks: this._decoded.asks,\n            baseVault: this._decoded.baseVault,\n            quoteVault: this._decoded.quoteVault,\n            limit,\n            programId: this._programId,\n        }));\n        return tx;\n    }\n    async loadRequestQueue(connection) {\n        const { data } = throwIfNull(await connection.getAccountInfo(this._decoded.requestQueue));\n        return queue_1.decodeRequestQueue(data);\n    }\n    async loadEventQueue(connection) {\n        const { data } = throwIfNull(await connection.getAccountInfo(this._decoded.eventQueue));\n        return queue_1.decodeEventQueue(data);\n    }\n    async loadFills(connection, limit = 100) {\n        // TODO: once there's a separate source of fills use that instead\n        const { data } = throwIfNull(await connection.getAccountInfo(this._decoded.eventQueue));\n        const events = queue_1.decodeEventQueue(data, limit);\n        return events\n            .filter((event) => event.eventFlags.fill && event.nativeQuantityPaid.gtn(0))\n            .map(this.parseFillEvent.bind(this));\n    }\n    parseFillEvent(event) {\n        let size, price, side, priceBeforeFees;\n        if (event.eventFlags.bid) {\n            side = 'buy';\n            priceBeforeFees = event.eventFlags.maker\n                ? event.nativeQuantityPaid.add(event.nativeFeeOrRebate)\n                : event.nativeQuantityPaid.sub(event.nativeFeeOrRebate);\n            price = divideBnToNumber(priceBeforeFees.mul(this._baseSplTokenMultiplier), this._quoteSplTokenMultiplier.mul(event.nativeQuantityReleased));\n            size = divideBnToNumber(event.nativeQuantityReleased, this._baseSplTokenMultiplier);\n        }\n        else {\n            side = 'sell';\n            priceBeforeFees = event.eventFlags.maker\n                ? event.nativeQuantityReleased.sub(event.nativeFeeOrRebate)\n                : event.nativeQuantityReleased.add(event.nativeFeeOrRebate);\n            price = divideBnToNumber(priceBeforeFees.mul(this._baseSplTokenMultiplier), this._quoteSplTokenMultiplier.mul(event.nativeQuantityPaid));\n            size = divideBnToNumber(event.nativeQuantityPaid, this._baseSplTokenMultiplier);\n        }\n        return {\n            ...event,\n            side,\n            price,\n            feeCost: this.quoteSplSizeToNumber(event.nativeFeeOrRebate) *\n                (event.eventFlags.maker ? -1 : 1),\n            size,\n        };\n    }\n    get _baseSplTokenMultiplier() {\n        return new bn_js_1.default(10).pow(new bn_js_1.default(this._baseSplTokenDecimals));\n    }\n    get _quoteSplTokenMultiplier() {\n        return new bn_js_1.default(10).pow(new bn_js_1.default(this._quoteSplTokenDecimals));\n    }\n    priceLotsToNumber(price) {\n        return divideBnToNumber(price.mul(this._decoded.quoteLotSize).mul(this._baseSplTokenMultiplier), this._decoded.baseLotSize.mul(this._quoteSplTokenMultiplier));\n    }\n    priceNumberToLots(price) {\n        return new bn_js_1.default(Math.round((price *\n            Math.pow(10, this._quoteSplTokenDecimals) *\n            this._decoded.baseLotSize.toNumber()) /\n            (Math.pow(10, this._baseSplTokenDecimals) *\n                this._decoded.quoteLotSize.toNumber())));\n    }\n    baseSplSizeToNumber(size) {\n        return divideBnToNumber(size, this._baseSplTokenMultiplier);\n    }\n    quoteSplSizeToNumber(size) {\n        return divideBnToNumber(size, this._quoteSplTokenMultiplier);\n    }\n    baseSizeLotsToNumber(size) {\n        return divideBnToNumber(size.mul(this._decoded.baseLotSize), this._baseSplTokenMultiplier);\n    }\n    baseSizeNumberToLots(size) {\n        const native = new bn_js_1.default(Math.round(size * Math.pow(10, this._baseSplTokenDecimals)));\n        // rounds down to the nearest lot size\n        return native.div(this._decoded.baseLotSize);\n    }\n    quoteSizeLotsToNumber(size) {\n        return divideBnToNumber(size.mul(this._decoded.quoteLotSize), this._quoteSplTokenMultiplier);\n    }\n    quoteSizeNumberToLots(size) {\n        const native = new bn_js_1.default(Math.round(size * Math.pow(10, this._quoteSplTokenDecimals)));\n        // rounds down to the nearest lot size\n        return native.div(this._decoded.quoteLotSize);\n    }\n    get minOrderSize() {\n        return this.baseSizeLotsToNumber(new bn_js_1.default(1));\n    }\n    get tickSize() {\n        return this.priceLotsToNumber(new bn_js_1.default(1));\n    }\n}\nexports.Market = Market;\nexports._OPEN_ORDERS_LAYOUT_V1 = buffer_layout_1.struct([\n    buffer_layout_1.blob(5),\n    layout_1.accountFlagsLayout('accountFlags'),\n    layout_1.publicKeyLayout('market'),\n    layout_1.publicKeyLayout('owner'),\n    // These are in spl-token (i.e. not lot) units\n    layout_1.u64('baseTokenFree'),\n    layout_1.u64('baseTokenTotal'),\n    layout_1.u64('quoteTokenFree'),\n    layout_1.u64('quoteTokenTotal'),\n    layout_1.u128('freeSlotBits'),\n    layout_1.u128('isBidBits'),\n    buffer_layout_1.seq(layout_1.u128(), 128, 'orders'),\n    buffer_layout_1.seq(layout_1.u64(), 128, 'clientIds'),\n    buffer_layout_1.blob(7),\n]);\nexports._OPEN_ORDERS_LAYOUT_V2 = buffer_layout_1.struct([\n    buffer_layout_1.blob(5),\n    layout_1.accountFlagsLayout('accountFlags'),\n    layout_1.publicKeyLayout('market'),\n    layout_1.publicKeyLayout('owner'),\n    // These are in spl-token (i.e. not lot) units\n    layout_1.u64('baseTokenFree'),\n    layout_1.u64('baseTokenTotal'),\n    layout_1.u64('quoteTokenFree'),\n    layout_1.u64('quoteTokenTotal'),\n    layout_1.u128('freeSlotBits'),\n    layout_1.u128('isBidBits'),\n    buffer_layout_1.seq(layout_1.u128(), 128, 'orders'),\n    buffer_layout_1.seq(layout_1.u64(), 128, 'clientIds'),\n    layout_1.u64('referrerRebatesAccrued'),\n    buffer_layout_1.blob(7),\n]);\nclass OpenOrders {\n    constructor(address, decoded, programId) {\n        this.address = address;\n        this._programId = programId;\n        Object.assign(this, decoded);\n    }\n    static getLayout(programId) {\n        if (tokens_and_markets_1.getLayoutVersion(programId) === 1) {\n            return exports._OPEN_ORDERS_LAYOUT_V1;\n        }\n        return exports._OPEN_ORDERS_LAYOUT_V2;\n    }\n    static async findForOwner(connection, ownerAddress, programId) {\n        const filters = [\n            {\n                memcmp: {\n                    offset: this.getLayout(programId).offsetOf('owner'),\n                    bytes: ownerAddress.toBase58(),\n                },\n            },\n            {\n                dataSize: this.getLayout(programId).span,\n            },\n        ];\n        const accounts = await getFilteredProgramAccounts(connection, programId, filters);\n        return accounts.map(({ publicKey, accountInfo }) => OpenOrders.fromAccountInfo(publicKey, accountInfo, programId));\n    }\n    static async findForMarketAndOwner(connection, marketAddress, ownerAddress, programId) {\n        const filters = [\n            {\n                memcmp: {\n                    offset: this.getLayout(programId).offsetOf('market'),\n                    bytes: marketAddress.toBase58(),\n                },\n            },\n            {\n                memcmp: {\n                    offset: this.getLayout(programId).offsetOf('owner'),\n                    bytes: ownerAddress.toBase58(),\n                },\n            },\n            {\n                dataSize: this.getLayout(programId).span,\n            },\n        ];\n        const accounts = await getFilteredProgramAccounts(connection, programId, filters);\n        return accounts.map(({ publicKey, accountInfo }) => OpenOrders.fromAccountInfo(publicKey, accountInfo, programId));\n    }\n    static async load(connection, address, programId) {\n        const accountInfo = await connection.getAccountInfo(address);\n        if (accountInfo === null) {\n            throw new Error('Open orders account not found');\n        }\n        return OpenOrders.fromAccountInfo(address, accountInfo, programId);\n    }\n    static fromAccountInfo(address, accountInfo, programId) {\n        const { owner, data } = accountInfo;\n        if (!owner.equals(programId)) {\n            throw new Error('Address not owned by program');\n        }\n        const decoded = this.getLayout(programId).decode(data);\n        if (!decoded.accountFlags.initialized || !decoded.accountFlags.openOrders) {\n            throw new Error('Invalid open orders account');\n        }\n        return new OpenOrders(address, decoded, programId);\n    }\n    static async makeCreateAccountTransaction(connection, marketAddress, ownerAddress, newAccountAddress, programId) {\n        return web3_js_1.SystemProgram.createAccount({\n            fromPubkey: ownerAddress,\n            newAccountPubkey: newAccountAddress,\n            lamports: await connection.getMinimumBalanceForRentExemption(this.getLayout(programId).span),\n            space: this.getLayout(programId).span,\n            programId,\n        });\n    }\n    get publicKey() {\n        return this.address;\n    }\n}\nexports.OpenOrders = OpenOrders;\nexports.ORDERBOOK_LAYOUT = buffer_layout_1.struct([\n    buffer_layout_1.blob(5),\n    layout_1.accountFlagsLayout('accountFlags'),\n    slab_1.SLAB_LAYOUT.replicate('slab'),\n    buffer_layout_1.blob(7),\n]);\nclass Orderbook {\n    constructor(market, accountFlags, slab) {\n        if (!accountFlags.initialized || !(accountFlags.bids ^ accountFlags.asks)) {\n            throw new Error('Invalid orderbook');\n        }\n        this.market = market;\n        this.isBids = accountFlags.bids;\n        this.slab = slab;\n    }\n    static get LAYOUT() {\n        return exports.ORDERBOOK_LAYOUT;\n    }\n    static decode(market, buffer) {\n        const { accountFlags, slab } = exports.ORDERBOOK_LAYOUT.decode(buffer);\n        return new Orderbook(market, accountFlags, slab);\n    }\n    getL2(depth) {\n        const descending = this.isBids;\n        const levels = []; // (price, size)\n        for (const { key, quantity } of this.slab.items(descending)) {\n            const price = getPriceFromKey(key);\n            if (levels.length > 0 && levels[levels.length - 1][0].eq(price)) {\n                levels[levels.length - 1][1].iadd(quantity);\n            }\n            else if (levels.length === depth) {\n                break;\n            }\n            else {\n                levels.push([price, quantity]);\n            }\n        }\n        return levels.map(([priceLots, sizeLots]) => [\n            this.market.priceLotsToNumber(priceLots),\n            this.market.baseSizeLotsToNumber(sizeLots),\n            priceLots,\n            sizeLots,\n        ]);\n    }\n    [Symbol.iterator]() {\n        return this.items(false);\n    }\n    *items(descending = false) {\n        for (const { key, ownerSlot, owner, quantity, feeTier, clientOrderId, } of this.slab.items(descending)) {\n            const price = getPriceFromKey(key);\n            yield {\n                orderId: key,\n                clientId: clientOrderId,\n                openOrdersAddress: owner,\n                openOrdersSlot: ownerSlot,\n                feeTier,\n                price: this.market.priceLotsToNumber(price),\n                priceLots: price,\n                size: this.market.baseSizeLotsToNumber(quantity),\n                sizeLots: quantity,\n                side: (this.isBids ? 'buy' : 'sell'),\n            };\n        }\n    }\n}\nexports.Orderbook = Orderbook;\nfunction getPriceFromKey(key) {\n    return key.ushrn(64);\n}\nfunction divideBnToNumber(numerator, denominator) {\n    const quotient = numerator.div(denominator).toNumber();\n    const rem = numerator.umod(denominator);\n    const gcd = rem.gcd(denominator);\n    return quotient + rem.div(gcd).toNumber() / denominator.div(gcd).toNumber();\n}\nconst MINT_LAYOUT = buffer_layout_1.struct([buffer_layout_1.blob(44), buffer_layout_1.u8('decimals'), buffer_layout_1.blob(37)]);\nasync function getMintDecimals(connection, mint) {\n    if (mint.equals(token_instructions_1.WRAPPED_SOL_MINT)) {\n        return 9;\n    }\n    const { data } = throwIfNull(await connection.getAccountInfo(mint), 'mint not found');\n    const { decimals } = MINT_LAYOUT.decode(data);\n    return decimals;\n}\nexports.getMintDecimals = getMintDecimals;\nasync function getFilteredProgramAccounts(connection, programId, filters) {\n    // @ts-ignore\n    const resp = await connection._rpcRequest('getProgramAccounts', [\n        programId.toBase58(),\n        {\n            commitment: connection.commitment,\n            filters,\n            encoding: 'base64',\n        },\n    ]);\n    if (resp.error) {\n        throw new Error(resp.error.message);\n    }\n    return resp.result.map(({ pubkey, account: { data, executable, owner, lamports } }) => ({\n        publicKey: new web3_js_1.PublicKey(pubkey),\n        accountInfo: {\n            data: buffer_1.Buffer.from(data[0], 'base64'),\n            executable,\n            owner: new web3_js_1.PublicKey(owner),\n            lamports,\n        },\n    }));\n}\nfunction throwIfNull(value, message = 'account not found') {\n    if (value === null) {\n        throw new Error(message);\n    }\n    return value;\n}\n//# sourceMappingURL=market.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Slab = exports.SLAB_LAYOUT = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst buffer_layout_1 = require(\"buffer-layout\");\nconst layout_1 = require(\"./layout\");\nconst SLAB_HEADER_LAYOUT = buffer_layout_1.struct([\n    // Number of modified slab nodes\n    buffer_layout_1.u32('bumpIndex'),\n    layout_1.zeros(4),\n    // Linked list of unused nodes\n    buffer_layout_1.u32('freeListLen'),\n    layout_1.zeros(4),\n    buffer_layout_1.u32('freeListHead'),\n    buffer_layout_1.u32('root'),\n    buffer_layout_1.u32('leafCount'),\n    layout_1.zeros(4),\n], 'header');\nconst SLAB_NODE_LAYOUT = buffer_layout_1.union(buffer_layout_1.u32('tag'), buffer_layout_1.blob(68), 'node');\nSLAB_NODE_LAYOUT.addVariant(0, buffer_layout_1.struct([]), 'uninitialized');\nSLAB_NODE_LAYOUT.addVariant(1, buffer_layout_1.struct([\n    // Only the first prefixLen high-order bits of key are meaningful\n    buffer_layout_1.u32('prefixLen'),\n    layout_1.u128('key'),\n    buffer_layout_1.seq(buffer_layout_1.u32(), 2, 'children'),\n]), 'innerNode');\nSLAB_NODE_LAYOUT.addVariant(2, buffer_layout_1.struct([\n    buffer_layout_1.u8('ownerSlot'),\n    buffer_layout_1.u8('feeTier'),\n    buffer_layout_1.blob(2),\n    layout_1.u128('key'),\n    layout_1.publicKeyLayout('owner'),\n    layout_1.u64('quantity'),\n    layout_1.u64('clientOrderId'),\n]), 'leafNode');\nSLAB_NODE_LAYOUT.addVariant(3, buffer_layout_1.struct([buffer_layout_1.u32('next')]), 'freeNode');\nSLAB_NODE_LAYOUT.addVariant(4, buffer_layout_1.struct([]), 'lastFreeNode');\nexports.SLAB_LAYOUT = buffer_layout_1.struct([\n    SLAB_HEADER_LAYOUT,\n    buffer_layout_1.seq(SLAB_NODE_LAYOUT, buffer_layout_1.offset(SLAB_HEADER_LAYOUT.layoutFor('bumpIndex'), SLAB_HEADER_LAYOUT.offsetOf('bumpIndex') - SLAB_HEADER_LAYOUT.span), 'nodes'),\n]);\nclass Slab {\n    constructor(header, nodes) {\n        this.header = header;\n        this.nodes = nodes;\n    }\n    static decode(buffer) {\n        return exports.SLAB_LAYOUT.decode(buffer);\n    }\n    get(searchKey) {\n        if (this.header.leafCount === 0) {\n            return null;\n        }\n        if (!(searchKey instanceof bn_js_1.default)) {\n            searchKey = new bn_js_1.default(searchKey);\n        }\n        let index = this.header.root;\n        while (true) {\n            const { leafNode, innerNode } = this.nodes[index];\n            if (leafNode) {\n                if (leafNode.key.eq(searchKey)) {\n                    return leafNode;\n                }\n                return null;\n            }\n            else if (innerNode) {\n                if (!innerNode.key\n                    .xor(searchKey)\n                    .iushrn(128 - innerNode.prefixLen)\n                    .isZero()) {\n                    return null;\n                }\n                index =\n                    innerNode.children[searchKey.testn(128 - innerNode.prefixLen - 1) ? 1 : 0];\n            }\n            else {\n                throw new Error('Invalid slab');\n            }\n        }\n    }\n    [Symbol.iterator]() {\n        return this.items(false);\n    }\n    *items(descending = false) {\n        if (this.header.leafCount === 0) {\n            return;\n        }\n        const stack = [this.header.root];\n        while (stack.length > 0) {\n            const index = stack.pop();\n            const { leafNode, innerNode } = this.nodes[index];\n            if (leafNode) {\n                yield leafNode;\n            }\n            else if (innerNode) {\n                if (descending) {\n                    stack.push(innerNode.children[0], innerNode.children[1]);\n                }\n                else {\n                    stack.push(innerNode.children[1], innerNode.children[0]);\n                }\n            }\n        }\n    }\n}\nexports.Slab = Slab;\nlayout_1.setLayoutDecoder(exports.SLAB_LAYOUT, ({ header, nodes }) => new Slab(header, nodes));\n//# sourceMappingURL=slab.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseInstructionErrorResponse = exports.KNOWN_PROGRAMS = exports.DexError = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst tokens_and_markets_1 = require(\"./tokens_and_markets\");\nconst token_instructions_1 = require(\"./token-instructions\");\nvar DexError;\n(function (DexError) {\n    DexError[DexError[\"InvalidMarketFlags\"] = 0] = \"InvalidMarketFlags\";\n    DexError[DexError[\"InvalidAskFlags\"] = 1] = \"InvalidAskFlags\";\n    DexError[DexError[\"InvalidBidFlags\"] = 2] = \"InvalidBidFlags\";\n    DexError[DexError[\"InvalidQueueLength\"] = 3] = \"InvalidQueueLength\";\n    DexError[DexError[\"OwnerAccountNotProvided\"] = 4] = \"OwnerAccountNotProvided\";\n    DexError[DexError[\"ConsumeEventsQueueFailure\"] = 5] = \"ConsumeEventsQueueFailure\";\n    DexError[DexError[\"WrongCoinVault\"] = 6] = \"WrongCoinVault\";\n    DexError[DexError[\"WrongPcVault\"] = 7] = \"WrongPcVault\";\n    DexError[DexError[\"WrongCoinMint\"] = 8] = \"WrongCoinMint\";\n    DexError[DexError[\"WrongPcMint\"] = 9] = \"WrongPcMint\";\n    DexError[DexError[\"CoinVaultProgramId\"] = 10] = \"CoinVaultProgramId\";\n    DexError[DexError[\"PcVaultProgramId\"] = 11] = \"PcVaultProgramId\";\n    DexError[DexError[\"CoinMintProgramId\"] = 12] = \"CoinMintProgramId\";\n    DexError[DexError[\"PcMintProgramId\"] = 13] = \"PcMintProgramId\";\n    DexError[DexError[\"WrongCoinMintSize\"] = 14] = \"WrongCoinMintSize\";\n    DexError[DexError[\"WrongPcMintSize\"] = 15] = \"WrongPcMintSize\";\n    DexError[DexError[\"WrongCoinVaultSize\"] = 16] = \"WrongCoinVaultSize\";\n    DexError[DexError[\"WrongPcVaultSize\"] = 17] = \"WrongPcVaultSize\";\n    DexError[DexError[\"UninitializedVault\"] = 18] = \"UninitializedVault\";\n    DexError[DexError[\"UninitializedMint\"] = 19] = \"UninitializedMint\";\n    DexError[DexError[\"CoinMintUninitialized\"] = 20] = \"CoinMintUninitialized\";\n    DexError[DexError[\"PcMintUninitialized\"] = 21] = \"PcMintUninitialized\";\n    DexError[DexError[\"WrongMint\"] = 22] = \"WrongMint\";\n    DexError[DexError[\"WrongVaultOwner\"] = 23] = \"WrongVaultOwner\";\n    DexError[DexError[\"VaultHasDelegate\"] = 24] = \"VaultHasDelegate\";\n    DexError[DexError[\"AlreadyInitialized\"] = 25] = \"AlreadyInitialized\";\n    DexError[DexError[\"WrongAccountDataAlignment\"] = 26] = \"WrongAccountDataAlignment\";\n    DexError[DexError[\"WrongAccountDataPaddingLength\"] = 27] = \"WrongAccountDataPaddingLength\";\n    DexError[DexError[\"WrongAccountHeadPadding\"] = 28] = \"WrongAccountHeadPadding\";\n    DexError[DexError[\"WrongAccountTailPadding\"] = 29] = \"WrongAccountTailPadding\";\n    DexError[DexError[\"RequestQueueEmpty\"] = 30] = \"RequestQueueEmpty\";\n    DexError[DexError[\"EventQueueTooSmall\"] = 31] = \"EventQueueTooSmall\";\n    DexError[DexError[\"SlabTooSmall\"] = 32] = \"SlabTooSmall\";\n    DexError[DexError[\"BadVaultSignerNonce\"] = 33] = \"BadVaultSignerNonce\";\n    DexError[DexError[\"InsufficientFunds\"] = 34] = \"InsufficientFunds\";\n    DexError[DexError[\"SplAccountProgramId\"] = 35] = \"SplAccountProgramId\";\n    DexError[DexError[\"SplAccountLen\"] = 36] = \"SplAccountLen\";\n    DexError[DexError[\"WrongFeeDiscountAccountOwner\"] = 37] = \"WrongFeeDiscountAccountOwner\";\n    DexError[DexError[\"WrongFeeDiscountMint\"] = 38] = \"WrongFeeDiscountMint\";\n    DexError[DexError[\"CoinPayerProgramId\"] = 39] = \"CoinPayerProgramId\";\n    DexError[DexError[\"PcPayerProgramId\"] = 40] = \"PcPayerProgramId\";\n    DexError[DexError[\"ClientIdNotFound\"] = 41] = \"ClientIdNotFound\";\n    DexError[DexError[\"TooManyOpenOrders\"] = 42] = \"TooManyOpenOrders\";\n    DexError[DexError[\"FakeErrorSoWeDontChangeNumbers\"] = 43] = \"FakeErrorSoWeDontChangeNumbers\";\n    DexError[DexError[\"BorrowError\"] = 44] = \"BorrowError\";\n    DexError[DexError[\"WrongOrdersAccount\"] = 45] = \"WrongOrdersAccount\";\n    DexError[DexError[\"WrongBidsAccount\"] = 46] = \"WrongBidsAccount\";\n    DexError[DexError[\"WrongAsksAccount\"] = 47] = \"WrongAsksAccount\";\n    DexError[DexError[\"WrongRequestQueueAccount\"] = 48] = \"WrongRequestQueueAccount\";\n    DexError[DexError[\"WrongEventQueueAccount\"] = 49] = \"WrongEventQueueAccount\";\n    DexError[DexError[\"RequestQueueFull\"] = 50] = \"RequestQueueFull\";\n    DexError[DexError[\"EventQueueFull\"] = 51] = \"EventQueueFull\";\n    DexError[DexError[\"MarketIsDisabled\"] = 52] = \"MarketIsDisabled\";\n    DexError[DexError[\"WrongSigner\"] = 53] = \"WrongSigner\";\n    DexError[DexError[\"TransferFailed\"] = 54] = \"TransferFailed\";\n    DexError[DexError[\"ClientOrderIdIsZero\"] = 55] = \"ClientOrderIdIsZero\";\n    DexError[DexError[\"WrongRentSysvarAccount\"] = 56] = \"WrongRentSysvarAccount\";\n    DexError[DexError[\"RentNotProvided\"] = 57] = \"RentNotProvided\";\n    DexError[DexError[\"OrdersNotRentExempt\"] = 58] = \"OrdersNotRentExempt\";\n    DexError[DexError[\"OrderNotFound\"] = 59] = \"OrderNotFound\";\n    DexError[DexError[\"OrderNotYours\"] = 60] = \"OrderNotYours\";\n    DexError[DexError[\"WouldSelfTrade\"] = 61] = \"WouldSelfTrade\";\n    DexError[DexError[\"Unknown\"] = 1000] = \"Unknown\";\n})(DexError = exports.DexError || (exports.DexError = {}));\nexports.KNOWN_PROGRAMS = {\n    [token_instructions_1.TOKEN_PROGRAM_ID.toString()]: 'Token program',\n    [web3_js_1.SystemProgram.programId.toString()]: 'System program'\n};\nfunction parseInstructionErrorResponse(transaction, errorResponse) {\n    const [failedInstructionIndex, customError] = errorResponse;\n    const failedInstruction = transaction.instructions[failedInstructionIndex];\n    let parsedError;\n    if (failedInstruction.programId.toString() in tokens_and_markets_1.PROGRAM_LAYOUT_VERSIONS) {\n        parsedError = DexError[customError['Custom']];\n    }\n    else if (failedInstruction.programId.toString() in exports.KNOWN_PROGRAMS) {\n        const program = exports.KNOWN_PROGRAMS[failedInstruction.programId.toString()];\n        parsedError = `${program} error ${customError['Custom']}`;\n    }\n    else {\n        parsedError = `Unknown program ${failedInstruction.programId.toString()} custom error: ${customError['Custom']}`;\n    }\n    return {\n        failedInstructionIndex,\n        error: parsedError,\n        failedProgram: failedInstruction.programId.toString()\n    };\n}\nexports.parseInstructionErrorResponse = parseInstructionErrorResponse;\n//# sourceMappingURL=error.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NodeWallet = exports.Provider = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst simulate_transaction_1 = require(\"./simulate-transaction\");\nclass Provider {\n    constructor(connection, wallet, opts) {\n        this.connection = connection;\n        this.wallet = wallet;\n        this.opts = opts;\n    }\n    static defaultOptions() {\n        return {\n            preflightCommitment: 'recent',\n            commitment: 'recent',\n        };\n    }\n    static local(url, opts) {\n        opts = opts || Provider.defaultOptions();\n        const connection = new web3_js_1.Connection(url || 'http://localhost:8899', opts.preflightCommitment);\n        const wallet = NodeWallet.local();\n        return new Provider(connection, wallet, opts);\n    }\n    async send(tx, signers, opts) {\n        var _a;\n        if (signers === undefined) {\n            signers = [];\n        }\n        if (opts === undefined) {\n            opts = this.opts;\n        }\n        const signerKps = signers.filter(s => s !== undefined);\n        const signerPubkeys = [this.wallet.publicKey].concat(signerKps.map(s => s.publicKey));\n        tx.setSigners(...signerPubkeys);\n        tx.recentBlockhash = (await this.connection.getRecentBlockhash(opts.preflightCommitment)).blockhash;\n        await this.wallet.signTransaction(tx);\n        signerKps.forEach(kp => {\n            tx.partialSign(kp);\n        });\n        const rawTx = tx.serialize();\n        try {\n            const txId = await web3_js_1.sendAndConfirmRawTransaction(this.connection, rawTx, opts);\n            return txId;\n        }\n        catch (err) {\n            console.error('Transaction failed. Simulating for logs...');\n            const r = await simulate_transaction_1.simulateTransaction(this.connection, tx, (_a = opts.commitment) !== null && _a !== void 0 ? _a : 'recent');\n            console.error(r);\n            throw err;\n        }\n    }\n    async sendAll(reqs, opts) {\n        var _a;\n        if (opts === undefined) {\n            opts = this.opts;\n        }\n        const blockhash = await this.connection.getRecentBlockhash(opts.preflightCommitment);\n        let txs = reqs.map(r => {\n            let tx = r.tx;\n            let signers = r.signers;\n            if (signers === undefined) {\n                signers = [];\n            }\n            const signerKps = signers.filter(s => s !== undefined);\n            const signerPubkeys = [this.wallet.publicKey].concat(signerKps.map(s => s.publicKey));\n            tx.setSigners(...signerPubkeys);\n            tx.recentBlockhash = blockhash.blockhash;\n            signerKps.forEach(kp => {\n                tx.partialSign(kp);\n            });\n            return tx;\n        });\n        const signedTxs = await this.wallet.signAllTransactions(txs);\n        const sigs = [];\n        for (let k = 0; k < txs.length; k += 1) {\n            const tx = signedTxs[k];\n            const rawTx = tx.serialize();\n            try {\n                sigs.push(await web3_js_1.sendAndConfirmRawTransaction(this.connection, rawTx, opts));\n            }\n            catch (err) {\n                console.error('Transaction failed. Simulating for logs...');\n                const r = await simulate_transaction_1.simulateTransaction(this.connection, tx, (_a = opts.commitment) !== null && _a !== void 0 ? _a : 'recent');\n                console.error(r);\n                throw err;\n            }\n        }\n        return sigs;\n    }\n}\nexports.Provider = Provider;\nclass NodeWallet {\n    constructor(payer) {\n        this.payer = payer;\n    }\n    static local() {\n        const payer = new web3_js_1.Account(Buffer.from(JSON.parse(require('fs').readFileSync(require('os').homedir() + '/.config/solana/id.json', {\n            encoding: 'utf-8',\n        }))));\n        return new NodeWallet(payer);\n    }\n    async signTransaction(tx) {\n        tx.partialSign(this.payer);\n        return tx;\n    }\n    async signAllTransactions(txs) {\n        return txs.map(t => {\n            t.partialSign(this.payer);\n            return t;\n        });\n    }\n    get publicKey() {\n        return this.payer.publicKey;\n    }\n}\nexports.NodeWallet = NodeWallet;\n//# sourceMappingURL=provider.js.map","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport { TransactionSignature } from '@solana/web3.js';\nimport { State as StoreState } from '../../store/reducer';\n\ntype Props = {\n  signature: string;\n};\n\nexport async function withTx(\n  snack: any,\n  beforeLabel: string,\n  afterLabel: string,\n  execTx: () => Promise<TransactionSignature>,\n) {\n  snack.enqueueSnackbar(beforeLabel, {\n    variant: 'info',\n  });\n  try {\n    let tx = await execTx();\n    snack.closeSnackbar();\n    snack.enqueueSnackbar(afterLabel, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n  } catch (err) {\n    snack.enqueueSnackbar(`Error: ${err.toString()}`, {\n      variant: 'error',\n    });\n  }\n}\n\nexport function ViewTransactionOnExplorerButton(props: Props) {\n  const { signature } = props;\n  const { explorerClusterSuffix } = useSelector((state: StoreState) => {\n    return {\n      explorerClusterSuffix: state.common.network.explorerClusterSuffix,\n    };\n  });\n  const urlSuffix = `?cluster=${explorerClusterSuffix}`;\n  return (\n    <Button\n      color=\"inherit\"\n      component=\"a\"\n      target=\"_blank\"\n      rel=\"noopener\"\n      href={`https://explorer.solana.com/tx/${signature}` + urlSuffix}\n    >\n      View on Solana Explorer\n    </Button>\n  );\n}\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getOwnedAccountsFilters = exports.parseMintData = exports.parseTokenAccountData = exports.MINT_LAYOUT = exports.ACCOUNT_LAYOUT = exports.getOwnedTokenAccounts = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst serum_1 = require(\"@project-serum/serum\");\nconst bs58 = __importStar(require(\"bs58\"));\nconst BufferLayout = __importStar(require(\"buffer-layout\"));\nasync function getOwnedTokenAccounts(connection, publicKey) {\n    let filters = getOwnedAccountsFilters(publicKey);\n    // @ts-ignore\n    let resp = await connection._rpcRequest('getProgramAccounts', [\n        serum_1.TokenInstructions.TOKEN_PROGRAM_ID.toBase58(),\n        {\n            commitment: connection.commitment,\n            filters,\n        },\n    ]);\n    if (resp.error) {\n        throw new Error('failed to get token accounts owned by ' +\n            publicKey.toBase58() +\n            ': ' +\n            resp.error.message);\n    }\n    return (resp.result\n        // @ts-ignore\n        .map(({ pubkey, account: { data } }) => {\n        data = bs58.decode(data);\n        return {\n            publicKey: new web3_js_1.PublicKey(pubkey),\n            account: parseTokenAccountData(data),\n        };\n    }));\n}\nexports.getOwnedTokenAccounts = getOwnedTokenAccounts;\n// todo: remove\nexports.ACCOUNT_LAYOUT = BufferLayout.struct([\n    BufferLayout.blob(32, 'mint'),\n    BufferLayout.blob(32, 'owner'),\n    BufferLayout.nu64('amount'),\n    BufferLayout.blob(93),\n]);\nexports.MINT_LAYOUT = BufferLayout.struct([\n    BufferLayout.blob(44),\n    BufferLayout.u8('decimals'),\n    BufferLayout.blob(37),\n]);\nfunction parseTokenAccountData(data) {\n    // @ts-ignore\n    let { mint, owner, amount } = exports.ACCOUNT_LAYOUT.decode(data);\n    return {\n        mint: new web3_js_1.PublicKey(mint),\n        owner: new web3_js_1.PublicKey(owner),\n        amount,\n    };\n}\nexports.parseTokenAccountData = parseTokenAccountData;\n// @ts-ignore\nfunction parseMintData(data) {\n    // @ts-ignore\n    let { decimals } = exports.MINT_LAYOUT.decode(data);\n    return { decimals };\n}\nexports.parseMintData = parseMintData;\n// @ts-ignore\nfunction getOwnedAccountsFilters(publicKey) {\n    return [\n        {\n            memcmp: {\n                // @ts-ignore\n                offset: exports.ACCOUNT_LAYOUT.offsetOf('owner'),\n                bytes: publicKey.toBase58(),\n            },\n        },\n        {\n            dataSize: exports.ACCOUNT_LAYOUT.span,\n        },\n    ];\n}\nexports.getOwnedAccountsFilters = getOwnedAccountsFilters;\n//# sourceMappingURL=token.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetMultipleAccountsAndContextRpcResult = exports.getMultipleSolanaAccounts = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst superstruct_1 = require(\"superstruct\");\nconst assert_1 = __importDefault(require(\"assert\"));\nasync function getMultipleSolanaAccounts(connection, publicKeys) {\n    const args = [publicKeys.map(k => k.toBase58()), { commitment: 'recent' }];\n    // @ts-ignore\n    const unsafeRes = await connection._rpcRequest('getMultipleAccounts', args);\n    const res = exports.GetMultipleAccountsAndContextRpcResult(unsafeRes);\n    if (res.error) {\n        throw new Error('failed to get info about accounts ' +\n            publicKeys.map(k => k.toBase58()).join(', ') +\n            ': ' +\n            res.error.message);\n    }\n    assert_1.default(typeof res.result !== 'undefined');\n    const accounts = [];\n    for (const account of res.result.value) {\n        let value = null;\n        if (res.result.value) {\n            const { executable, owner, lamports, data } = account;\n            assert_1.default(data[1] === 'base64');\n            value = {\n                executable,\n                owner: new web3_js_1.PublicKey(owner),\n                lamports,\n                data: Buffer.from(data[0], 'base64'),\n            };\n        }\n        if (value === null) {\n            throw new Error('Invalid response');\n        }\n        accounts.push(value);\n    }\n    return accounts.map((account, idx) => {\n        return {\n            publicKey: publicKeys[idx],\n            account,\n        };\n    });\n}\nexports.getMultipleSolanaAccounts = getMultipleSolanaAccounts;\nfunction jsonRpcResult(resultDescription) {\n    const jsonRpcVersion = superstruct_1.struct.literal('2.0');\n    return superstruct_1.struct.union([\n        superstruct_1.struct({\n            jsonrpc: jsonRpcVersion,\n            id: 'string',\n            error: 'any',\n        }),\n        superstruct_1.struct({\n            jsonrpc: jsonRpcVersion,\n            id: 'string',\n            error: 'null?',\n            result: resultDescription,\n        }),\n    ]);\n}\nfunction jsonRpcResultAndContext(resultDescription) {\n    return jsonRpcResult({\n        context: superstruct_1.struct({\n            slot: 'number',\n        }),\n        value: resultDescription,\n    });\n}\nconst AccountInfoResult = superstruct_1.struct({\n    executable: 'boolean',\n    owner: 'string',\n    lamports: 'number',\n    data: 'any',\n    rentEpoch: 'number?',\n});\nexports.GetMultipleAccountsAndContextRpcResult = jsonRpcResultAndContext(superstruct_1.struct.array([superstruct_1.struct.union(['null', AccountInfoResult])]));\n//# sourceMappingURL=connection.js.map","import { PublicKey } from '@solana/web3.js';\nimport { AccountInfo as TokenAccount } from '@solana/spl-token';\nimport { ProgramAccount as CommonProgramAccount } from '@project-serum/common';\nimport { Action, ActionType } from './actions';\nimport { networks, Network } from './config';\n\nexport enum BootstrapState {\n  NeedsBootstrap,\n  IsBootstrapping,\n  Bootstrapped,\n}\n\nexport default function reducer(\n  state: State = initialState,\n  action: Action,\n): State {\n  let newState = {\n    common: { ...state.common },\n    lockup: { ...state.lockup },\n    registry: { ...state.registry },\n    accounts: { ...state.accounts },\n  };\n  switch (action.type) {\n    // Common.\n    case ActionType.CommonAppWillBootstrap:\n      newState.common.bootstrapState = BootstrapState.IsBootstrapping;\n      newState.common.bootstrapTrigger = false;\n      return newState;\n    case ActionType.CommonAppDidBootstrap:\n      newState.common.bootstrapState = BootstrapState.Bootstrapped;\n      return newState;\n    case ActionType.CommonWalletSetProvider:\n      newState.common.walletProvider = action.item.walletProvider;\n      return newState;\n    case ActionType.CommonWalletDidConnect:\n      newState.common.isWalletConnected = true;\n      return newState;\n    case ActionType.CommonWalletDidDisconnect:\n      newState.common.isWalletConnected = false;\n      return newState;\n    case ActionType.CommonSetNetwork:\n      if (newState.common.network.label !== action.item.network.label) {\n        newState.common.network = action.item.network;\n        newState.common.bootstrapState = BootstrapState.NeedsBootstrap;\n        newState.common.shutdownTrigger = true;\n        const network = networks[action.item.networkKey];\n        newState.registry.registrar = Object.values(network.registrars)[0];\n      }\n      return newState;\n    case ActionType.CommonTriggerBootstrap:\n      newState.common.bootstrapState = BootstrapState.NeedsBootstrap;\n      newState.common.bootstrapTrigger = true;\n      return newState;\n    case ActionType.CommonTriggerShutdown:\n      newState.common.bootstrapState = BootstrapState.NeedsBootstrap;\n      newState.common.shutdownTrigger = true;\n      return newState;\n    case ActionType.CommonDidShutdown:\n      // Reset everything except network and registrar.\n      let s = {\n        ...initialState,\n      };\n      s.common.network = newState.common.network;\n      s.registry.registrar = newState.registry.registrar;\n      return s;\n    case ActionType.CommonOwnedTokenAccountsSet:\n      newState.common.ownedTokenAccounts = action.item.ownedTokenAccounts;\n      return newState;\n\n    case ActionType.CommonOwnedTokenAccountsUpdate:\n      newState.common.ownedTokenAccounts = newState.common.ownedTokenAccounts.map(\n        programAccount => {\n          if (programAccount.publicKey.equals(action.item.account.publicKey)) {\n            return action.item.account;\n          } else {\n            return programAccount;\n          }\n        },\n      );\n      return newState;\n\n    // Lockup.\n    case ActionType.LockupSetVestings:\n      newState.lockup.vestings = action.item.vestingAccounts;\n      return newState;\n    case ActionType.LockupUpdateVesting:\n      newState.accounts[action.item.vesting.publicKey.toString()] =\n        action.item.vesting.account;\n      return newState;\n    case ActionType.LockupCreateVesting:\n      newState.lockup.vestings.unshift(action.item.vesting.publicKey);\n      newState.accounts[action.item.vesting.publicKey.toString()] =\n        action.item.vesting.account;\n      return newState;\n\n    // Registry.\n    case ActionType.RegistrySetMember:\n      // This should only be called on member creation. All other member\n      // member switches should route through `RegistrySetMember`.\n      newState.registry.member = action.item.member;\n      return newState;\n    case ActionType.RegistrySetRegistrar:\n      newState.registry.registrar = action.item.registrar;\n      newState.registry.member = action.item.member;\n      newState.registry.pendingWithdrawals = null;\n      return newState;\n    case ActionType.RegistrySetPendingWithdrawals:\n      action.item.pendingWithdrawals.forEach((pw: any) => {\n        newState.accounts[pw.publicKey.toString()] = pw.account;\n      });\n      newState.registry.pendingWithdrawals = action.item.pendingWithdrawals.map(\n        (pw: any) => pw.publicKey,\n      );\n      return newState;\n    case ActionType.RegistryCreatePendingWithdrawal:\n      newState.accounts[action.item.pendingWithdrawal.publicKey.toString()] =\n        action.item.pendingWithdrawal.account;\n      if (newState.registry.pendingWithdrawals === null) {\n        newState.registry.pendingWithdrawals = [];\n      }\n      newState.registry.pendingWithdrawals.unshift(\n        action.item.pendingWithdrawal.publicKey,\n      );\n      return newState;\n    case ActionType.RegistryUpdatePendingWithdrawal:\n      newState.accounts[action.item.pendingWithdrawal.publicKey.toString()] =\n        action.item.pendingWithdrawal.account;\n      return newState;\n    case ActionType.AccountAdd:\n      newState.accounts[action.item.account.publicKey.toString()] =\n        action.item.account.account;\n      return newState;\n    case ActionType.AccountUpdate:\n      newState.accounts[action.item.account.publicKey.toString()] =\n        action.item.account.account;\n      return newState;\n    default:\n      return newState;\n  }\n}\n\nexport type State = {\n  common: CommonState;\n  lockup: LockupState;\n  registry: RegistryState;\n  accounts: { [pubkey: string]: any };\n};\n\nexport type CommonState = {\n  walletProvider?: string;\n  isWalletConnected: boolean;\n  bootstrapTrigger: boolean;\n  bootstrapState: BootstrapState;\n  shutdownTrigger: boolean;\n  network: Network;\n  ownedTokenAccounts: ProgramAccount<TokenAccount>[];\n};\n\nexport type LockupState = {\n  vestings: PublicKey[];\n};\n\n// All state associated with a single instance of a staking registrar.\nexport type RegistryState = {\n  registrar: PublicKey;\n  member?: PublicKey;\n  pendingWithdrawals: PublicKey[] | null;\n};\n\nexport const initialState: State = {\n  common: {\n    bootstrapTrigger: false,\n    shutdownTrigger: false,\n    isWalletConnected: false,\n    walletProvider: 'https://www.sollet.io',\n    bootstrapState: BootstrapState.NeedsBootstrap,\n    network: networks.mainnet,\n    ownedTokenAccounts: [],\n  },\n  lockup: {\n    vestings: [],\n  },\n  registry: {\n    pendingWithdrawals: null,\n    registrar: networks.mainnet.registrars.srm,\n  },\n  accounts: {},\n};\n\nexport type AsyncData<T> = {\n  isReady: boolean;\n  data?: T;\n};\n\n// Re-export.\nexport type ProgramAccount<T = any> = CommonProgramAccount<T>;\n","import { createStore } from 'redux';\nimport reducer from './reducer';\n\nexport const store = createStore(reducer);\n","import React, {\n  PropsWithChildren,\n  ReactNode,\n  useEffect,\n  useCallback,\n} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport { PublicKey } from '@solana/web3.js';\nimport {\n  token,\n  parseMintAccount,\n  parseTokenAccount,\n} from '@project-serum/common';\nimport * as anchor from '@project-serum/anchor';\nimport { State as StoreState, ProgramAccount } from '../../store/reducer';\nimport { ActionType } from '../../store/actions';\nimport { useWallet } from './WalletProvider';\nimport { memberSeed } from '../../utils/registry';\n\n// BootstrapProvider performs data fetching on application startup.\nexport default function BootstrapProvider(props: PropsWithChildren<ReactNode>) {\n  const { bootstrapTrigger, shutdownTrigger, network, registrar } = useSelector(\n    (state: StoreState) => {\n      return {\n        bootstrapTrigger: state.common.bootstrapTrigger,\n        shutdownTrigger: state.common.shutdownTrigger,\n        network: state.common.network,\n        registrar: state.registry.registrar,\n      };\n    },\n  );\n  const dispatch = useDispatch();\n  const { wallet, lockupClient, registryClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Entry point for bootstrapping all the data for the app.\n  const bootstrap = useCallback(async () => {\n    enqueueSnackbar(`Connecting to ${network.label}`, {\n      variant: 'info',\n      autoHideDuration: 2500,\n    });\n\n    dispatch({\n      type: ActionType.CommonAppWillBootstrap,\n      item: {},\n    });\n\n    let { registrars, members } = await refreshAccounts({\n      dispatch,\n      lockupClient,\n      registryClient,\n      network,\n      wallet,\n    });\n\n    // Temporary account store for the initial registrar switch.\n    const accountStore = Object.fromEntries(\n      new Map(registrars.map(r => [r.publicKey.toString(), r.account])),\n    );\n    members.forEach(m => {\n      accountStore[m.publicKey.toString()] = m.account;\n    });\n\n    await registrarSwitch(\n      registryClient,\n      accountStore,\n      dispatch,\n      registrar,\n      undefined,\n    );\n\n    dispatch({\n      type: ActionType.CommonAppDidBootstrap,\n      item: {},\n    });\n\n    enqueueSnackbar(`Connection established`, {\n      variant: 'success',\n      autoHideDuration: 2500,\n    });\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    registryClient,\n    registrar,\n    lockupClient,\n    network,\n    wallet,\n  ]);\n\n  const shutdown = useCallback(async () => {\n    wallet.disconnect();\n    dispatch({\n      type: ActionType.CommonDidShutdown,\n      item: {},\n    });\n  }, [dispatch, wallet]);\n\n  useEffect(() => {\n    if (bootstrapTrigger) {\n      bootstrap().catch(err => {\n        console.error(err);\n        enqueueSnackbar(`Error bootstrapping application: ${err.toString()}`, {\n          variant: 'error',\n        });\n      });\n    }\n    if (shutdownTrigger) {\n      shutdown().catch(err => {\n        console.error(err);\n        enqueueSnackbar(`Error shutting down application: ${err.toString()}`, {\n          variant: 'error',\n        });\n      });\n    }\n  }, [bootstrapTrigger, bootstrap, shutdownTrigger, shutdown, enqueueSnackbar]);\n\n  return <>{props.children}</>;\n}\n\n// Fetches and populates the redux store with all accounts needed for the app to start.\nexport async function refreshAccounts({\n  dispatch,\n  lockupClient,\n  registryClient,\n  network,\n  wallet,\n}: any) {\n  // Fetch all staking instances.\n  const fetchRegistrars = async (): Promise<ProgramAccount[]> => {\n    const registrarAddresses: PublicKey[] = Object.values(network.registrars);\n\n    // All registrars.\n    const registrars: ProgramAccount[] = (\n      await anchor.utils.getMultipleAccounts(\n        registryClient.provider.connection,\n        registrarAddresses,\n      )\n    ).map(raw => {\n      const account = registryClient.coder.accounts.decode(\n        'Registrar',\n        raw!.account.data,\n      );\n      return {\n        publicKey: raw!.publicKey,\n        account,\n      };\n    });\n\n    // Mint for each registrar.\n    const mints: ProgramAccount[] = (\n      await anchor.utils.getMultipleAccounts(\n        registryClient.provider.connection,\n        registrars.map(r => r.account.mint),\n      )\n    ).map(raw => {\n      const account = parseMintAccount(raw!.account.data);\n      return {\n        publicKey: raw!.publicKey,\n        account,\n      };\n    });\n\n    // Reward queues for each registrar.\n    const rewardQs = (\n      await anchor.utils.getMultipleAccounts(\n        registryClient.provider.connection,\n        registrars.map(r => r.account.rewardEventQ),\n      )\n    ).map(raw => {\n      const account = registryClient.coder.accounts.decode(\n        'RewardQueue',\n        raw!.account.data,\n      );\n      return {\n        publicKey: raw!.publicKey,\n        account,\n      };\n    });\n\n    // Add all the accounts to the store.\n    registrars\n      .concat(mints)\n      .concat(rewardQs)\n      .forEach(r => {\n        dispatch({\n          type: ActionType.AccountAdd,\n          item: {\n            account: r,\n          },\n        });\n      });\n    return registrars;\n  };\n\n  // Fetch the stake accounts for each staking instance (for the connected wallet).\n  const fetchMembers = async (\n    registrars: ProgramAccount[],\n  ): Promise<ProgramAccount[]> => {\n    const members = await Promise.all(\n      registrars\n        .map((r: ProgramAccount) => r.publicKey)\n        .map((r: PublicKey) =>\n          memberSeed(r)\n            .then(seed =>\n              PublicKey.createWithSeed(\n                wallet.publicKey,\n                seed,\n                registryClient.programId,\n              ),\n            )\n            .then(member => {\n              return {\n                memberPublicKey: member,\n                registrar: r,\n              };\n            }),\n        ),\n    );\n    const memberAddresses: PublicKey[] = members.map(m => m.memberPublicKey);\n    const memberAccounts: ProgramAccount[] = (\n      await anchor.utils.getMultipleAccounts(\n        registryClient.provider.connection,\n        memberAddresses,\n      )\n    )\n      .filter(raw => raw !== null)\n      .map((raw: any) => {\n        const account = registryClient.coder.accounts.decode(\n          'Member',\n          raw!.account.data,\n        );\n        return {\n          publicKey: raw!.publicKey,\n          account,\n        };\n      });\n\n    // Get all accounts for all of our member accounts.\n    //\n    // Note: As the number of registrars grows, we'll probably want to move\n    //       this fetch to be an on demand query, rather than on application\n    //       bootstrap.\n    await Promise.all(\n      memberAccounts.map(memberAccount => {\n        return fetchAndDispatchMemberAccounts(\n          memberAccount,\n          dispatch,\n          registryClient.provider.connection,\n        );\n      }),\n    );\n\n    // Add all the member accounts to the store. Must be done *after* the\n    // active member's vaults.\n    memberAccounts.forEach(m => {\n      dispatch({\n        type: ActionType.AccountAdd,\n        item: {\n          account: m,\n        },\n      });\n    });\n\n    return memberAccounts;\n  };\n\n  // All mints for each staking instance (pool token and the token being staked).\n  const fetchMints = async (registrars: ProgramAccount[]) => {\n    const mintAddresses = registrars\n      .map(r => r.account.mint)\n      .concat(registrars.map(r => r.account.poolMint));\n    const mints = (\n      await anchor.utils.getMultipleAccounts(\n        registryClient.provider.connection,\n        mintAddresses,\n      )\n    ).map(raw => {\n      const account = parseMintAccount(raw!.account.data);\n      return {\n        publicKey: raw!.publicKey,\n        account,\n      };\n    });\n    mints.forEach(m => {\n      dispatch({\n        type: ActionType.AccountAdd,\n        item: {\n          account: m,\n        },\n      });\n    });\n  };\n\n  // All token accounts owned by the current user.\n  const fetchOwnedTokenAccounts = async () => {\n    const ownedTokenAccounts = await token.getOwnedTokenAccounts(\n      lockupClient.provider.connection,\n      wallet.publicKey,\n    );\n    dispatch({\n      type: ActionType.CommonOwnedTokenAccountsSet,\n      item: {\n        ownedTokenAccounts,\n      },\n    });\n  };\n\n  // All vesting accounts owned by the current user.\n  const fetchVestingAccounts = async () => {\n    const vestingAccounts = await lockupClient.account.vesting.all(\n      wallet.publicKey.toBuffer(),\n    );\n    vestingAccounts.forEach((account: any) => {\n      dispatch({\n        type: ActionType.AccountAdd,\n        item: {\n          account,\n        },\n      });\n    });\n    dispatch({\n      type: ActionType.LockupSetVestings,\n      item: {\n        vestingAccounts: vestingAccounts.map(\n          (v: ProgramAccount) => v.publicKey,\n        ),\n      },\n    });\n  };\n\n  const registrars = await fetchRegistrars();\n  const members = await fetchMembers(registrars);\n  await fetchMints(registrars);\n  await fetchOwnedTokenAccounts();\n  await fetchVestingAccounts();\n\n  return { registrars, members };\n}\n\nexport async function registrarSwitch(\n  registryClient: any,\n  accounts: any,\n  dispatch: any,\n  newRegistrar: PublicKey,\n  oldRegistrar?: PublicKey,\n) {\n  const oldMember = await (async (): Promise<ProgramAccount | undefined> => {\n    if (oldRegistrar === undefined) {\n      return undefined;\n    }\n    const oldMember = await PublicKey.createWithSeed(\n      registryClient.provider.wallet.publicKey,\n      await memberSeed(oldRegistrar),\n      registryClient.programId,\n    );\n    const oldMemberAccount = accounts[oldMember.toString()];\n    return oldMemberAccount !== undefined\n      ? {\n          publicKey: oldMember,\n          account: oldMemberAccount,\n        }\n      : undefined;\n  })();\n\n  const newMember = await (async (): Promise<ProgramAccount | undefined> => {\n    const newMember = await PublicKey.createWithSeed(\n      registryClient.provider.wallet.publicKey,\n      await memberSeed(newRegistrar),\n      registryClient.programId,\n    );\n    const newMemberAccount = accounts[newMember.toString()];\n    return newMemberAccount\n      ? {\n          publicKey: newMember,\n          account: newMemberAccount,\n        }\n      : undefined;\n  })();\n\n  await subscribeRegistrar(\n    registryClient,\n    accounts,\n    dispatch,\n    newRegistrar,\n    oldRegistrar,\n  );\n  if (newMember) {\n    unsubscribeMember(registryClient, oldMember);\n    subscribeMember(newMember, registryClient, dispatch);\n  }\n\n  // Perform the UI update.\n  dispatch({\n    type: ActionType.RegistrySetRegistrar,\n    item: {\n      registrar: newRegistrar,\n      member: newMember ? newMember.publicKey : undefined,\n    },\n  });\n}\n\nexport async function subscribeRegistrar(\n  registryClient: any,\n  accounts: any,\n  dispatch: any,\n  newRegistrar: PublicKey,\n  oldRegistrar?: PublicKey,\n) {\n  if (oldRegistrar) {\n    const oldRegistrarAccount = accounts[oldRegistrar.toString()];\n    registryClient.account.rewardQueue.unsubscribe(\n      oldRegistrarAccount.rewardEventQ,\n    );\n    // TODO: unsubscribe from the staking pool subscription.\n  }\n\n  const newRegistrarAccount = accounts[newRegistrar.toString()];\n\n  // Reward event queue sub.\n  const conn = registryClient.account.rewardQueue.subscribe(\n    newRegistrarAccount.rewardEventQ,\n  );\n  conn.on('change', (account: any) => {\n    dispatch({\n      type: ActionType.AccountUpdate,\n      item: {\n        account: {\n          publicKey: newRegistrarAccount.rewardEventQ,\n          account,\n        },\n      },\n    });\n  });\n\n  // Staking pool token sub.\n  // TODO: track these connections somewhere more organized.\n  registryClient.provider.connection.onAccountChange(\n    newRegistrarAccount.poolMint,\n    (acc: any) => {\n      const poolMint = parseMintAccount(acc.data);\n      dispatch({\n        type: ActionType.AccountUpdate,\n        item: {\n          account: {\n            publicKey: newRegistrarAccount.poolMint,\n            account: poolMint,\n          },\n        },\n      });\n    },\n    'recent',\n  );\n}\n\nexport function subscribeMember(\n  newMember: ProgramAccount,\n  registryClient: any,\n  dispatch: any,\n) {\n  // Subscribe to all member account updates.\n  registryClient.account.member\n    .subscribe(newMember.publicKey)\n    .on('change', (account: any) => {\n      dispatch({\n        type: ActionType.AccountUpdate,\n        item: {\n          account: {\n            publicKey: newMember.publicKey,\n            account,\n          },\n        },\n      });\n    });\n\n  // Subscription function, updating the redux store on every change\n  // to a token account.\n  //\n  // TODO: should track these subscriptions for unsubscribing on demand.\n  const createVaultSubscription = (address: PublicKey) => {\n    registryClient.provider.connection.onAccountChange(\n      address,\n      (acc: any) => {\n        const tokenAccount = parseTokenAccount(acc.data);\n        dispatch({\n          type: ActionType.AccountUpdate,\n          item: {\n            account: {\n              publicKey: address,\n              account: tokenAccount,\n            },\n          },\n        });\n      },\n      'recent',\n    );\n  };\n\n  // Subscribe to all the member's token vaults.\n  createVaultSubscription(newMember.account.balances.vault);\n  createVaultSubscription(newMember.account.balances.vaultStake);\n  createVaultSubscription(newMember.account.balances.vaultPw);\n  createVaultSubscription(newMember.account.balances.spt);\n  createVaultSubscription(newMember.account.balancesLocked.vault);\n  createVaultSubscription(newMember.account.balancesLocked.vaultStake);\n  createVaultSubscription(newMember.account.balancesLocked.vaultPw);\n  createVaultSubscription(newMember.account.balancesLocked.spt);\n}\n\nfunction unsubscribeMember(registryClient: any, newMember?: ProgramAccount) {\n  // todo\n}\n\n// Fetches all accounts for a member account and populates the store with them.\nexport async function fetchAndDispatchMemberAccounts(\n  memberAccount: ProgramAccount,\n  dispatch: any,\n  connection: any,\n) {\n  let accounts = (\n    await anchor.utils.getMultipleAccounts(connection, [\n      memberAccount.account.balances.vault,\n      memberAccount.account.balances.vaultStake,\n      memberAccount.account.balances.vaultPw,\n      memberAccount.account.balances.spt,\n      memberAccount.account.balancesLocked.vault,\n      memberAccount.account.balancesLocked.vaultStake,\n      memberAccount.account.balancesLocked.vaultPw,\n      memberAccount.account.balancesLocked.spt,\n    ])\n  )\n    .filter(raw => raw !== null)\n    .map((raw: any) => {\n      return {\n        publicKey: raw.publicKey,\n        account: parseTokenAccount(raw.account.data),\n      };\n    });\n  accounts.forEach(account => {\n    dispatch({\n      type: ActionType.AccountAdd,\n      item: {\n        account,\n      },\n    });\n  });\n}\n","import React, { useState, useEffect, ReactElement } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { useSnackbar } from 'notistack';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Select from '@material-ui/core/Select';\nimport Menu from '@material-ui/core/Menu';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport IconButton from '@material-ui/core/IconButton';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport Button from '@material-ui/core/Button';\nimport PersonIcon from '@material-ui/icons/Person';\nimport BubbleChartIcon from '@material-ui/icons/BubbleChart';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { refreshAccounts } from './BootstrapProvider';\nimport { networks } from '../../store/config';\nimport {\n  State as StoreState,\n  ProgramAccount,\n  BootstrapState,\n} from '../../store/reducer';\nimport { ActionType } from '../../store/actions';\nimport { useWallet } from './WalletProvider';\n\ntype HeaderProps = {\n  isAppReady: boolean;\n  member?: ProgramAccount;\n};\n\nexport default function Header(props: HeaderProps) {\n  const { isAppReady } = props;\n  const { network } = useSelector((state: StoreState) => {\n    return {\n      network: state.common.network,\n      isAppReady:\n        state.common.isWalletConnected &&\n        state.common.bootstrapState === BootstrapState.Bootstrapped,\n    };\n  });\n  const dispatch = useDispatch();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const { wallet, registryClient, lockupClient } = useWallet();\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  return (\n    <AppBar\n      position=\"static\"\n      style={{\n        background: '#ffffff',\n        color: '#272727',\n        boxShadow: 'none',\n        borderBottom: 'solid 1pt #ccc',\n      }}\n    >\n      <Toolbar>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            width: '100%',\n          }}\n        >\n          <div style={{ display: 'flex' }}>\n            <SerumLogoButton />\n            <BarButton label=\"Stake\" hrefClient=\"/stake\" />\n            <BarButton label=\"Lockup\" hrefClient=\"/lockup\" />\n            <BarButton label=\"Multisig\" href=\"https://multisig.projectserum.com\" />\n            <BarButton label=\"Trade\" href=\"https://dex.projectserum.com\" />\n            {network.srmFaucet && (\n              <BarButton\n                label=\"Faucet\"\n                href=\"https://www.spl-token-ui.com/#/token-faucets\"\n              />\n            )}\n          </div>\n          <div\n            style={{\n              display: 'flex',\n            }}\n          >\n            <div\n              onClick={() => {\n                setIsRefreshing(true);\n                enqueueSnackbar(`Refreshing`, {\n                  variant: 'info',\n                });\n                refreshAccounts({\n                  dispatch,\n                  lockupClient,\n                  registryClient,\n                  network,\n                  wallet,\n                })\n                  .then(() => {\n                    setIsRefreshing(false);\n                    closeSnackbar();\n                  })\n                  .catch(err => {\n                    setIsRefreshing(false);\n                    closeSnackbar();\n                    enqueueSnackbar(`There was a problem refreshing: ${err}`, {\n                      variant: 'error',\n                      autoHideDuration: 2500,\n                    });\n                  });\n              }}\n              style={{\n                display: isAppReady ? 'block' : 'none',\n                justifyContent: 'center',\n                flexDirection: 'column',\n                marginRight: '10px',\n              }}\n            >\n              {isRefreshing ? (\n                <div\n                  style={{\n                    marginTop: '8px',\n                    padding: '10px',\n                  }}\n                >\n                  <CircularProgress style={{ width: '24px', height: '24px' }} />\n                </div>\n              ) : (\n                <div>\n                  <IconButton>\n                    <RefreshIcon />\n                  </IconButton>\n                </div>\n              )}\n            </div>\n            <NetworkSelector />\n            <WalletConnectButton\n              style={{\n                display: isAppReady ? 'none' : '',\n              }}\n            />\n            {isAppReady && <UserSelector />}\n          </div>\n        </div>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nfunction SerumLogoButton() {\n  const history = useHistory();\n  return (\n    <div style={{ display: 'flex' }} onClick={() => history.push('/')}>\n      <Button color=\"inherit\">\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n          }}\n        >\n          <img\n            style={{\n              display: 'block',\n              height: '35px',\n            }}\n            alt=\"Logo\"\n            src=\"http://dex.projectserum.com/static/media/logo.49174c73.svg\"\n          />\n        </div>\n      </Button>\n    </div>\n  );\n}\n\ntype BarButtonProps = {\n  label: string;\n  hrefClient?: string;\n  href?: string;\n};\n\nfunction BarButton(props: BarButtonProps) {\n  const history = useHistory();\n  const { label, href, hrefClient } = props;\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n      }}\n      onClick={() => hrefClient && history.push(hrefClient)}\n    >\n      <Link\n        style={{ color: 'inherit', textDecoration: 'none' }}\n        href={href}\n        target=\"_blank\"\n      >\n        <Button color=\"inherit\">\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              flexDirection: 'column',\n            }}\n          >\n            <Typography style={{ fontSize: '15px' }}>{label}</Typography>\n          </div>\n        </Button>\n      </Link>\n    </div>\n  );\n}\n\nfunction NetworkSelector() {\n  const network = useSelector((state: StoreState) => {\n    return state.common.network;\n  });\n  const dispatch = useDispatch();\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div\n      style={{\n        marginRight: '10px',\n        fontSize: '15px',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n      }}\n    >\n      <Button\n        color=\"inherit\"\n        onClick={e =>\n          setAnchorEl(\n            // @ts-ignore\n            e.currentTarget,\n          )\n        }\n      >\n        <BubbleChartIcon />\n        <Typography style={{ marginLeft: '5px', fontSize: '15px' }}>\n          {network.label}\n        </Typography>\n      </Button>\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n        style={{\n          marginLeft: '12px',\n          color: 'white',\n        }}\n      >\n        {Object.keys(networks).map((n: string) => (\n          <MenuItem\n            key={n}\n            onClick={() => {\n              handleClose();\n              dispatch({\n                type: ActionType.CommonSetNetwork,\n                item: {\n                  network: networks[n],\n                  networkKey: n,\n                },\n              });\n            }}\n          >\n            <Typography>{networks[n].label}</Typography>\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n}\n\nfunction UserSelector() {\n  const { wallet } = useWallet();\n\n  return (\n    <Select\n      displayEmpty\n      renderValue={() => {\n        return (\n          <Typography style={{ overflow: 'hidden' }}>\n            {wallet.publicKey.toString()}\n          </Typography>\n        );\n      }}\n      style={{\n        marginLeft: '12px',\n        width: '150px',\n      }}\n      onChange={e => {\n        if (e.target.value === 'disconnect') {\n          wallet.disconnect();\n        }\n      }}\n    >\n      <MenuItem value=\"disconnect\">\n        <IconButton color=\"inherit\">\n          <ExitToAppIcon />\n          <Typography style={{ marginLeft: '15px' }}>Disconnect</Typography>\n        </IconButton>\n      </MenuItem>\n    </Select>\n  );\n}\n\ntype WalletConnectButtonProps = {\n  style?: any;\n};\n\nexport function WalletConnectButton(\n  props: WalletConnectButtonProps,\n): ReactElement {\n  const { showDisconnect } = useSelector((state: StoreState) => {\n    return {\n      showDisconnect: state.common.isWalletConnected,\n    };\n  });\n  const dispatch = useDispatch();\n  const { wallet, lockupClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Wallet connection event listeners.\n  useEffect(() => {\n    wallet.on('disconnect', () => {\n      enqueueSnackbar('Disconnected from wallet', {\n        variant: 'info',\n        autoHideDuration: 2500,\n      });\n      dispatch({\n        type: ActionType.CommonWalletDidDisconnect,\n        item: {},\n      });\n      dispatch({\n        type: ActionType.CommonTriggerShutdown,\n        item: {},\n      });\n    });\n    wallet.on('connect', async () => {\n      dispatch({\n        type: ActionType.CommonWalletDidConnect,\n        item: {},\n      });\n      dispatch({\n        type: ActionType.CommonTriggerBootstrap,\n        item: {},\n      });\n    });\n  }, [wallet, dispatch, enqueueSnackbar, lockupClient.provider.connection]);\n\n  return showDisconnect ? (\n    <Button\n      style={props.style}\n      color=\"inherit\"\n      onClick={() => wallet.disconnect()}\n    >\n      <ExitToAppIcon />\n      <Typography style={{ marginLeft: '5px', fontSize: '15px' }}>\n        Disconnect\n      </Typography>\n    </Button>\n  ) : (\n    <Button\n      style={props.style}\n      color=\"inherit\"\n      onClick={() => wallet.connect()}\n    >\n      <PersonIcon />\n      <Typography style={{ marginLeft: '5px', fontSize: '15px' }}>\n        Connect wallet\n      </Typography>\n    </Button>\n  );\n}\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\n\nexport default function Footer() {\n  return (\n    <div\n      style={{\n        zIndex: 99,\n        position: 'fixed',\n        width: '100%',\n        bottom: 0,\n        textAlign: 'center',\n        height: '30px',\n        backgroundColor: '#fbfbfb',\n        borderTop: 'solid 1pt #ccc',\n        display: 'flex',\n        justifyContent: 'space-between',\n        paddingLeft: '10px',\n        paddingRight: '10px',\n      }}\n    >\n      <div style={{ marginLeft: 'auto', marginRight: 'auto', display: 'flex' }}>\n        <FooterButton\n          href={\n            'https://github.com/project-serum/anchor/blob/master/examples/lockup/docs/staking.md'\n          }\n          label={'Technical Documentation'}\n        />\n        <FooterButton\n          href={'https://github.com/project-serum/awesome-serum'}\n          label={'Developer Resources'}\n        />\n        <FooterButton\n          href={'https://discord.com/channels/739225212658122886'}\n          label={'Discord'}\n        />\n        <FooterButton href={'https://t.me/ProjectSerum'} label={'Telegram'} />\n        <FooterButton\n          href={'https://github.com/project-serum'}\n          label={'GitHub'}\n        />\n        <FooterButton\n          href={'https://solanabeach.io/'}\n          label={'Solana Network'}\n          isEnd={true}\n        />\n      </div>\n    </div>\n  );\n}\n\ntype FooterButtonProps = {\n  label: string;\n  href: string;\n  isEnd?: boolean;\n};\n\nfunction FooterButton(props: FooterButtonProps) {\n  const { label, href, isEnd } = props;\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        marginRight: isEnd ? '' : '15px',\n      }}\n    >\n      <Link href={href} target=\"_blank\" color=\"inherit\">\n        <Typography style={{ fontSize: '14px' }}>{label}</Typography>\n      </Link>\n    </div>\n  );\n}\n","import React, { useState, PropsWithChildren } from 'react';\nimport { useSelector } from 'react-redux';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Button from '@material-ui/core/Button';\nimport { State as StoreState, BootstrapState } from '../../store/reducer';\nimport Header from './Header';\nimport Footer from './Footer';\n\ntype Props = {};\n\nexport default function Layout(props: PropsWithChildren<Props>) {\n  const { isAppReady } = useSelector((state: StoreState) => {\n    return {\n      isAppReady:\n        state.common.isWalletConnected &&\n        state.common.bootstrapState === BootstrapState.Bootstrapped,\n    };\n  });\n  const [refresh, setRefresh] = useState(false);\n  return (\n    <div\n      style={{\n        display: 'flex',\n        minHeight: '100vh',\n        flexDirection: 'column',\n        backgroundColor: 'rgb(251, 251, 251)',\n      }}\n    >\n      <div\n        style={{\n          position: 'fixed',\n          width: '100%',\n          zIndex: 99,\n        }}\n      >\n        <RiskBar />\n        <Header isAppReady={isAppReady} />\n      </div>\n      <div\n        style={{\n          width: '100%',\n          marginTop: '94px',\n          flex: 1,\n          display: 'flex',\n          marginBottom: '30px', // Compensates for the fixed position footer.\n        }}\n      >\n        {window.localStorage.getItem('consent') ? (\n          !isAppReady ? (\n            <DisconnectedSplash />\n          ) : (\n            <div style={{ width: '100%' }}>{props.children}</div>\n          )\n        ) : (\n          <RiskDisclosureForm\n            onConsent={() => {\n              window.localStorage.setItem('consent', 'true');\n              setRefresh(!refresh);\n            }}\n          />\n        )}\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nfunction RiskBar() {\n  return (\n    <div\n      style={{\n        color: '#fff',\n        backgroundColor: 'rgb(39, 39, 39)',\n        height: '30px',\n        textAlign: 'center',\n      }}\n    >\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          flexDirection: 'column',\n          height: '100%',\n        }}\n      >\n        <Typography style={{ fontSize: '14px' }}>\n          Stake is unaudited software. Use at your own risk.\n        </Typography>\n      </div>\n    </div>\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\nfunction RiskDisclosureForm({ onConsent }: { onConsent: () => void }) {\n  return (\n    <div\n      style={{\n        flex: '1',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        textAlign: 'center',\n      }}\n    >\n      <div style={{ width: '100%', display: 'flex' }}>\n        <div\n          style={{ display: 'flex', marginLeft: 'auto', marginRight: 'auto' }}\n        >\n          <Typography\n            style={{ marginBottom: '16px', maxWidth: '1000px' }}\n            color=\"textSecondary\"\n            variant=\"h4\"\n          >\n            No statement or warranty is provided in relation to the utility of\n            this program, the safety of its code or its suitability for your\n            use, and by using it, you agree to bear any risk associated with\n            such potential vulnerabilities, including, but not limited to the\n            potential loss of tokens.\n          </Typography>\n        </div>\n      </div>\n      <div style={{ display: 'flex', marginLeft: 'auto', marginRight: 'auto' }}>\n        <Button variant=\"contained\" color=\"primary\" onClick={onConsent}>\n          I agree\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nfunction DisconnectedSplash() {\n  const classes = useStyles();\n  const { network, isDisconnected } = useSelector((state: StoreState) => {\n    return {\n      network: state.common.network,\n      isDisconnected: !state.common.isWalletConnected,\n    };\n  });\n  return (\n    <div\n      style={{\n        flex: '1',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        textAlign: 'center',\n      }}\n    >\n      <div style={{ width: '100%', display: 'flex' }}>\n        {isDisconnected ? (\n          <div\n            style={{ display: 'flex', marginLeft: 'auto', marginRight: 'auto' }}\n          >\n            <Typography\n              style={{ marginLeft: '24px' }}\n              color=\"textSecondary\"\n              variant=\"h4\"\n            >\n              Disconnected\n            </Typography>\n          </div>\n        ) : (\n          <div style={{ width: '100%' }}>\n            <div style={{ width: '100%' }} className={classes.root}>\n              <div>\n                <Typography variant=\"h5\">\n                  {`Connecting to ${network.label}...`}\n                </Typography>\n              </div>\n              <div\n                style={{\n                  marginLeft: 'auto',\n                  marginRight: 'auto',\n                  width: '300px',\n                }}\n              >\n                <LinearProgress style={{ width: '100%' }} />\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { TokenInfo } from '@solana/spl-token-registry';\nimport { useTokenInfos } from '../../utils/tokens';\nimport { State as StoreState, ProgramAccount } from '../../store/reducer';\nimport { Network } from '../../store/config';\nimport * as bootstrap from './BootstrapProvider';\nimport { useWallet } from './WalletProvider';\n\nexport function activeRegistrar(\n  state: StoreState,\n): { label: string; programAccount: any } {\n  const registrars = Object.keys(state.common.network.registrars)\n    .map(registrar => {\n      let entry: [string, ProgramAccount] = [\n        registrar,\n        {\n          publicKey: state.common.network.registrars[registrar],\n          account:\n            state.accounts[\n              state.common.network.registrars[registrar].toString()\n            ],\n        },\n      ];\n      return entry;\n    })\n    .filter(r => r[1].account !== undefined);\n  const selectedRegistrar: any = registrars\n    .filter(([r, acc]) => acc.publicKey.equals(state.registry.registrar))\n    .map(([r, acc]) => {\n      return {\n        label: r,\n        programAccount: acc,\n      };\n    })\n    .pop();\n\n  return selectedRegistrar;\n}\n\nexport default function RegistrarSelect() {\n  const { registryClient } = useWallet();\n  const { registrars, selectedRegistrar, accounts, network } = useSelector(\n    (state: StoreState) => {\n      const registrars = Object.keys(state.common.network.registrars)\n        .map(registrar => {\n          let entry: [string, ProgramAccount] = [\n            registrar,\n            {\n              publicKey: state.common.network.registrars[registrar],\n              account:\n                state.accounts[\n                  state.common.network.registrars[registrar].toString()\n                ],\n            },\n          ];\n          return entry;\n        })\n        .filter(r => r[1].account !== undefined);\n      const selectedRegistrar: any = registrars\n        .filter(([r, acc]) => acc.publicKey.equals(state.registry.registrar))\n        .map(([r, acc]) => {\n          return {\n            label: r,\n            programAccount: acc,\n          };\n        })\n        .pop();\n      return {\n        network: state.common.network,\n        accounts: state.accounts,\n        registrars,\n        selectedRegistrar,\n      };\n    },\n  );\n  const dispatch = useDispatch();\n  const tokenInfos = useTokenInfos();\n\n  return (\n    <Select\n      style={{ width: '294px', height: '36px' }}\n      variant={'outlined'}\n      fullWidth\n      value={selectedRegistrar.label}\n      onChange={async e => {\n        const registrar: ProgramAccount = registrars\n          .filter(([r, acc]) => r === e.target.value)\n          .map(([r, acc]) => acc)\n          .pop()!;\n\n        bootstrap.registrarSwitch(\n          registryClient,\n          accounts,\n          dispatch,\n          registrar!.publicKey, // New.\n          selectedRegistrar.programAccount.publicKey, // Old.\n        );\n      }}\n    >\n      {registrars.length === 0 ? (\n        <MenuItem value={'_loading'}>Loading registrars...</MenuItem>\n      ) : (\n        registrars.map(([label, registrar]) => {\n          return (\n            <MenuItem key={label} value={label}>\n              <div style={{ display: 'flex' }}>\n                <div\n                  style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'center',\n                  }}\n                >\n                  {getImage(tokenInfos.get(registrar.account.mint.toString()))}\n                </div>\n                <div\n                  style={{\n                    overflow: 'hidden',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'center',\n                  }}\n                >\n                  {`${registrarToDisplayLabel(registrar, network)}`}\n                </div>\n              </div>\n            </MenuItem>\n          );\n        })\n      )}\n    </Select>\n  );\n}\n\nfunction registrarToDisplayLabel(\n  registrar: ProgramAccount,\n  network: Network,\n): string {\n  const entry = Object.keys(network.registrars)\n    .filter(r => network.registrars[r].equals(registrar.publicKey))\n    .pop();\n  if (entry !== undefined) {\n    return entry.toUpperCase();\n  }\n  return registrar.publicKey.toString();\n}\n\nexport function getImage(token?: TokenInfo, style?: any) {\n  if (token) {\n    return (\n      <img\n        alt=\"Token Icon\"\n        style={style ?? { marginRight: '10px', height: '25px' }}\n        src={token.logoURI}\n      />\n    );\n  } else {\n    return <div style={{ marginLeft: '32px' }}></div>;\n  }\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { State as StoreState } from '../store/reducer';\nimport { toDisplay, toDisplayLabel } from '../utils/tokens';\n\nexport default function Me() {\n  const { member } = useSelector((state: StoreState) => {\n    return {\n      member: state.registry.member,\n    };\n  });\n\n  return (\n    <div style={{ display: 'flex', width: '100%' }}>\n      <div style={{ flex: 1, marginTop: '24px', marginBottom: '24px' }}>\n        {member && <MemberBalancesCard />}\n      </div>\n    </div>\n  );\n}\n\n// Assumes a member and all vaults is available in the store.\nfunction MemberBalancesCard() {\n  const {\n    mint,\n    registrar,\n    vault,\n    vaultStake,\n    vaultPw,\n    spt,\n    lockedVault,\n    lockedVaultStake,\n    lockedVaultPw,\n    lockedSpt,\n  } = useSelector((state: StoreState) => {\n    const member = state.accounts[state.registry.member!.toString()];\n    const registrar = state.accounts[state.registry.registrar.toString()];\n    return {\n      registrar,\n      mint: state.accounts[registrar.mint.toString()],\n      vault: state.accounts[member.balances.vault],\n      vaultStake: state.accounts[member.balances.vaultStake],\n      vaultPw: state.accounts[member.balances.vaultPw],\n      spt: state.accounts[member.balances.spt],\n      lockedVault: state.accounts[member.balancesLocked.vault],\n      lockedVaultStake: state.accounts[member.balancesLocked.vaultStake],\n      lockedVaultPw: state.accounts[member.balancesLocked.vaultPw],\n      lockedSpt: state.accounts[member.balancesLocked.spt],\n    };\n  });\n  const tables = [\n    {\n      title: 'Main Balances',\n      description: 'Balances deposited directly from the connected wallet.',\n      rows: [\n        {\n          token: toDisplayLabel(registrar.mint),\n          balance: toDisplay(vault.amount, mint.decimals),\n          stake: toDisplay(vaultStake.amount, mint.decimals),\n          pending: toDisplay(vaultPw.amount, mint.decimals),\n          spt: toDisplay(spt.amount, 0),\n        },\n      ],\n    },\n    {\n      title: 'Locked Balances',\n      description:\n        'Balances deposited from the lockup program. These funds are isolated from the Main Balances and may only be withdrawn back to the lockup program. At all times they are program controlled.',\n      rows: [\n        {\n          token: toDisplayLabel(registrar.mint),\n          balance: toDisplay(lockedVault.amount, mint.decimals),\n          stake: toDisplay(lockedVaultStake.amount, mint.decimals),\n          pending: toDisplay(lockedVaultPw.amount, mint.decimals),\n          spt: toDisplay(lockedSpt.amount, 0),\n        },\n      ],\n    },\n  ];\n  return (\n    <Card\n      style={{\n        marginBottom: '24px',\n      }}\n    >\n      <CardContent\n        style={{\n          marginTop: '24px',\n          position: 'relative',\n          paddingTop: 0,\n          paddingBottom: '16px',\n        }}\n      >\n        {tables.map(t => (\n          <BalanceTable\n            key={t.title}\n            title={t.title}\n            description={t.description}\n            rows={t.rows}\n          />\n        ))}\n      </CardContent>\n    </Card>\n  );\n}\n\ntype BalanceTableProps = {\n  title: string;\n  description: string;\n  rows:\n    | null\n    | {\n        token: string;\n        balance: string;\n        stake: string;\n        pending: string;\n        spt: string;\n      }[];\n};\n\nfunction BalanceTable(props: BalanceTableProps) {\n  const { title, rows, description } = props;\n  return (\n    <div style={{ marginBottom: '16px' }}>\n      <Typography style={{ fontWeight: 'bold' }}>{title}</Typography>\n      <Typography color=\"textSecondary\" style={{ fontSize: '14px' }}>\n        {description}\n      </Typography>\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Token</TableCell>\n              <TableCell align=\"right\">Available</TableCell>\n              <TableCell align=\"right\">Pending</TableCell>\n              <TableCell align=\"right\">Staked</TableCell>\n              <TableCell align=\"right\">Pool</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows === null ? (\n              <CircularProgress />\n            ) : (\n              rows.map(row => (\n                <TableRow key={row.token}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.token}\n                  </TableCell>\n                  <TableCell align=\"right\">{row.balance}</TableCell>\n                  <TableCell align=\"right\">{row.pending}</TableCell>\n                  <TableCell align=\"right\">{row.stake}</TableCell>\n                  <TableCell align=\"right\">{row.spt}</TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n","import { PublicKey, SYSVAR_CLOCK_PUBKEY } from '@solana/web3.js';\nimport * as anchor from '@project-serum/anchor';\nimport { simulateTransaction } from '@project-serum/common';\n\nexport async function vestingSigner(\n  programId: PublicKey,\n  vesting: PublicKey,\n): Promise<{ publicKey: PublicKey; nonce: number }> {\n  const [publicKey, nonce] = await anchor.web3.PublicKey.findProgramAddress(\n    [vesting.toBuffer()],\n    programId,\n  );\n  return {\n    publicKey,\n    nonce,\n  };\n}\n\n// Simulates the `availableForWithdrawal` instruction to funnel out a the\n// emitted log data (as a hack to get a return value).\nexport async function availableForWithdrawal(\n  lockupClient: anchor.Program,\n  vesting: PublicKey,\n): Promise<anchor.BN> {\n  let tx = lockupClient.transaction.availableForWithdrawal({\n    accounts: {\n      vesting,\n      clock: SYSVAR_CLOCK_PUBKEY,\n    },\n  });\n  tx.setSigners(...[lockupClient.provider.wallet.publicKey]);\n  let resp = await simulateTransaction(\n    lockupClient.provider.connection,\n    tx,\n    'recent',\n  );\n  if (resp.value.err) {\n    throw new Error(`RPC error: ${resp.value.err.toString()}`);\n  }\n  let log = resp.value.logs![1].slice('Program log: '.length);\n  return new anchor.BN(JSON.parse(log).result);\n}\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport BN from 'bn.js';\nimport { useSnackbar } from 'notistack';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport Tabs from '@material-ui/core/Tabs';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport * as serumCmn from '@project-serum/common';\nimport { TokenInstructions } from '@project-serum/serum';\nimport {\n  Account,\n  PublicKey,\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n} from '@solana/web3.js';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport { State as StoreState } from '../../store/reducer';\nimport OwnedTokenAccountsSelect from '../common/OwnedTokenAccountsSelect';\nimport * as notification from '../common/Notification';\nimport { fromDisplay } from '../../utils/tokens';\nimport { Network } from '../../store/config';\nimport { activeRegistrar } from '../common/RegistrarSelect';\n\nexport default function DropRewardButton() {\n  const [showDialog, setShowDialog] = useState(false);\n  return (\n    <>\n      <div onClick={() => setShowDialog(true)}>\n        <Button variant=\"contained\" color=\"secondary\">\n          Drop Rewards\n        </Button>\n      </div>\n      <DropRewardDialog\n        open={showDialog}\n        onClose={() => setShowDialog(false)}\n      />\n    </>\n  );\n}\n\nenum RewardTypeViewModel {\n  Unlocked,\n  Locked,\n}\n\ntype DropRewardsDialogProps = {\n  open: boolean;\n  onClose: () => void;\n};\n\nfunction DropRewardDialog(props: DropRewardsDialogProps) {\n  const { open, onClose } = props;\n  const { selectedRegistrar } = useSelector((state: StoreState) => {\n    return {\n      selectedRegistrar: activeRegistrar(state),\n    };\n  });\n  const [rewardTypeTab, setRewardTypeTab] = useState(\n    RewardTypeViewModel.Unlocked,\n  );\n\n  return (\n    <Dialog open={open} onClose={onClose} fullWidth maxWidth=\"md\">\n      <DialogTitle>\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n          <Typography variant=\"h4\" component=\"h2\">\n            {`Drop Rewards on ${selectedRegistrar.label.toUpperCase()} Stakers`}\n          </Typography>\n        </div>\n      </DialogTitle>\n      <DialogContent>\n        <Tabs value={rewardTypeTab} onChange={(_e, t) => setRewardTypeTab(t)}>\n          <Tab value={RewardTypeViewModel.Unlocked} label=\"Unlocked\" />\n          <Tab value={RewardTypeViewModel.Locked} label=\"Locked\" />\n        </Tabs>\n        {rewardTypeTab === RewardTypeViewModel.Unlocked && (\n          <DropUnlockedForm onClose={onClose} />\n        )}\n        {rewardTypeTab === RewardTypeViewModel.Locked && (\n          <DropLockedForm onClose={onClose} />\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n\ntype DropUnlockedFormProps = {\n  onClose: () => void;\n};\n\nfunction DropUnlockedForm(props: DropUnlockedFormProps) {\n  const { onClose } = props;\n  const snack = useSnackbar();\n  const { registryClient } = useWallet();\n  const { network, registrar, accounts } = useSelector((state: StoreState) => {\n    return {\n      network: state.common.network,\n      registrar: {\n        publicKey: state.registry.registrar,\n        account: state.accounts[state.registry.registrar.toString()],\n      },\n      accounts: state.accounts,\n    };\n  });\n\n  const [rewardDisplayAmount, setRewardDisplayAmount] = useState<null | number>(\n    null,\n  );\n  const [expiryTs, setExpiryTs] = useState<null | number>(null);\n  const [depositor, setDepositor] = useState<null | PublicKey>(null);\n  const [mint, setMint] = useState<null | string>(null);\n\n  const isSendEnabled =\n    mint !== null &&\n    depositor !== null &&\n    rewardDisplayAmount !== null &&\n    rewardDisplayAmount >= 100 &&\n    expiryTs !== null;\n\n  const sendUnlockedReward = async () => {\n    await notification.withTx(\n      snack,\n      'Dropping unlocked reward...',\n      'Unlocked reward dropped',\n      async () => {\n        let mintAccount = accounts[network.mints[mint!].toString()];\n        if (!mintAccount) {\n          mintAccount = await serumCmn.getMintInfo(\n            registryClient.provider,\n            network.mints[mint!],\n          );\n        }\n\n        const lockedRewardAmount = fromDisplay(\n          rewardDisplayAmount!,\n          mintAccount.decimals,\n        );\n        const rewardKind = { unlocked: {} };\n        const vendor = new Account();\n        const vendorVault = new Account();\n        const [vendorSigner, nonce] = await PublicKey.findProgramAddress(\n          [registrar.publicKey.toBuffer(), vendor.publicKey.toBuffer()],\n          registryClient.programId,\n        );\n        return await registryClient.rpc.dropReward(\n          rewardKind,\n          lockedRewardAmount,\n          new BN(expiryTs!),\n          registryClient.provider.wallet.publicKey,\n          nonce,\n          {\n            accounts: {\n              registrar: registrar.publicKey,\n              rewardEventQ: registrar.account.rewardEventQ,\n              poolMint: registrar.account.poolMint,\n              vendor: vendor.publicKey,\n              vendorVault: vendorVault.publicKey,\n              depositor,\n              depositorAuthority: registryClient.provider.wallet.publicKey,\n              tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n              clock: SYSVAR_CLOCK_PUBKEY,\n              rent: SYSVAR_RENT_PUBKEY,\n            },\n            signers: [vendorVault, vendor],\n            instructions: [\n              ...(await serumCmn.createTokenAccountInstrs(\n                registryClient.provider,\n                vendorVault.publicKey,\n                network.mints[mint!],\n                vendorSigner,\n              )),\n              await registryClient.account.rewardVendor.createInstruction(\n                vendor,\n              ),\n            ],\n          },\n        );\n      },\n    );\n    onClose();\n  };\n  const onClick = () => {\n    sendUnlockedReward().catch(err => {\n      console.error(err);\n      snack.enqueueSnackbar(\n        `Error dropping unlocked reward: ${err.toString()}`,\n        {\n          variant: 'error',\n        },\n      );\n    });\n  };\n  return (\n    <DropVendorForm\n      network={network}\n      mint={mint}\n      setMint={setMint}\n      setDepositor={setDepositor}\n      setRewardDisplayAmount={setRewardDisplayAmount}\n      expiryTs={expiryTs}\n      setExpiryTs={setExpiryTs}\n      onCancel={onClose}\n      onClick={onClick}\n      isSendEnabled={isSendEnabled}\n    />\n  );\n}\n\ntype DropLockedFormProps = DropUnlockedFormProps;\n\nfunction DropLockedForm(props: DropLockedFormProps) {\n  const { onClose } = props;\n  const snack = useSnackbar();\n  const { registryClient } = useWallet();\n  const { network, registrar, accounts } = useSelector((state: StoreState) => {\n    return {\n      network: state.common.network,\n      registrar: {\n        publicKey: state.registry.registrar,\n        account: state.accounts[state.registry.registrar.toString()],\n      },\n      accounts: state.accounts,\n    };\n  });\n\n  const [rewardDisplayAmount, setRewardDisplayAmount] = useState<null | number>(\n    null,\n  );\n  const [startTs, setStartTs] = useState<null | number>(null);\n  const [endTs, setEndTs] = useState<null | number>(null);\n  const [expiryTs, setExpiryTs] = useState<null | number>(null);\n  const [depositor, setDepositor] = useState<null | PublicKey>(null);\n  const [mint, setMint] = useState<null | string>(null);\n  const [periodCount, setPeriodCount] = useState(7);\n\n  const isSendEnabled =\n    startTs !== null &&\n    endTs !== null &&\n    mint !== null &&\n    depositor !== null &&\n    rewardDisplayAmount !== null &&\n    rewardDisplayAmount >= 100 &&\n    expiryTs !== null;\n\n  const sendLockedRewards = async () => {\n    await notification.withTx(\n      snack,\n      'Dropping locked reward...',\n      'Locked reward dropped',\n      async () => {\n        const rewardKind = {\n          locked: {\n            startTs: new BN(startTs!),\n            endTs: new BN(endTs!),\n            periodCount: new BN(periodCount),\n          },\n        };\n        const vendor = new Account();\n        const vendorVault = new Account();\n        const [vendorSigner, nonce] = await PublicKey.findProgramAddress(\n          [registrar.publicKey.toBuffer(), vendor.publicKey.toBuffer()],\n          registryClient.programId,\n        );\n        let mintAccount = accounts[network.mints[mint!].toString()];\n        const rewardAmount = fromDisplay(\n          rewardDisplayAmount!,\n          mintAccount.decimals,\n        );\n        return await registryClient.rpc.dropReward(\n          rewardKind,\n          rewardAmount,\n          new BN(expiryTs!),\n          registryClient.provider.wallet.publicKey,\n          nonce,\n          {\n            accounts: {\n              registrar: registrar.publicKey,\n              rewardEventQ: registrar.account.rewardEventQ,\n              poolMint: registrar.account.poolMint,\n              vendor: vendor.publicKey,\n              vendorVault: vendorVault.publicKey,\n              depositor,\n              depositorAuthority: registryClient.provider.wallet.publicKey,\n              tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n              clock: SYSVAR_CLOCK_PUBKEY,\n              rent: SYSVAR_RENT_PUBKEY,\n            },\n            signers: [vendorVault, vendor],\n            instructions: [\n              ...(await serumCmn.createTokenAccountInstrs(\n                registryClient.provider,\n                vendorVault.publicKey,\n                network.mints[mint!],\n                vendorSigner,\n              )),\n              await registryClient.account.rewardVendor.createInstruction(\n                vendor,\n              ),\n            ],\n          },\n        );\n      },\n    );\n    onClose();\n  };\n\n  const onClick = () => {\n    sendLockedRewards().catch(err => {\n      snack.enqueueSnackbar(`Error dropping locked reward: ${err.toString()}`, {\n        variant: 'error',\n      });\n    });\n  };\n\n  return (\n    <DropVendorForm\n      network={network}\n      mint={mint}\n      setMint={setMint}\n      setDepositor={setDepositor}\n      setRewardDisplayAmount={setRewardDisplayAmount}\n      setStartTs={setStartTs}\n      setEndTs={setEndTs}\n      periodCount={periodCount}\n      setPeriodCount={setPeriodCount}\n      expiryTs={expiryTs}\n      setExpiryTs={setExpiryTs}\n      onCancel={onClose}\n      onClick={onClick}\n      isSendEnabled={isSendEnabled}\n    />\n  );\n}\n\ntype DropVendorFormProps = {\n  network: Network;\n  mint: string | null;\n  setMint: (mintLabel: string) => void;\n  setDepositor: (pk: PublicKey) => void;\n  setRewardDisplayAmount: (n: number) => void;\n  setStartTs?: (n: number) => void;\n  setEndTs?: (n: number) => void;\n  periodCount?: number;\n  setPeriodCount?: (p: number) => void;\n  expiryTs: number | null;\n  setExpiryTs: (ts: number) => void;\n  onCancel: () => void;\n  onClick: () => void;\n  isSendEnabled: boolean;\n};\n\nfunction DropVendorForm(props: DropVendorFormProps) {\n  const {\n    network,\n    mint,\n    setDepositor,\n    setMint,\n    setRewardDisplayAmount,\n    setStartTs,\n    setEndTs,\n    periodCount,\n    setPeriodCount,\n    expiryTs,\n    setExpiryTs,\n    onCancel,\n    onClick,\n    isSendEnabled,\n  } = props;\n  const mintOptions: { label: string; publicKey: PublicKey }[] = Object.keys(\n    network.mints,\n  ).map(label => {\n    return {\n      label,\n      publicKey: network.mints[label],\n    };\n  });\n\n  return (\n    <>\n      <div>\n        <div style={{ display: 'flex', marginTop: '10px' }}>\n          <div style={{ flex: 1 }}>\n            <OwnedTokenAccountsSelect\n              style={{ height: '100%' }}\n              mint={mint === null ? undefined : network.mints[mint]}\n              onChange={(f: PublicKey) => setDepositor(f)}\n            />\n            <FormHelperText>Account to send from</FormHelperText>\n          </div>\n          <div>\n            <FormControl\n              variant=\"outlined\"\n              style={{ width: '200px', marginLeft: '10px', marginTop: '10px' }}\n            >\n              <InputLabel>Mint</InputLabel>\n              <Select\n                value={mint}\n                onChange={e => setMint(e.target.value as string)}\n                label=\"Mint\"\n              >\n                {mintOptions.map(m => (\n                  <MenuItem value={m.label}>{m.label.toUpperCase()}</MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </div>\n          <div>\n            <TextField\n              style={{ marginLeft: '10px', marginTop: '10px' }}\n              id=\"outlined-number\"\n              label=\"Amount\"\n              type=\"number\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n              variant=\"outlined\"\n              onChange={e =>\n                setRewardDisplayAmount(parseFloat(e.target.value) as number)\n              }\n              InputProps={{ inputProps: { min: 0 } }}\n            />\n          </div>\n        </div>\n        {setEndTs !== undefined && setStartTs !== undefined && (\n          <>\n            <div style={{ display: 'flex', marginTop: '37px' }}>\n              <div style={{ flex: 1 }}>\n                <TextField\n                  fullWidth\n                  label=\"Start date\"\n                  type=\"datetime-local\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  onChange={e => {\n                    const d = new Date(e.target.value);\n                    setStartTs(d.getTime() / 1000);\n                  }}\n                />\n                <FormHelperText>Date vesting begins</FormHelperText>\n              </div>\n            </div>\n            <div style={{ flex: 1, marginTop: '20px' }}>\n              <TextField\n                fullWidth\n                label=\"End date\"\n                type=\"datetime-local\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                onChange={e => {\n                  const d = new Date(e.target.value);\n                  setEndTs(d.getTime() / 1000);\n                }}\n              />\n              <FormHelperText>\n                Date the vesting account is fully vested\n              </FormHelperText>\n            </div>\n            <div>\n              <FormControl fullWidth>\n                <TextField\n                  style={{ marginTop: '37px' }}\n                  id=\"outlined-number\"\n                  label=\"Period Count\"\n                  type=\"number\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  variant=\"outlined\"\n                  value={periodCount}\n                  onChange={e =>\n                    setPeriodCount!(parseInt(e.target.value) as number)\n                  }\n                  InputProps={{ inputProps: { min: 1 } }}\n                />\n              </FormControl>\n            </div>\n          </>\n        )}\n        <div style={{ marginTop: '37px', display: 'flex' }}>\n          <div\n            style={{\n              flex: 1,\n              height: '100%',\n              marginRight: '10px',\n            }}\n          >\n            <TextField\n              fullWidth\n              label=\"Expiry date\"\n              type=\"datetime-local\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n              onChange={e => {\n                const d = new Date(e.target.value);\n                setExpiryTs(d.getTime() / 1000);\n              }}\n            />\n            <FormHelperText>\n              Date after which the account owner dropping rewards can withdraw\n              all unclaimed rewards.\n            </FormHelperText>\n          </div>\n          <div style={{ marginTop: '26px' }}>\n            <TextField\n              style={{ height: '100%' }}\n              disabled\n              placeholder=\"Expiry Unix timestamp\"\n              fullWidth\n              value={expiryTs}\n            />\n          </div>\n        </div>\n      </div>\n      <DialogActions>\n        <Button onClick={onCancel}>Cancel</Button>\n        <Button\n          onClick={onClick}\n          type=\"submit\"\n          color=\"primary\"\n          disabled={!isSendEnabled}\n        >\n          Send\n        </Button>\n      </DialogActions>\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport BN from 'bn.js';\nimport styled from 'styled-components';\nimport LockIcon from '@material-ui/icons/Lock';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { TransitionProps } from '@material-ui/core/transitions';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport Slide from '@material-ui/core/Slide';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport { SYSVAR_RENT_PUBKEY, PublicKey, SystemProgram } from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { getTokenAccount } from '@project-serum/common';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport OwnedTokenAccountsSelect from '../../components/common/OwnedTokenAccountsSelect';\nimport { ViewTransactionOnExplorerButton } from '../../components/common/Notification';\nimport RegistrarSelect from './RegistrarSelect';\nimport { State as StoreState, ProgramAccount } from '../../store/reducer';\nimport { ActionType } from '../../store/actions';\nimport * as bootstrap from './BootstrapProvider';\nimport Me from '../Me';\nimport {\n  memberSigner,\n  memberSeed,\n  createBalanceSandbox,\n} from '../../utils/registry';\nimport { vestingSigner } from '../../utils/lockup';\nimport Stake from '../Stake';\nimport Rewards from '../rewards/Rewards';\nimport VestingAccountsSelect from './VestingAccountsSelect';\nimport { toDisplayLabel, fromDisplay } from '../../utils/tokens';\n\nenum TabModel {\n  Me,\n  Stake,\n  Rewards,\n  Lockup,\n}\n\nexport default function MyNode() {\n  const [tab, setTab] = useState(TabModel.Me);\n  return (\n    <div>\n      <MyNodeBanner setTab={setTab} />\n      <Container fixed maxWidth=\"md\" style={{ flex: 1, display: 'flex' }}>\n        {tab === TabModel.Me && <Me />}\n        {tab === TabModel.Stake && <Stake />}\n        {tab === TabModel.Rewards && <Rewards />}\n      </Container>\n    </div>\n  );\n}\n\ntype MyNodeBannerProps = {\n  setTab: (t: TabModel) => void;\n};\n\nfunction MyNodeBanner(props: MyNodeBannerProps) {\n  const [tab, setTab] = useState(TabModel.Me);\n  const { member, registrar, registrarAccount } = useSelector(\n    (state: StoreState) => {\n      return {\n        member: state.registry.member,\n        registrar: state.registry.registrar,\n        registrarAccount: state.accounts[state.registry.registrar.toString()],\n      };\n    },\n  );\n  const [showDepositDialog, setShowDepositDialog] = useState(false);\n  const [showWithdrawDialog, setShowWithdrawDialog] = useState(false);\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const { wallet, registryClient } = useWallet();\n  const dispatch = useDispatch();\n\n  const createStakeAccount = async () => {\n    enqueueSnackbar('Creating stake account', {\n      variant: 'info',\n    });\n    const seed = await memberSeed(registrar);\n    const member = await PublicKey.createWithSeed(\n      wallet.publicKey,\n      seed,\n      registryClient.programId,\n    );\n    const { publicKey, nonce } = await memberSigner(\n      registryClient.programId,\n      registrar,\n      member,\n    );\n    const memberSignerPublicKey = publicKey;\n\n    const [mainTx, balances] = await createBalanceSandbox(\n      registryClient.provider,\n      registrarAccount,\n      memberSignerPublicKey,\n    );\n    const [lockedTx, balancesLocked] = await createBalanceSandbox(\n      registryClient.provider,\n      registrarAccount,\n      memberSignerPublicKey,\n    );\n    const tx = registryClient.transaction.createMember(nonce, {\n      accounts: {\n        registrar: registrar,\n        member: member,\n        beneficiary: wallet.publicKey,\n        memberSigner: memberSignerPublicKey,\n        balances,\n        balancesLocked,\n        tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n        rent: SYSVAR_RENT_PUBKEY,\n      },\n      instructions: [\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: wallet.publicKey,\n          newAccountPubkey: member,\n          basePubkey: wallet.publicKey,\n          seed,\n          lamports: await registryClient.provider.connection.getMinimumBalanceForRentExemption(\n            registryClient.account.member.size,\n          ),\n          space: registryClient.account.member.size,\n          programId: registryClient.programId,\n        }),\n      ],\n    });\n    const signers: Account[] = [];\n    const allTxs = [mainTx, lockedTx, { tx, signers }];\n    // @ts-ignore\n    let txSigs = await registryClient.provider.sendAll(allTxs, {\n      commitment: 'recent',\n      preflightCommitment: 'recent',\n      skipPreflight: true,\n    });\n    console.log('Accounts created with transactions:', txSigs);\n\n    const memberAccount = await registryClient.account.member(member);\n    const memberProgramAccount = {\n      publicKey: member,\n      account: memberAccount,\n    };\n    // Add the new member to the store.\n    dispatch({\n      type: ActionType.AccountAdd,\n      item: {\n        account: memberProgramAccount,\n      },\n    });\n\n    // Populate the store with all of the member's accounts.\n    await bootstrap.fetchAndDispatchMemberAccounts(\n      memberProgramAccount,\n      dispatch,\n      registryClient.provider.connection,\n    );\n\n    // Subscribe to any updates to the member.\n    bootstrap.subscribeMember(memberProgramAccount, registryClient, dispatch);\n\n    // Tell the UI that our member is ready.\n    dispatch({\n      type: ActionType.RegistrySetMember,\n      item: {\n        member,\n      },\n    });\n\n    closeSnackbar();\n    enqueueSnackbar(`Stake account created ${member.toString()}`, {\n      variant: 'success',\n    });\n  };\n\n  const HoverSpan = styled.span`\n    :hover {\n      cursor: pointer;\n    }\n  `;\n\n  return (\n    <>\n      <div\n        style={{\n          backgroundColor: '#fff',\n          paddingTop: '24px',\n          borderBottom: 'solid 1pt #ccc',\n        }}\n      >\n        <Container\n          fixed\n          maxWidth=\"md\"\n          style={{\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'space-between',\n          }}\n        >\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <div>\n              <Typography variant=\"h4\" style={{ marginBottom: '10px' }}>\n                My Stake\n              </Typography>\n            </div>\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'center',\n                flexDirection: 'column',\n              }}\n            >\n              <RegistrarSelect />\n            </div>\n          </div>\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n            }}\n          >\n            <div>\n              <Typography>\n                {member !== undefined ? (\n                  member.toString()\n                ) : (\n                  <>\n                    Account not found. Please{' '}\n                    <HoverSpan\n                      onClick={() => {\n                        createStakeAccount().catch(err => {\n                          console.error(err);\n                          enqueueSnackbar(\n                            `Error creating stake account: ${err.toString()}`,\n                            {\n                              variant: 'error',\n                            },\n                          );\n                        });\n                      }}\n                      style={{\n                        color: 'black',\n                        fontWeight: 'bold',\n                        textDecoration: 'underline',\n                      }}\n                    >\n                      create\n                    </HoverSpan>{' '}\n                    a stake account.\n                  </>\n                )}\n              </Typography>\n            </div>\n            <div>\n              <div>\n                <Button\n                  disabled={member === undefined}\n                  onClick={() => setShowDepositDialog(true)}\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  style={{ marginRight: '10px' }}\n                >\n                  <ArrowDownwardIcon style={{ fontSize: '20px' }} />\n                  <Typography style={{ marginLeft: '5px', marginRight: '5px' }}>\n                    Deposit\n                  </Typography>\n                </Button>\n                <Button\n                  disabled={member === undefined}\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  onClick={() => setShowWithdrawDialog(true)}\n                >\n                  <ArrowUpwardIcon style={{ fontSize: '20px' }} />\n                  <Typography style={{ marginLeft: '5px', marginRight: '5px' }}>\n                    Withdraw\n                  </Typography>\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Container>\n        <div\n          style={{\n            maxWidth: '960px',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            paddingLeft: '24px',\n            paddingRight: '24px',\n            marginTop: '10px',\n          }}\n        >\n          <Tabs\n            value={tab}\n            onChange={(_e, t) => {\n              setTab(t);\n              props.setTab(t);\n            }}\n          >\n            <Tab value={TabModel.Me} label=\"Me\" />\n            <Tab value={TabModel.Stake} label=\"Stake\" />\n            <Tab value={TabModel.Rewards} label=\"Rewards\" />\n          </Tabs>\n        </div>\n      </div>\n      {member !== undefined && (\n        <>\n          <DepositDialog\n            open={showDepositDialog}\n            onClose={() => setShowDepositDialog(false)}\n          />\n          <WithdrawDialog\n            open={showWithdrawDialog}\n            onClose={() => setShowWithdrawDialog(false)}\n          />\n        </>\n      )}\n    </>\n  );\n}\n\ntype DepositDialogProps = {\n  open: boolean;\n  onClose: () => void;\n};\n\nfunction DepositDialog(props: DepositDialogProps) {\n  const { open, onClose } = props;\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const { registryClient, lockupClient } = useWallet();\n  const dispatch = useDispatch();\n  const {\n    registrar,\n    member,\n    memberAccount,\n    mintAccount,\n    accounts,\n  } = useSelector((state: StoreState) => {\n    let memberAccount = undefined;\n    if (state.registry.member) {\n      memberAccount = state.accounts[state.registry.member.toString()];\n    }\n    const registrarAccount =\n      state.accounts[state.registry.registrar.toString()];\n    const registrar: ProgramAccount = {\n      publicKey: state.registry.registrar,\n      account: registrarAccount,\n    };\n    return {\n      registrar,\n      memberAccount,\n      member: state.registry.member,\n      mintAccount: state.accounts[registrar.account.mint.toString()],\n      accounts: state.accounts,\n    };\n  });\n  return (\n    <TransferDialog\n      deposit={true}\n      title={'Deposit'}\n      contextText={'Select the amount to deposit'}\n      open={open}\n      onClose={onClose}\n      onTransfer={async (\n        from: PublicKey,\n        displayAmount: number,\n        isLocked: boolean,\n      ) => {\n        const amount = fromDisplay(displayAmount, mintAccount.decimals);\n        enqueueSnackbar(\n          `Depositing ${displayAmount} ${toDisplayLabel(\n            registrar.account.mint,\n          )} from ${from.toString()}`,\n          {\n            variant: 'info',\n          },\n        );\n        const tx = await (async () => {\n          if (isLocked) {\n            const relayData = registryClient.coder.instruction.encode(\n              'deposit_locked',\n              {\n                amount,\n              },\n            );\n            const vesting = accounts[from.toString()];\n            const _memberSigner = (\n              await memberSigner(\n                registryClient.programId,\n                registrar.publicKey,\n                member!,\n              )\n            ).publicKey;\n            const _vestingSigner = (\n              await vestingSigner(lockupClient.programId, from)\n            ).publicKey;\n            const relayAccounts = [\n              {\n                // @ts-ignore\n                pubkey: await registryClient.state.address(),\n                isWritable: false,\n                isSigner: false,\n              },\n              {\n                pubkey: registrar.publicKey,\n                isWritable: false,\n                isSigner: false,\n              },\n              { pubkey: member!, isWritable: false, isSigner: false },\n              {\n                pubkey: registryClient.provider.wallet.publicKey,\n                isWritable: false,\n                isSigner: true,\n              },\n            ];\n            const tx = await lockupClient.rpc.whitelistWithdraw(\n              relayData,\n              amount,\n              {\n                accounts: {\n                  transfer: {\n                    // @ts-ignore\n                    lockup: await lockupClient.state.address(),\n                    beneficiary: registryClient.provider.wallet.publicKey,\n                    whitelistedProgram: registryClient.programId,\n                    vesting: from,\n                    vault: vesting.vault,\n                    vestingSigner: _vestingSigner,\n                    tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n                    whitelistedProgramVault: memberAccount.balancesLocked.vault,\n                    whitelistedProgramVaultAuthority: _memberSigner,\n                  },\n                },\n                remainingAccounts: relayAccounts,\n              },\n            );\n\n            // Update the store with the updated account.\n            const updatedVestingAccount = await lockupClient.account.vesting(\n              from,\n            );\n            dispatch({\n              type: ActionType.LockupUpdateVesting,\n              item: {\n                vesting: {\n                  publicKey: from,\n                  account: updatedVestingAccount,\n                },\n              },\n            });\n\n            return tx;\n          } else {\n            const tx = await registryClient.rpc.deposit(amount, {\n              accounts: {\n                depositor: from,\n                depositorAuthority: registryClient.provider.wallet.publicKey,\n                tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n                vault: memberAccount.balances.vault,\n                beneficiary: registryClient.provider.wallet.publicKey,\n                member: member,\n              },\n            });\n\n            const tokenAccount = await getTokenAccount(\n              registryClient.provider,\n              from,\n            );\n            dispatch({\n              type: ActionType.CommonOwnedTokenAccountsUpdate,\n              item: {\n                account: {\n                  publicKey: from,\n                  account: tokenAccount,\n                },\n              },\n            });\n\n            return tx;\n          }\n        })();\n        closeSnackbar();\n        enqueueSnackbar(`Deposit complete`, {\n          variant: 'success',\n          action: <ViewTransactionOnExplorerButton signature={tx as string} />,\n        });\n        onClose();\n      }}\n    />\n  );\n}\n\ntype WithdrawDialogProps = DepositDialogProps;\n\nfunction WithdrawDialog(props: WithdrawDialogProps) {\n  const { open, onClose } = props;\n  const { registryClient, lockupClient } = useWallet();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const dispatch = useDispatch();\n  const {\n    registrar,\n    registrarAccount,\n    member,\n    memberAccount,\n    mintAccount,\n    accounts,\n  } = useSelector((state: StoreState) => {\n    let memberAccount = undefined;\n    if (state.registry.member) {\n      memberAccount = state.accounts[state.registry.member.toString()];\n    }\n    const registrarAccount =\n      state.accounts[state.registry.registrar.toString()];\n    return {\n      registrar: state.registry.registrar,\n      registrarAccount,\n      member: state.registry.member,\n      memberAccount,\n      mintAccount: state.accounts[registrarAccount.mint.toString()],\n      accounts: state.accounts,\n    };\n  });\n  return (\n    <TransferDialog\n      title={'Withdraw'}\n      contextText={'Select the amount to withdraw'}\n      open={open}\n      onClose={onClose}\n      onTransfer={async (\n        from: PublicKey,\n        displayAmount: number,\n        isLocked: boolean,\n      ) => {\n        const amount = fromDisplay(displayAmount, mintAccount.decimals);\n        enqueueSnackbar(\n          `Withdrawing ${displayAmount} ${toDisplayLabel(\n            registrarAccount.mint,\n          )} to ${from.toString()}`,\n          {\n            variant: 'info',\n          },\n        );\n        const tx = await (async () => {\n          const _memberSigner = await memberSigner(\n            registryClient.programId,\n            registrar,\n            member!,\n          );\n          if (isLocked) {\n            const relayData = registryClient.coder.instruction.encode(\n              'withdraw_locked',\n              {\n                amount,\n              },\n            );\n            const vesting = accounts[from.toString()];\n            const _memberSigner = (\n              await memberSigner(registryClient.programId, registrar, member!)\n            ).publicKey;\n            const _vestingSigner = (\n              await vestingSigner(lockupClient.programId, from)\n            ).publicKey;\n            const relayAccounts = [\n              {\n                // @ts-ignore\n                pubkey: await registryClient.state.address(),\n                isWritable: false,\n                isSigner: false,\n              },\n              { pubkey: registrar, isWritable: false, isSigner: false },\n              { pubkey: member!, isWritable: false, isSigner: false },\n              {\n                pubkey: registryClient.provider.wallet.publicKey,\n                isWritable: false,\n                isSigner: true,\n              },\n            ];\n            const tx = await lockupClient.rpc.whitelistDeposit(relayData, {\n              accounts: {\n                transfer: {\n                  // @ts-ignore\n                  lockup: await lockupClient.state.address(),\n                  beneficiary: registryClient.provider.wallet.publicKey,\n                  whitelistedProgram: registryClient.programId,\n                  vesting: from,\n                  vault: vesting.vault,\n                  vestingSigner: _vestingSigner,\n                  tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n                  whitelistedProgramVault: memberAccount.balancesLocked.vault,\n                  whitelistedProgramVaultAuthority: _memberSigner,\n                },\n              },\n              remainingAccounts: relayAccounts,\n            });\n\n            // Update the store with the updated account.\n            const updatedVestingAccount = await lockupClient.account.vesting(\n              from,\n            );\n            dispatch({\n              type: ActionType.LockupUpdateVesting,\n              item: {\n                vesting: {\n                  publicKey: from,\n                  account: updatedVestingAccount,\n                },\n              },\n            });\n\n            return tx;\n          } else {\n            const tx = await registryClient.rpc.withdraw(amount, {\n              accounts: {\n                registrar,\n                member,\n                beneficiary: registryClient.provider.wallet.publicKey,\n                vault: memberAccount.balances.vault,\n                memberSigner: _memberSigner.publicKey,\n                depositor: from,\n                tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n              },\n            });\n\n            const tokenAccount = await getTokenAccount(\n              registryClient.provider,\n              from,\n            );\n            dispatch({\n              type: ActionType.CommonOwnedTokenAccountsUpdate,\n              item: {\n                account: {\n                  publicKey: from,\n                  account: tokenAccount,\n                },\n              },\n            });\n\n            return tx;\n          }\n        })();\n\n        closeSnackbar();\n        enqueueSnackbar(`Withdraw complete`, {\n          variant: 'success',\n          action: <ViewTransactionOnExplorerButton signature={tx as string} />,\n        });\n        onClose();\n      }}\n    />\n  );\n}\n\ntype TransferDialogProps = {\n  title: string;\n  contextText: string;\n  open: boolean;\n  deposit?: boolean;\n  onClose: () => void;\n  onTransfer: (\n    from: PublicKey,\n    amount: number,\n    isLocked: boolean,\n  ) => Promise<void>;\n};\n\nfunction TransferDialog(props: TransferDialogProps) {\n  const { mint, mintAccount } = useSelector((state: StoreState) => {\n    const registrar = state.accounts[state.registry.registrar.toString()];\n    const mint = registrar ? registrar.mint : undefined;\n    return {\n      mint,\n      mintAccount: state.accounts[registrar.mint.toString()],\n    };\n  });\n  const { enqueueSnackbar } = useSnackbar();\n  const { open, onClose, onTransfer, title, contextText, deposit } = props;\n  const [displayAmount, setDisplayAmount] = useState<null | number>(null);\n  const [from, setFrom] = useState<null | PublicKey>(null);\n  const [vesting, setVesting] = useState<null | PublicKey>(null);\n  const [maxDisplayAmount, setMaxDisplayAmount] = useState<null | number>(null);\n  const [isLocked, setIsLocked] = useState(false);\n  const submitBtnDisabled =\n    (isLocked ? !vesting : !from) ||\n    !displayAmount ||\n    !maxDisplayAmount ||\n    displayAmount > maxDisplayAmount;\n\n  return (\n    <div>\n      <Dialog\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={onClose}\n        fullWidth\n      >\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n          <DialogTitle>{title}</DialogTitle>\n          <div style={{ display: 'flex', paddingRight: '24px' }}>\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'center',\n                flexDirection: 'column',\n              }}\n            >\n              <LockIcon />\n            </div>\n            <FormControlLabel\n              style={{ marginLeft: '0px', marginRight: '0px' }}\n              control={\n                <Switch\n                  checked={isLocked}\n                  onChange={() => setIsLocked(!isLocked)}\n                />\n              }\n              label=\"\"\n            />\n          </div>\n        </div>\n        <DialogContent>\n          <div style={{ display: 'flex' }}>\n            <div style={{ flex: 1 }}>\n              <TextField\n                style={{ width: '100%' }}\n                id=\"outlined-number\"\n                label=\"Amount\"\n                type=\"number\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant=\"outlined\"\n                onChange={e =>\n                  setDisplayAmount(parseFloat(e.target.value) as number)\n                }\n                InputProps={{\n                  inputProps: { min: 0, max: maxDisplayAmount ?? 0 },\n                }}\n              />\n              <FormHelperText>{contextText}</FormHelperText>\n            </div>\n          </div>\n          <FormControl fullWidth>\n            {!isLocked ? (\n              <>\n                <OwnedTokenAccountsSelect\n                  variant=\"outlined\"\n                  decimals={mintAccount.decimals}\n                  mint={mint}\n                  onChange={(f: PublicKey, _maxDisplayAmount: BN) => {\n                    setFrom(f);\n                    // TODO: set an actual limit for the withdrawal UI (i.e.\n                    //       what's currently in the vault). Currently not\n                    //       done since we dont' have websocket connections\n                    //       for each of the users accounts. However we\n                    //       still use the \"max\" amount for display vesting\n                    //       accounts.\n                    setMaxDisplayAmount(2 ** 53);\n                  }}\n                />\n                <FormHelperText>\n                  Token account to transfer to/from\n                </FormHelperText>\n              </>\n            ) : (\n              <>\n                <VestingAccountsSelect\n                  variant=\"outlined\"\n                  mint={mint}\n                  decimals={mintAccount.decimals}\n                  deposit={deposit}\n                  onChange={(v: PublicKey, maxDisplayAmount: BN) => {\n                    setVesting(v);\n                    setMaxDisplayAmount(maxDisplayAmount.toNumber());\n                  }}\n                />\n                <FormHelperText>\n                  Vesting account to transfer to/from your <b>locked</b>{' '}\n                  balances\n                </FormHelperText>\n              </>\n            )}\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            //@ts-ignore\n            onClick={() => {\n              onTransfer(\n                isLocked ? vesting! : from!,\n                displayAmount!,\n                isLocked,\n              ).catch(err => {\n                console.error(err);\n                enqueueSnackbar(`Error transferring funds: ${err.toString()}`, {\n                  variant: 'error',\n                });\n              });\n            }}\n            color=\"primary\"\n            disabled={submitBtnDisabled}\n          >\n            {title}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nconst Transition = React.forwardRef(function Transition(\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\n  ref: React.Ref<unknown>,\n) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport Button from '@material-ui/core/Button';\nimport {\n  Account,\n  PublicKey,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n} from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { createTokenAccountInstrs } from '@project-serum/common';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport * as notification from '../common/Notification';\nimport OwnedTokenAccountsSelect from '../common/OwnedTokenAccountsSelect';\nimport { RewardListItemViewModel } from './RewardsList';\nimport { ActionType } from '../../store/actions';\nimport { State as StoreState } from '../../store/reducer';\nimport { vendorSigner } from '../../utils/registry';\nimport { vestingSigner } from '../../utils/lockup';\n\ntype ClaimRewardButtonProps = {\n  rli: RewardListItemViewModel;\n};\n\nexport default function ClaimRewardButton(props: ClaimRewardButtonProps) {\n  const { registryClient, lockupClient } = useWallet();\n  const { member, registrar } = useSelector((state: StoreState) => {\n    const registrar = {\n      publicKey: state.registry.registrar,\n      account: state.accounts[state.registry.registrar.toString()],\n    };\n    const member = state.registry.member\n      ? {\n          publicKey: state.registry.member,\n          account: state.accounts[state.registry.member.toString()],\n        }\n      : undefined;\n    return {\n      registrar,\n      member,\n    };\n  });\n  const { rli } = props;\n  const dispatch = useDispatch();\n  const snack = useSnackbar();\n  const [token, setToken] = useState<null | PublicKey>(null);\n\n  // On click.\n  const clickHandler = async (): Promise<void> => {\n    notification.withTx(\n      snack,\n      `Processing vendor reward ${rli!.vendor!.publicKey.toString()}`,\n      'Reward processed',\n      async () => {\n        const vendor = await registryClient.account.rewardVendor(\n          rli.vendor!.publicKey,\n        );\n        const _vendorSigner = await vendorSigner(\n          registryClient.programId,\n          registrar.publicKey,\n          rli.vendor!.publicKey,\n        );\n        if (rli!.reward.locked) {\n          const vendoredVesting = new Account();\n          const vendoredVestingVault = new Account();\n          const vendoredVestingSigner = await vestingSigner(\n            lockupClient.programId,\n            vendoredVesting.publicKey,\n          );\n          const remainingAccounts = lockupClient.instruction.createVesting\n            .accounts({\n              vesting: vendoredVesting.publicKey,\n              vault: vendoredVestingVault.publicKey,\n              depositor: vendor.vault,\n              depositorAuthority: _vendorSigner.publicKey,\n              tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n              rent: SYSVAR_RENT_PUBKEY,\n              clock: SYSVAR_CLOCK_PUBKEY,\n            })\n            // Change the signer status on the vendor signer since it's signed by the program, not the\n            // client.\n            .map((meta: any) =>\n              meta.pubkey.equals(_vendorSigner.publicKey)\n                ? { ...meta, isSigner: false }\n                : meta,\n            );\n          const tx = await registryClient.rpc.claimRewardLocked(\n            vendoredVestingSigner.nonce,\n            {\n              accounts: {\n                // @ts-ignore\n                registry: await registryClient.state.address(),\n                lockupProgram: lockupClient.programId,\n                cmn: {\n                  registrar: registrar.publicKey,\n                  member: member!.publicKey,\n                  beneficiary: registryClient.provider.wallet.publicKey,\n                  balances: member!.account.balances,\n                  balancesLocked: member!.account.balancesLocked,\n                  vendor: rli.vendor!.publicKey,\n                  vault: rli.vendor!.account.vault,\n                  vendorSigner: _vendorSigner.publicKey,\n                  tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n                  clock: SYSVAR_CLOCK_PUBKEY,\n                },\n              },\n              remainingAccounts,\n              signers: [vendoredVesting, vendoredVestingVault],\n              instructions: [\n                await lockupClient.account.vesting.createInstruction(\n                  vendoredVesting,\n                ),\n                ...(await createTokenAccountInstrs(\n                  registryClient.provider,\n                  vendoredVestingVault.publicKey,\n                  rli.vendor!.account.mint,\n                  vendoredVestingSigner.publicKey,\n                )),\n              ],\n            },\n          );\n          // Refetch the vesting accounts to update the UI with the new reward.\n          const vestingAccounts = await lockupClient.account.vesting.all(\n            registryClient.provider.wallet.publicKey.toBuffer(),\n          );\n          vestingAccounts.forEach(account => {\n            dispatch({\n              type: ActionType.AccountAdd,\n              item: {\n                account,\n              },\n            });\n          });\n          dispatch({\n            type: ActionType.LockupSetVestings,\n            item: {\n              vestingAccounts: vestingAccounts.map(v => v.publicKey),\n            },\n          });\n          return tx;\n        } else {\n          return await registryClient.rpc.claimReward({\n            accounts: {\n              to: token,\n              cmn: {\n                registrar: registrar.publicKey,\n                member: member!.publicKey,\n                beneficiary: registryClient.provider.wallet.publicKey,\n                balances: member!.account.balances,\n                balancesLocked: member!.account.balancesLocked,\n\n                vendor: rli.vendor!.publicKey,\n                vault: vendor.vault,\n                vendorSigner: _vendorSigner.publicKey,\n\n                tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n                clock: SYSVAR_CLOCK_PUBKEY,\n              },\n            },\n          });\n        }\n      },\n    );\n  };\n\n  return (\n    <>\n      {!rli.reward.locked && (\n        <div>\n          <OwnedTokenAccountsSelect\n            style={{ width: '400px', height: '100%' }}\n            mint={rli.vendor.account.mint}\n            onChange={(f: PublicKey) => setToken(f)}\n          />\n        </div>\n      )}\n      <div style={{ marginLeft: '10px', marginRight: '10px' }}>\n        <Button\n          disabled={rli.reward.unlockedAlloc && token === null}\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() =>\n            clickHandler().catch(err => {\n              console.error(err);\n              snack.enqueueSnackbar(\n                `Error ending pending redemption: ${err.toString()}`,\n                {\n                  variant: 'error',\n                },\n              );\n            })\n          }\n        >\n          Process Reward\n        </Button>\n      </div>\n    </>\n  );\n}\n","import React, { useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport * as anchor from '@project-serum/anchor';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport { State as StoreState } from '../../store/reducer';\nimport { ActionType } from '../../store/actions';\nimport RewardsList, { RewardListItemViewModel } from './RewardsList';\nimport DropRewardButton from './DropRewardButton';\nimport ClaimRewardButton from './ClaimRewardButton';\nimport { rewardEvents } from '../../utils/registry';\n\nexport default function Rewards() {\n  const { registryClient } = useWallet();\n  const dispatch = useDispatch();\n  const snack = useSnackbar();\n  const ctx = useSelector((state: StoreState) => {\n    const registrar = state.accounts[state.registry.registrar.toString()];\n    const rewardEventQueue = {\n      publicKey: registrar.rewardEventQ,\n      account: state.accounts[registrar.rewardEventQ.toString()],\n    };\n    return {\n      accounts: state.accounts,\n      rewardEventQueue,\n      member: state.registry.member\n        ? {\n            publicKey: state.registry.member,\n            account: state.accounts[state.registry.member.toString()],\n          }\n        : undefined,\n      network: state.common.network,\n    };\n  });\n  const { rewardEventQueue } = ctx;\n\n  const events = useMemo(() => rewardEvents(rewardEventQueue.account), [\n    rewardEventQueue.account,\n  ]);\n\n  useEffect(() => {\n    (async () => {\n      // TODO: need to chop up the calls here, for reward vendors > 100 entires.\n      const accounts = await anchor.utils.getMultipleAccounts(\n        registryClient.provider.connection,\n        events.map(m => m.vendor),\n      );\n      accounts.forEach(a => {\n        if (a === null) {\n          snack.enqueueSnackbar(`RPC node returned invalid vendor account`, {\n            variant: 'error',\n          });\n          return;\n        }\n        const account = registryClient.coder.accounts.decode(\n          'RewardVendor',\n          a.account.data,\n        );\n        dispatch({\n          type: ActionType.AccountAdd,\n          item: {\n            account: { publicKey: a.publicKey, account },\n          },\n        });\n      });\n    })();\n  }, [\n    events,\n    dispatch,\n    snack,\n    registryClient.coder.accounts,\n    registryClient.provider.connection,\n  ]);\n\n  // All rewards to display.\n  const rewards = events\n    .map((m: any) => RewardListItemViewModel.fromMessage(ctx, m))\n    .reverse();\n\n  // Next reward to claim.\n  let nextReward = null;\n  if (rewards.filter(r => r === null).length === 0) {\n    nextReward = rewards\n      .filter(r => r!.needsClaim)\n      .sort((a, b) =>\n        a!.cursor < b!.cursor ? -1 : a!.cursor > b!.cursor ? 1 : 0,\n      )\n      .shift();\n  }\n\n  return (\n    <div style={{ width: '100%', marginTop: '24px' }}>\n      {nextReward && (\n        <Card style={{ marginBottom: '24px' }}>\n          <CardContent>\n            <Typography variant=\"h6\">\n              You were staked during a previous reward. To prove eligibility,\n              click the \"Process\" button until you've processed <b>all</b>{' '}\n              eligible rewards. For unlocked rewards, don't forget to select the\n              address you wish to send your stake reward to.\n            </Typography>\n          </CardContent>\n        </Card>\n      )}\n      <div\n        style={{\n          marginBottom: '10px',\n          display: 'flex',\n          justifyContent: 'space-between',\n        }}\n      >\n        <Typography style={{ fontWeight: 'bold', fontSize: '20px' }}>\n          Reward History\n        </Typography>\n        <div style={{ display: 'flex' }}>\n          {nextReward && <ClaimRewardButton rli={nextReward} />}\n          {localStorage.getItem('private') && <DropRewardButton />}\n        </div>\n      </div>\n      <div style={{ marginBottom: '16px' }}>\n        <Typography>\n          When rewards are dropped, one must prove one was staked during the\n          time of drop. This means sending a transaction to the staking program\n          to <b>process</b> the reward. For <b>unlocked</b> rewards, select the\n          token address to transfer the reward to. For <b>locked</b> rewards, a\n          locked vesting account will be created and realized to the staker upon\n          unstaking. See the Lockup tab.\n        </Typography>\n      </div>\n      <Paper>\n        <RewardsList rewards={rewards} />\n      </Paper>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport BN from 'bn.js';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { PublicKey } from '@solana/web3.js';\nimport { State as StoreState, ProgramAccount } from '../../store/reducer';\nimport { toDisplay } from '../../utils/tokens';\n\ntype Props = {\n  style?: any;\n  mint?: PublicKey | null;\n  decimals: number;\n  variant?: 'outlined' | 'standard';\n  onChange: (from: PublicKey, maxAmount: BN) => void;\n  deposit?: boolean;\n};\n\nexport default function VestingAccountsSelect(p: Props) {\n  const { mint, decimals, variant, onChange, style, deposit } = p;\n  const vestings: ProgramAccount[] = useSelector((state: StoreState) => {\n    if (!mint) {\n      return [];\n    }\n    return state.lockup.vestings\n      .map(v => {\n        return { publicKey: v, account: state.accounts[v.toString()] };\n      })\n      .filter(v => v.account.mint.equals(mint));\n  });\n  const [fromAccount, setFromAccount] = useState('');\n  return (\n    <Select\n      style={style}\n      variant={variant}\n      fullWidth\n      value={fromAccount}\n      onChange={e => {\n        const pk = e.target.value as string;\n        setFromAccount(pk);\n        const pubkey = new PublicKey(pk);\n        const v = vestings.filter(v => v.publicKey.equals(pubkey)).pop();\n        onChange(pubkey, availableAmount(v!, deposit));\n      }}\n    >\n      {vestings.length === 0 ? (\n        <MenuItem value={''}>No vesting accounts found</MenuItem>\n      ) : (\n        vestings.map(v => {\n          return (\n            <MenuItem value={v.publicKey.toString()}>\n              <div\n                style={{\n                  width: '100%',\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                }}\n              >\n                <div>{`${v.publicKey.toString()}`}</div>\n                <div style={{ float: 'right', color: '#ccc' }}>{`${toDisplay(\n                  availableAmount(v, deposit),\n                  decimals,\n                )}`}</div>\n              </div>\n            </MenuItem>\n          );\n        })\n      )}\n    </Select>\n  );\n}\n\nfunction availableAmount(v: ProgramAccount, deposit?: boolean): BN {\n  return deposit\n    ? v.account.outstanding.sub(v.account.whitelistOwned)\n    : v.account.whitelistOwned;\n}\n","import React from 'react';\nimport MyNode from '../components/common/MyNode';\n\nexport default function MyNodePage() {\n  return <MyNode />;\n}\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport BN from 'bn.js';\nimport {\n  Account,\n  PublicKey,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n} from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { createTokenAccountInstrs } from '@project-serum/common';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport { State as StoreState } from '../../store/reducer';\nimport { ActionType } from '../../store/actions';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport OwnedTokenAccountsSelect from '../../components/common/OwnedTokenAccountsSelect';\nimport { fromDisplay } from '../../utils/tokens';\nimport { vestingSigner } from '../../utils/lockup';\nimport { ViewTransactionOnExplorerButton } from '../common/Notification';\n\nexport default function NewVestingButton() {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <div onClick={() => setOpen(true)}>\n        <Button variant=\"contained\" color=\"secondary\">\n          New\n        </Button>\n      </div>\n      <NewVestingDialog open={open} onClose={() => setOpen(false)} />\n    </>\n  );\n}\n\ntype NewVestingDialogProps = {\n  open: boolean;\n  onClose: () => void;\n};\n\nfunction NewVestingDialog(props: NewVestingDialogProps) {\n  const { open, onClose } = props;\n  const { network, accounts } = useSelector((state: StoreState) => {\n    return {\n      network: state.common.network,\n      accounts: state.accounts,\n    };\n  });\n\n  const defaultStartDate = new Date().toString();\n  const defaultStartTs = new Date(defaultStartDate).getTime() / 1000;\n  const defaultEndDate = '2027-01-01T12:00';\n  const defaultEndTs = new Date(defaultEndDate).getTime() / 1000;\n\n  const [beneficiary, setBeneficiary] = useState('');\n  const isValidBeneficiary = (() => {\n    try {\n      new PublicKey(beneficiary);\n      return true;\n    } catch (_) {\n      return false;\n    }\n  })();\n  const displayBeneficiaryError = !isValidBeneficiary && beneficiary !== '';\n\n  const [fromAccount, setFromAccount] = useState<null | PublicKey>(null);\n  const [startTimestamp, setStartTimestamp] = useState(defaultStartTs);\n  const [timestamp, setTimestamp] = useState(defaultEndTs);\n  const [periodCount, setPeriodCount] = useState(7);\n  const [displayAmount, setDisplayAmount] = useState<null | number>(null);\n  const { lockupClient } = useWallet();\n  const [isLoading, setIsLoading] = useState(false);\n  const [mint, setMint] = useState<null | PublicKey>(null);\n\n  const { enqueueSnackbar } = useSnackbar();\n  const dispatch = useDispatch();\n\n  const submitBtnEnabled =\n    mint !== null &&\n    fromAccount !== null &&\n    isValidBeneficiary &&\n    displayAmount !== null;\n\n  const createVestingClickHandler = async () => {\n    setIsLoading(true);\n    try {\n      const beneficiaryPublicKey = new PublicKey(beneficiary);\n      const beneficiaryAccount = await lockupClient.provider.connection.getAccountInfo(\n        beneficiaryPublicKey,\n      );\n      if (beneficiaryAccount === null) {\n        enqueueSnackbar('Unable to validate given beneficiary.', {\n          variant: 'error',\n        });\n        setIsLoading(false);\n        return;\n      }\n      if (!beneficiaryAccount.owner.equals(SystemProgram.programId)) {\n        enqueueSnackbar(\n          'The beneficiary must be owned by the System Program.',\n          {\n            variant: 'error',\n          },\n        );\n        setIsLoading(false);\n        return;\n      }\n\n      enqueueSnackbar('Creating vesting acount...', {\n        variant: 'info',\n      });\n\n      const mintAccount = accounts[mint!.toString()];\n      let amount = mintAccount\n        ? fromDisplay(displayAmount!, mintAccount.decimals)\n        : new BN(displayAmount!);\n\n      const vesting = new Account();\n      const vestingVault = new Account();\n      const _vestingSigner = await vestingSigner(\n        lockupClient.programId,\n        vesting.publicKey,\n      );\n\n      let tx = await lockupClient.rpc.createVesting(\n        beneficiaryPublicKey,\n        amount,\n        _vestingSigner.nonce,\n        new BN(startTimestamp),\n        new BN(timestamp),\n        new BN(periodCount),\n        null,\n        {\n          accounts: {\n            vesting: vesting.publicKey,\n            vault: vestingVault.publicKey,\n            depositor: fromAccount,\n            depositorAuthority: lockupClient.provider.wallet.publicKey,\n            tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n            rent: SYSVAR_RENT_PUBKEY,\n            clock: SYSVAR_CLOCK_PUBKEY,\n          },\n          signers: [vesting, vestingVault],\n          instructions: [\n            await lockupClient.account.vesting.createInstruction(vesting),\n            ...(await createTokenAccountInstrs(\n              lockupClient.provider,\n              vestingVault.publicKey,\n              mint!,\n              _vestingSigner.publicKey,\n            )),\n          ],\n        },\n      );\n      // Only add to the local store if the lockup belongs to the current user.\n      if (beneficiaryPublicKey.equals(lockupClient.provider.wallet.publicKey)) {\n        const vestingAccount = await lockupClient.account.vesting(\n          vesting.publicKey,\n        );\n        dispatch({\n          type: ActionType.LockupCreateVesting,\n          item: {\n            vesting: {\n              publicKey: vesting.publicKey,\n              account: vestingAccount,\n            },\n          },\n        });\n      }\n      enqueueSnackbar(`Vesting account created`, {\n        variant: 'success',\n        action: <ViewTransactionOnExplorerButton signature={tx} />,\n      });\n      onClose();\n    } catch (err) {\n      enqueueSnackbar(`Error creating vesting account: ${err.toString()}`, {\n        variant: 'error',\n      });\n    }\n    setIsLoading(false);\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose} fullWidth maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          New Vesting Account\n        </Typography>\n      </DialogTitle>\n      <DialogContent>\n        <div>\n          {isLoading && (\n            <div\n              style={{\n                width: '40px',\n                marginLeft: 'auto',\n                marginRight: 'auto',\n                marginBottom: '24px',\n              }}\n            >\n              <CircularProgress\n                style={{ marginLeft: 'auto', marginRight: 'auto' }}\n              />\n            </div>\n          )}\n          <div style={{ display: 'flex', width: '100%' }}>\n            <div>\n              <FormControl variant=\"outlined\" style={{ width: '200px' }}>\n                <InputLabel>Mint</InputLabel>\n                <Select\n                  value={mint ? mint!.toString() : ''}\n                  onChange={e =>\n                    setMint(new PublicKey(e.target.value as string))\n                  }\n                >\n                  {Object.keys(network.mints).map(m => (\n                    <MenuItem value={network.mints[m].toString()}>\n                      {m.toUpperCase()}\n                    </MenuItem>\n                  ))}\n                  {/*<MenuItem value=\"custom\">Custom</MenuItem>*/}\n                </Select>\n              </FormControl>\n            </div>\n            {false && (\n              <div style={{ flex: 1, marginLeft: '10px' }}>\n                <TextField\n                  fullWidth\n                  label=\"Custom mint\"\n                  value={mint ? mint!.toString() : ''}\n                  onChange={e => setMint(new PublicKey(e.target.value))}\n                />\n                <FormHelperText>Mint of the token to lockup</FormHelperText>\n              </div>\n            )}\n          </div>\n          <div>\n            <div style={{ display: 'flex', width: '100%' }}>\n              <div style={{ flex: 1 }}>\n                <FormControl fullWidth>\n                  <InputLabel>From</InputLabel>\n                  <OwnedTokenAccountsSelect\n                    mint={mint}\n                    onChange={(f: PublicKey) => setFromAccount(f)}\n                  />\n                  <FormHelperText>Token account to send from</FormHelperText>\n                </FormControl>\n              </div>\n            </div>\n          </div>\n          <div style={{ marginTop: '24px' }}>\n            <TextField\n              fullWidth\n              error={displayBeneficiaryError}\n              helperText={displayBeneficiaryError && 'Invalid beneficiary'}\n              label=\"Beneficiary\"\n              value={beneficiary}\n              onChange={e => setBeneficiary(e.target.value)}\n            />\n            <FormHelperText>Owner of the new vesting account</FormHelperText>\n          </div>\n          <div\n            style={{\n              marginTop: '24px',\n            }}\n          >\n            {false && (\n              <FormHelperText style={{ color: 'blue' }}>\n                Note: Amounts for custom mints (i.e., not SRM/MSRM) are in their\n                raw, non-decimal form. Make sure to convert before entering into\n                the fields here. For example, if a token has 6 decimals, then\n                multiply your desired amount by 10^6.\n              </FormHelperText>\n            )}\n            <TextField\n              fullWidth\n              label=\"Amount\"\n              type=\"number\"\n              value={displayAmount}\n              InputProps={{ inputProps: { min: 0 } }}\n              onChange={e => setDisplayAmount(parseFloat(e.target.value))}\n            />\n            <FormHelperText>\n              Amount to deposit into the vesting account\n            </FormHelperText>\n          </div>\n          <div\n            style={{\n              marginTop: '24px',\n              display: 'flex',\n            }}\n          >\n            <div style={{ flex: 1, marginRight: '10px' }}>\n              <TextField\n                fullWidth\n                label=\"Start date\"\n                type=\"datetime-local\"\n                defaultValue={defaultStartDate}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                onChange={e => {\n                  const d = new Date(e.target.value);\n                  setStartTimestamp(d.getTime() / 1000);\n                }}\n              />\n              <FormHelperText>Date when vesting begins</FormHelperText>\n            </div>\n            <div>\n              <TextField\n                disabled\n                fullWidth\n                label=\"Unix Timestamp\"\n                value={startTimestamp}\n              />\n            </div>\n          </div>\n          <div\n            style={{\n              marginTop: '24px',\n              display: 'flex',\n            }}\n          >\n            <div style={{ flex: 1, marginRight: '10px' }}>\n              <TextField\n                fullWidth\n                label=\"End date\"\n                type=\"datetime-local\"\n                defaultValue={defaultEndDate}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                onChange={e => {\n                  const d = new Date(e.target.value);\n                  setTimestamp(d.getTime() / 1000);\n                }}\n              />\n              <FormHelperText>Date when all tokens are vested</FormHelperText>\n            </div>\n            <div>\n              <TextField\n                disabled\n                fullWidth\n                label=\"Unix Timestamp\"\n                value={timestamp}\n              />\n            </div>\n          </div>\n          <div\n            style={{\n              marginTop: '24px',\n            }}\n          >\n            <FormControl fullWidth>\n              <TextField\n                id=\"outlined-number\"\n                label=\"Period Count\"\n                type=\"number\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant=\"outlined\"\n                value={periodCount}\n                onChange={e =>\n                  setPeriodCount(parseInt(e.target.value) as number)\n                }\n                InputProps={{ inputProps: { min: 1 } }}\n              />\n              <FormHelperText>Number of vesting periods</FormHelperText>\n            </FormControl>\n          </div>\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button\n          variant=\"contained\"\n          type=\"submit\"\n          color=\"primary\"\n          disabled={!submitBtnEnabled || isLoading}\n          onClick={() => createVestingClickHandler()}\n        >\n          Create\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport ChartistGraph from 'react-chartist';\nimport { useDispatch, useSelector } from 'react-redux';\nimport BN from 'bn.js';\nimport { useSnackbar } from 'notistack';\nimport { FixedScaleAxis, IChartOptions, Interpolation } from 'chartist';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Card from '@material-ui/core/Card';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Link from '@material-ui/core/Link';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Collapse from '@material-ui/core/Collapse';\nimport { PublicKey, SYSVAR_CLOCK_PUBKEY } from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { ProgramAccount, State as StoreState } from '../../store/reducer';\nimport { Network } from '../../store/config';\nimport { useWallet } from '../common/WalletProvider';\nimport OwnedTokenAccountsSelect from '../../components/common/OwnedTokenAccountsSelect';\nimport { withTx } from '../../components/common/Notification';\nimport { ActionType } from '../../store/actions';\nimport { getImage } from '../../components/common/RegistrarSelect';\nimport { useTokenInfos, toDisplay, toDisplayLabel } from '../../utils/tokens';\nimport {\n  vestingSigner,\n  availableForWithdrawal as _availableForWithdrawal,\n} from '../../utils/lockup';\n\ntype VestingAccountCardProps = {\n  network: Network;\n  vesting: ProgramAccount;\n};\n\nexport default function VestingAccountCard(props: VestingAccountCardProps) {\n  const { vesting, network } = props;\n  const { lockupClient, registryClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n  const tokenInfos = useTokenInfos();\n  const dispatch = useDispatch();\n  const { accounts, member, mintAccount } = useSelector((state: StoreState) => {\n    return {\n      accounts: state.accounts,\n      member: state.registry.member\n        ? {\n            publicKey: state.registry.member,\n            account: state.accounts[state.registry.member.toString()],\n          }\n        : undefined,\n      mintAccount: state.accounts[vesting.account.mint.toString()],\n    };\n  });\n  const [expanded, setExpanded] = useState(false);\n  const [hover, setHover] = useState(false);\n\n  // Whitelisted mints only for now.\n  const isCustomMint = false;\n\n  let mint = accounts[vesting.account.mint.toString()];\n  const displayFn = mint\n    ? (input: BN) => {\n        return toDisplay(input, mint.decimals);\n      }\n    : (input: BN) => input.toString();\n\n  const outstandingLabel = `${displayFn(\n    vesting.account.outstanding,\n  )} ${toDisplayLabel(vesting.account.mint)}`;\n  const startTs = vesting.account.startTs;\n  const endTs = vesting.account.endTs;\n\n  const tsOverflow = endTs.sub(startTs).mod(vesting.account.periodCount);\n  const shiftedStartTs = startTs.sub(tsOverflow);\n\n  const period = endTs.sub(shiftedStartTs).div(vesting.account.periodCount);\n\n  // Make the horizontal axis evenly spaced.\n  //\n  // Vesting dates assuming we stretch the start date back in time (so that the\n  // periods are of even length).\n  const vestingDates = [\n    ...Array(vesting.account.periodCount.toNumber() + 1),\n  ].map((_, idx) => {\n    return formatDate(\n      new Date((shiftedStartTs.toNumber() + idx * period.toNumber()) * 1000),\n    );\n  });\n  // Now push the start window forward to the real start date, making the first period shorter.\n  vestingDates[0] = formatDate(new Date(startTs.toNumber() * 1000));\n\n  // Now do the same thing on the vertical axis.\n  const rewardOverflow = vesting.account.startBalance.mod(\n    vesting.account.periodCount,\n  );\n  const rewardPerPeriod = vesting.account.startBalance\n    .sub(rewardOverflow)\n    .div(vesting.account.periodCount)\n    .toNumber();\n  const cumulativeVesting = [...Array(vestingDates.length)].map(() => 0);\n  cumulativeVesting[1] = rewardPerPeriod + rewardOverflow.toNumber();\n  for (let k = 2; k < cumulativeVesting.length; k += 1) {\n    cumulativeVesting[k] = cumulativeVesting[k - 1] + rewardPerPeriod;\n  }\n\n  const startLabel = formatDate(\n    new Date(vesting.account.startTs.toNumber() * 1000),\n  );\n  const endLabel = formatDate(\n    new Date(vesting.account.endTs.toNumber() * 1000),\n  );\n  const urlSuffix = `?cluster=${network.explorerClusterSuffix}`;\n\n  const [\n    availableForWithdrawal,\n    setAvailableForWithdrawal,\n  ] = useState<null | BN>(null);\n  const [withdrawalAccount, setWithdrawalAccount] = useState<null | PublicKey>(\n    null,\n  );\n\n  useEffect(() => {\n    _availableForWithdrawal(lockupClient, vesting.publicKey)\n      .then((amount: BN) => {\n        setAvailableForWithdrawal(amount);\n      })\n      .catch((err: any) => {\n        console.error(err);\n        enqueueSnackbar(\n          `Error fetching available for withdrawal: ${err.toString()}`,\n          {\n            variant: 'error',\n          },\n        );\n      });\n  }, [lockupClient, vesting, enqueueSnackbar]);\n  const snack = useSnackbar();\n\n  const withdrawEnabled =\n    withdrawalAccount !== null &&\n    availableForWithdrawal !== null &&\n    availableForWithdrawal.gtn(0);\n  const withdraw = async () => {\n    await withTx(\n      snack,\n      'Withdrawing locked tokens',\n      'Tokens unlocked',\n      async () => {\n        const remainingAccounts = (() => {\n          if (vesting.account.realizor) {\n            if (!member) {\n              // Should never be thrown.\n              throw new Error('Member account not found');\n            }\n            return [\n              {\n                pubkey: registryClient.programId,\n                isSigner: false,\n                isWritable: false,\n              },\n              { pubkey: member.publicKey, isSigner: false, isWritable: false },\n              {\n                pubkey: member.account.balances.spt,\n                isSigner: false,\n                isWritable: false,\n              },\n              {\n                pubkey: member.account.balancesLocked.spt,\n                isSigner: false,\n                isWritable: false,\n              },\n            ];\n          } else {\n            return undefined;\n          }\n        })();\n        const tx = await lockupClient.rpc.withdraw(availableForWithdrawal!, {\n          accounts: {\n            vesting: vesting.publicKey,\n            beneficiary: lockupClient.provider.wallet.publicKey,\n            token: withdrawalAccount!,\n            vault: vesting.account.vault,\n            vestingSigner: (\n              await vestingSigner(lockupClient.programId, vesting.publicKey)\n            ).publicKey,\n            tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n            clock: SYSVAR_CLOCK_PUBKEY,\n          },\n          remainingAccounts,\n        });\n        const newVesting = await lockupClient.account.vesting(\n          vesting.publicKey,\n        );\n        dispatch({\n          type: ActionType.LockupUpdateVesting,\n          item: {\n            vesting: {\n              publicKey: vesting.publicKey,\n              account: newVesting,\n            },\n          },\n        });\n        return tx;\n      },\n    );\n  };\n  const rows = [\n    {\n      field: 'Projected unlock',\n      value:\n        availableForWithdrawal === null\n          ? null\n          : displayFn(availableForWithdrawal!),\n    },\n    {\n      field: 'Locked outstanding',\n      value: displayFn(vesting.account.outstanding),\n    },\n    {\n      field: 'Current balance',\n      value: displayFn(\n        vesting.account.outstanding.sub(vesting.account.whitelistOwned),\n      ),\n    },\n    { field: 'Initial lockup', value: displayFn(vesting.account.startBalance) },\n    {\n      field: 'Amount unlocked',\n      value: displayFn(\n        vesting.account.startBalance.sub(vesting.account.outstanding),\n      ),\n    },\n    {\n      field: 'Whitelist owned',\n      value: displayFn(vesting.account.whitelistOwned),\n    },\n    { field: 'Period count', value: vesting.account.periodCount.toString() },\n    {\n      field: 'Start timestamp',\n      value: `${new Date(\n        vesting.account.startTs.toNumber() * 1000,\n      ).toLocaleString()} (${vesting.account.startTs.toString()})`,\n    },\n    {\n      field: 'End timestamp',\n      value: `${new Date(\n        vesting.account.endTs.toNumber() * 1000,\n      ).toLocaleString()} (${vesting.account.endTs.toString()})`,\n    },\n    { field: 'Vault', value: vesting.account.vault.toString() },\n    {\n      field: 'Realizer program',\n      value: vesting.account.realizor\n        ? vesting.account.realizor.program.toString()\n        : 'None',\n    },\n    {\n      field: 'Realizer metadata',\n      value: vesting.account.realizor\n        ? vesting.account.realizor.metadata.toString()\n        : 'None',\n    },\n    {\n      field: 'Grantor',\n      value: vesting.account.grantor.toString(),\n    },\n  ];\n\n  return (\n    <Card\n      key={vesting.publicKey.toString()}\n      onMouseOver={() => setHover(true)}\n      onMouseOut={() => setHover(false)}\n      style={{\n        marginTop: '24px',\n        cursor: hover ? 'pointer' : 'default',\n      }}\n    >\n      <CardContent style={{ paddingBottom: '16px' }}>\n        <ListItem onClick={() => setExpanded(!expanded)}>\n          <div\n            style={{\n              width: '100%',\n              display: 'flex',\n              justifyContent: 'space-between',\n            }}\n          >\n            <ListItemIcon>\n              {getImage(tokenInfos.get(vesting.account.mint.toString()), {\n                marginRight: '16px',\n                width: '56px',\n              })}\n            </ListItemIcon>\n            <ListItemText\n              primary={\n                <Link\n                  href={\n                    `https://explorer.solana.com/account/${vesting.publicKey.toBase58()}` +\n                    urlSuffix\n                  }\n                  target=\"_blank\"\n                  rel=\"noopener\"\n                >\n                  {vesting.publicKey.toString()}\n                </Link>\n              }\n              secondary={`${startLabel}, ${endLabel} | ${vesting.account.periodCount.toNumber()} periods`}\n            />\n            <div\n              style={{\n                marginTop: '6px',\n                color: 'rgba(0, 0, 0, 0.54)',\n                display: 'flex',\n                justifyContent: 'space-between',\n                flexDirection: 'column',\n                maxWidth: '200px',\n              }}\n            >\n              <Typography\n                style={{ overflow: 'hidden', whiteSpace: 'nowrap' }}\n                variant=\"body1\"\n              >\n                {outstandingLabel}\n              </Typography>\n            </div>\n          </div>\n        </ListItem>\n        <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n          <Typography></Typography>\n          {vestingDates.length <= 15 ? (\n            <ChartistGraph\n              data={{\n                labels: vestingDates,\n                series: [cumulativeVesting],\n              }}\n              options={\n                {\n                  axisY: {\n                    type: FixedScaleAxis,\n                    low: 0,\n                    high: cumulativeVesting[cumulativeVesting.length - 1],\n                    ticks: cumulativeVesting,\n                  },\n                  lineSmooth: Interpolation.step(),\n                  height: 400,\n                } as IChartOptions\n              }\n              type={'Line'}\n            />\n          ) : (\n            <div style={{ textAlign: 'center', fontWeight: 'bold' }}>\n              {/* TOOD: graphs for vesting accounts with a lot of periods. */}A\n              graph isn't available for this account.\n            </div>\n          )}\n          <div>\n            {isCustomMint && (\n              <div\n                style={{\n                  padding: '15px',\n                }}\n              >\n                <b>\n                  Note: custom mints (i.e. not SRM/MSRM) display raw token\n                  amounts without decimals.\n                </b>\n              </div>\n            )}\n            <Table>\n              <TableBody>\n                {rows.map(r => {\n                  return (\n                    <TableRow>\n                      <TableCell>{r.field}</TableCell>\n                      <TableCell align=\"right\">\n                        {r.value === null ? (\n                          <CircularProgress\n                            style={{\n                              height: '20px',\n                              width: '20px',\n                              padding: 0,\n                            }}\n                          />\n                        ) : (\n                          r.value\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n            <div style={{ display: 'flex', marginTop: '15px' }}>\n              <OwnedTokenAccountsSelect\n                decimals={mintAccount ? mintAccount.decimals : undefined}\n                mint={vesting.account.mint}\n                onChange={(f: PublicKey) => setWithdrawalAccount(f)}\n              />\n              <div style={{ marginLeft: '20px', width: '191px' }}>\n                <Button\n                  style={{ fontSize: '12px' }}\n                  color=\"primary\"\n                  disabled={!withdrawEnabled}\n                  variant=\"contained\"\n                  onClick={() =>\n                    withdraw().catch(err => {\n                      let msg = err.toString();\n                      if (\n                        msg &&\n                        msg.split('custom program error: 0x78').length === 2\n                      ) {\n                        msg = 'Unrealized rewards. Please unstake';\n                      }\n                      enqueueSnackbar(\n                        `Error withdrawing from vesting account: ${err.toString()}`,\n                        {\n                          variant: 'error',\n                        },\n                      );\n                    })\n                  }\n                >\n                  Unlock tokens\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Collapse>\n      </CardContent>\n    </Card>\n  );\n}\n\n// TODO: locale format without minutes, hours, seconds?\nfunction formatDate(d: Date): string {\n  return `${d.getMonth() + 1}/${d.getDate()}/${d.getFullYear()}`;\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport ListItem from '@material-ui/core/ListItem';\nimport Container from '@material-ui/core/Container';\nimport List from '@material-ui/core/List';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport { State as StoreState } from '../../store/reducer';\nimport NewVestingButton from './NewVesting';\nimport VestingAccountCard from './VestingAccountCard';\n\nexport default function Vestings() {\n  const { wallet } = useWallet();\n  const { vestingAccounts, network } = useSelector((state: StoreState) => {\n    return {\n      vestingAccounts: state.lockup.vestings.map(v => {\n        return {\n          publicKey: v,\n          account: state.accounts[v.toString()],\n        };\n      }),\n      network: state.common.network,\n    };\n  });\n\n  return (\n    <Container fixed maxWidth=\"md\">\n      <div style={{ width: '100%' }}>\n        <div style={{ marginTop: '24px', marginBottom: '24px' }}>\n          <link\n            rel=\"stylesheet\"\n            href=\"//cdn.jsdelivr.net/chartist.js/latest/chartist.min.css\"\n          />\n          <script src=\"//cdn.jsdelivr.net/chartist.js/latest/chartist.min.js\"></script>\n          {wallet.publicKey && (\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'space-between',\n                marginBottom: '24px',\n              }}\n            >\n              <div\n                style={{\n                  display: 'flex',\n                  justifyContent: 'center',\n                  flexDirection: 'column',\n                }}\n              >\n                <Typography\n                  style={{\n                    fontSize: '20px',\n                    fontWeight: 'bold',\n                  }}\n                >\n                  Projected Unlocks\n                </Typography>\n              </div>\n              <div>\n                <NewVestingButton />\n              </div>\n            </div>\n          )}\n          <Typography color=\"textSecondary\">\n            In addition to a vesting schedule, locked token accounts are subject\n            to an application dependent\n            <b> realization condition</b>, determining if and when locked tokens\n            are given to a user. For example, in the case of locked staking\n            rewards, locked tokens become realized in the event of unstaking. If\n            one never unstakes, one never receives locked token rewards.\n          </Typography>\n          <List\n            disablePadding\n            style={{ marginLeft: 'auto', marginRight: 'auto' }}\n          >\n            {vestingAccounts.map(v => (\n              <VestingAccountCard network={network} vesting={v} />\n            ))}\n            {vestingAccounts.length === 0 && (\n              <Card\n                style={{\n                  marginTop: '24px',\n                }}\n              >\n                <CardContent>\n                  <ListItem>\n                    <div\n                      style={{\n                        width: '100%',\n                        display: 'flex',\n                        justifyContent: 'space-between',\n                      }}\n                    >\n                      <Typography color=\"textSecondary\" variant=\"h6\">\n                        No vesting accounts found\n                      </Typography>\n                    </div>\n                  </ListItem>\n                </CardContent>\n              </Card>\n            )}\n          </List>\n        </div>\n      </div>\n    </Container>\n  );\n}\n","import React from 'react';\nimport Vestings from '../components/lockups/Vestings';\n\nexport default function LockupPage() {\n  return <Vestings />;\n}\n","import React from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport Multisig from '../components/multisig/Multisig';\nimport { PublicKey } from '@solana/web3.js';\n\nexport default function MultisigPage() {\n  return <Multisig />;\n}\n\nexport function MultisigInstancePage() {\n  const history = useHistory();\n  const location = useLocation();\n  const path = location.pathname.split('/');\n  if (path.length !== 3) {\n    history.push(`/multisig`);\n    return <></>;\n  } else {\n    const multisig = new PublicKey(path[2]);\n    return <Multisig multisig={multisig} />;\n  }\n}\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter, Route } from 'react-router-dom';\nimport { SnackbarProvider } from 'notistack';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { unstable_createMuiStrictModeTheme as createMuiTheme } from '@material-ui/core/styles';\nimport { store } from './store';\nimport WalletProvider from './components/common/WalletProvider';\nimport BootstrapProvider from './components/common/BootstrapProvider';\nimport { TokenRegistryProvider } from './utils/tokens';\nimport Layout from './components/common/Layout';\nimport MyNodePage from './pages/MyNode';\nimport LockupPage from './pages/Lockup';\nimport MultisigPage, { MultisigInstancePage } from './pages/Multisig';\n\nfunction App() {\n  const theme = createMuiTheme({\n    palette: {\n      background: {\n        default: 'rgb(255,255,255)',\n      },\n    },\n    typography: {\n      fontFamily: ['Source Sans Pro', 'sans-serif'].join(','),\n    },\n    overrides: {},\n  });\n  return (\n    <Provider store={store}>\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <SnackbarProvider maxSnack={5} autoHideDuration={8000}>\n\t\t\t\t\t<TokenRegistryProvider>\n\t\t\t\t\t\t<WalletProvider>\n\t\t\t\t\t\t\t<BootstrapProvider>\n\t\t\t\t\t\t\t\t<HashRouter basename={'/'}>\n\t\t\t\t\t\t\t\t\t<Layout>\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/\" component={MyNodePage} />\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/stake\" component={MyNodePage} />\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/lockup\" component={LockupPage} />\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/multisig\" component={MultisigPage} />\n\t\t\t\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\t\t\t\texact\n\t\t\t\t\t\t\t\t\t\t\tpath=\"/multisig/:address\"\n\t\t\t\t\t\t\t\t\t\t\tcomponent={MultisigInstancePage}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</Layout>\n\t\t\t\t\t\t\t\t</HashRouter>\n\t\t\t\t\t\t\t</BootstrapProvider>\n\t\t\t\t\t\t</WalletProvider>\n\t\t\t\t\t</TokenRegistryProvider>\n        </SnackbarProvider>\n      </MuiThemeProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { Transaction, PublicKey, Account } from '@solana/web3.js';\nimport * as serumCmn from '@project-serum/common';\nimport * as anchor from '@project-serum/anchor';\n\nexport async function registrarSigner(\n  programId: PublicKey,\n  registrar: PublicKey,\n): Promise<{ publicKey: PublicKey; nonce: number }> {\n  const [publicKey, nonce] = await anchor.web3.PublicKey.findProgramAddress(\n    [registrar.toBuffer()],\n    programId,\n  );\n  return {\n    publicKey,\n    nonce,\n  };\n}\n\nexport async function memberSigner(\n  programId: PublicKey,\n  registrar: PublicKey,\n  member: PublicKey,\n): Promise<{ publicKey: PublicKey; nonce: number }> {\n  const [publicKey, nonce] = await anchor.web3.PublicKey.findProgramAddress(\n    [registrar.toBuffer(), member.toBuffer()],\n    programId,\n  );\n  return {\n    publicKey,\n    nonce,\n  };\n}\n\nexport async function vendorSigner(\n  programId: PublicKey,\n  registrar: PublicKey,\n  vendor: PublicKey,\n): Promise<{ publicKey: PublicKey; nonce: number }> {\n  const [publicKey, nonce] = await anchor.web3.PublicKey.findProgramAddress(\n    [registrar.toBuffer(), vendor.toBuffer()],\n    programId,\n  );\n  return {\n    publicKey,\n    nonce,\n  };\n}\n\n// Returns the seed used to derive a member address. This is not necessary, but\n// a UX convenience. Each member address is a deterministic function of the\n// program, beneficiary, and this (constant) seed.\nexport async function memberSeed(registrar: PublicKey): Promise<string> {\n  const seed = await anchor.utils.sha256(`${registrar.toString()}:Member`);\n  // The max length of seeds allowed by Solana is 32.\n  return seed.slice(0, 32);\n}\n\n// Creates all the SPL otken vaults needed for constructing a `Member` account.\nexport async function createBalanceSandbox(\n  provider: serumCmn.Provider,\n  r: any,\n  registrySigner: PublicKey,\n) {\n  const spt = new Account();\n  const vault = new Account();\n  const vaultStake = new Account();\n  const vaultPw = new Account();\n\n  const lamports = await provider.connection.getMinimumBalanceForRentExemption(\n    165,\n  );\n\n  const createSptIx = await serumCmn.createTokenAccountInstrs(\n    provider,\n    spt.publicKey,\n    r.poolMint,\n    registrySigner,\n    lamports,\n  );\n  const createVaultIx = await serumCmn.createTokenAccountInstrs(\n    provider,\n    vault.publicKey,\n    r.mint,\n    registrySigner,\n    lamports,\n  );\n  const createVaultStakeIx = await serumCmn.createTokenAccountInstrs(\n    provider,\n    vaultStake.publicKey,\n    r.mint,\n    registrySigner,\n    lamports,\n  );\n  const createVaultPwIx = await serumCmn.createTokenAccountInstrs(\n    provider,\n    vaultPw.publicKey,\n    r.mint,\n    registrySigner,\n    lamports,\n  );\n  let tx0 = new Transaction();\n  tx0.add(\n    ...createSptIx,\n    ...createVaultIx,\n    ...createVaultStakeIx,\n    ...createVaultPwIx,\n  );\n  let signers0 = [spt, vault, vaultStake, vaultPw];\n\n  const tx = { tx: tx0, signers: signers0 };\n\n  return [\n    tx,\n    {\n      spt: spt.publicKey,\n      vault: vault.publicKey,\n      vaultStake: vaultStake.publicKey,\n      vaultPw: vaultPw.publicKey,\n    },\n  ];\n}\n\n// Returns all events in the reward queue.\nexport function rewardEvents(rewardQ: any): any[] {\n  let events = [];\n  let tail = rewardQ.tail;\n  while (tail < rewardQ.head) {\n    let idx = tail % rewardQ.events.length;\n    events.push(rewardQ.events[idx]);\n    tail += 1;\n  }\n  return events;\n}\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport BN from 'bn.js';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { PublicKey } from '@solana/web3.js';\nimport { State as StoreState } from '../../store/reducer';\nimport { toDisplay } from '../../utils/tokens';\n\ntype Props = {\n  style?: any;\n  mint?: PublicKey | null;\n  decimals?: number;\n  variant?: 'outlined' | 'standard';\n  onChange: (from: PublicKey, maxAmount: BN) => void;\n};\n\nexport default function OwnedTokenAccountsSelect(p: Props) {\n  const { mint, decimals, variant, onChange, style } = p;\n  const ownedTokenAccounts = useSelector((state: StoreState) => {\n    if (!mint) {\n      return [];\n    }\n    return state.common.ownedTokenAccounts.filter(\n      ota => ota.account.mint.toString() === mint.toString(),\n    );\n  });\n\n  const [fromAccount, setFromAccount] = useState('');\n\n  return (\n    <Select\n      style={style}\n      variant={variant}\n      fullWidth\n      value={fromAccount}\n      onChange={e => {\n        const pk = e.target.value as string;\n        setFromAccount(pk);\n        const pubkey = new PublicKey(pk);\n        const token = ownedTokenAccounts\n          .filter(ota => ota.publicKey.equals(pubkey))\n          .pop();\n        onChange(pubkey, new BN(token!.account.amount));\n      }}\n    >\n      {ownedTokenAccounts.length === 0 ? (\n        <MenuItem value={''}>No token accounts found</MenuItem>\n      ) : (\n        ownedTokenAccounts.map(ownedTokenAccount => {\n          return (\n            <MenuItem value={ownedTokenAccount.publicKey.toString()}>\n              <div\n                style={{\n                  width: '100%',\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                  overflow: 'hidden',\n                }}\n              >\n                <div>{`${ownedTokenAccount.publicKey}`}</div>\n                {decimals && (\n                  <div style={{ float: 'right', color: '#ccc' }}>{`${toDisplay(\n                    ownedTokenAccount.account.amount,\n                    decimals ?? 0,\n                  )}`}</div>\n                )}\n              </div>\n            </MenuItem>\n          );\n        })\n      )}\n    </Select>\n  );\n}\n","import { PublicKey } from '@solana/web3.js';\n\ntype Networks = { [label: string]: Network };\n\nexport type Network = {\n  // Cluster.\n  label: string;\n  url: string;\n  explorerClusterSuffix: string;\n\n  // Faucets.\n  srmFaucet: PublicKey | null;\n  msrmFaucet: PublicKey | null;\n\n  // Programs.\n  registryProgramId: PublicKey;\n  lockupProgramId: PublicKey;\n  multisigProgramId: PublicKey;\n\n  // Staking instances.\n  registrars: { [token: string]: PublicKey };\n\n  // Whitelisted token mints.\n  mints: { [token: string]: PublicKey };\n};\n\nexport const networks: Networks = {\n  mainnet: {\n    // Cluster.\n    label: 'Mainnet Beta',\n    url: 'https://solana-api.projectserum.com',\n    //url: 'https://api.mainnet-beta.solana.com',\n    explorerClusterSuffix: '',\n\n    srmFaucet: null,\n    msrmFaucet: null,\n\n    registryProgramId: new PublicKey(\n      'GrAkKfEpTKQuVHG2Y97Y2FF4i7y7Q5AHLK94JBy7Y5yv',\n    ),\n    lockupProgramId: new PublicKey(\n      '6ebQNeTPZ1j7k3TtkCCtEPRvG7GQsucQrZ7sSEDQi9Ks',\n    ),\n    multisigProgramId: new PublicKey(\n      '3S6ALMCGVib4X3vVR3CLpm2K6Ng5qbWFYMTo5jfxWcEq',\n    ),\n    registrars: {\n      srm: new PublicKey('5vJRzKtcp4fJxqmR7qzajkaKSiAb6aT9grRsaZKXU222'),\n      msrm: new PublicKey('7uURiX2DwCpRuMFebKSkFtX9v5GK1Cd8nWLL8tyoyxZY'),\n      maps: new PublicKey('9tzkorTXKbw73hokMsq34R6ADd13eJF9X4udXQLiGAKc'),\n      oxy: new PublicKey('DsWhta1RWA9NYEamaeYsGHpfLRX91bA4bWGnaivtFju2'),\n      fida: new PublicKey('5C2ayX1E2SJ5kKEmDCA9ue9eeo3EPR34QFrhyzbbs3qh'),\n    },\n    mints: {\n      srm: new PublicKey('SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt'),\n      msrm: new PublicKey('MSRMcoVyrFxnSgo5uXwone5SKcGhT1KEJMFEkMEWf9L'),\n      maps: new PublicKey('MAPS41MDahZ9QdKXhVa4dWB9RuyfV4XqhyAZ8XcYepb'),\n      oxy: new PublicKey('z3dn17yLaGMKffVogeFHQ9zWVcXgqgf3PQnDsNs2g6M'),\n      fida: new PublicKey('EchesyfXePKdLtoiZSL8pBe8Myagyy8ZRqsACNCFGnvp'),\n    },\n  },\n  devnet: {\n    // Cluster.\n    label: 'Devnet',\n    url: 'https://devnet.solana.com',\n    explorerClusterSuffix: 'devnet',\n\n    srmFaucet: null,\n    msrmFaucet: null,\n    multisigProgramId: new PublicKey(\n      '9z7Pq56To96qbVLzuBcf47Lc7u8uUWZh6k5rhcaTsDjz',\n    ),\n\n    registryProgramId: new PublicKey(\n      '65aMavjMw3EhmWKVCkGn1Uj2SqZ3XY4coJhYM1BVJTHw',\n    ),\n    lockupProgramId: new PublicKey(\n      'bRGMWZz4mzJ8NG8csn5QNTbJDv2973QSvppbfcAboje',\n    ),\n    registrars: {\n      token1: new PublicKey('EqbwcuvPWLZ5fav58HrieHmJEqTm6RPu5bmn5bBQJ3mu'),\n      token2: new PublicKey('2rDWuS6yVFQ3jYx1nQq7gs3HgzWLJcUwm9sTUBWuXuyK'),\n    },\n    mints: {\n      token1: new PublicKey('Ep6ASaHQ4gKiN3gWNRKYttZEQ7b82seMk9HWc5JNBJZP'),\n      token2: new PublicKey('5vWxJthWbCFuNSZj1qcP9WoU8E6UG3DUfeAoPvYoN8PQ'),\n    },\n  },\n\n  // Fill in with your local cluster addresses.\n  localhost: {\n    // Cluster.\n    label: 'Localhost',\n    url: 'http://localhost:8899',\n    explorerClusterSuffix: 'localhost',\n\n    srmFaucet: null,\n    msrmFaucet: null,\n\n    multisigProgramId: new PublicKey(\n      '9z7Pq56To96qbVLzuBcf47Lc7u8uUWZh6k5rhcaTsDjz',\n    ),\n    registryProgramId: new PublicKey(\n      'A3ukM9swAsTqVC6g5Zy9FsWXofe5f2JhXMEfzenNf9Q7',\n    ),\n    lockupProgramId: new PublicKey(\n      '2z65xTKJDM4iJBVz5aXtNrWfQvKGgNJvnqY1GL2mkimu',\n    ),\n    registrars: {\n      token1: new PublicKey('Fwi5pie2VgWTDUSRNkca1HdFCke5r3v3mY83JbxtC3CJ'),\n      token2: new PublicKey('9kCGBWgHzGGChvmAsmu5jrXwEShZfLxKRTmKdxEpFUBr'),\n    },\n    mints: {\n      token1: new PublicKey('2aE1pietadYMeDtdqKayS4SVo9W4xtC3U7SN4iGWCVcX'),\n      token2: new PublicKey('Cgan7PWyBH6Z7JNA6f9kDYgwBMZBxRexpdd29PJgnqah'),\n    },\n  },\n};\n"],"sourceRoot":""}